; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	Request_TypeID:BYTE:018H
_DATA	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__FC472216_tVector@h DB 01H
__EAE81D8C_tBucket@h DB 01H
__37B02CEB_tQues@h DB 01H
__A062F563_tQues@c DB 01H
msvcjmc	ENDS
PUBLIC	RollingQue_Clear
PUBLIC	RollingQue_ClearAll
PUBLIC	RollingQue_ctor
PUBLIC	Advance
PUBLIC	RollingQue_Append
PUBLIC	RollingQue_PullNext
PUBLIC	RollingQue_HasQue
PUBLIC	RollingQue_SeeNext
PUBLIC	__JustMyCode_Default
EXTRN	Collection_Read:PROC
EXTRN	Collection_Write:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_Clear DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$RollingQue_Clear
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_ClearAll DD imagerel $LN6
	DD	imagerel $LN6+109
	DD	imagerel $unwind$RollingQue_ClearAll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_ctor DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$RollingQue_ctor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Advance DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$Advance
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_Append DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$RollingQue_Append
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_PullNext DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$RollingQue_PullNext
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_HasQue DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$RollingQue_HasQue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RollingQue_SeeNext DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$RollingQue_SeeNext
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02bH
	DB	035H
	DB	047H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_SeeNext DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
	DB	030H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_HasQue DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_PullNext DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_Append DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
	DB	042H
	DB	059H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Advance DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03cH
	DB	0afH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_ctor DD 025064319H
	DD	01142319H
	DD	0700d0024H
	DD	0500b600cH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
RollingQue_ctor$rtcName$0 DB 06eH
	DB	065H
	DB	077H
	DB	051H
	DB	075H
	DB	065H
	DB	00H
	ORG $+9
RollingQue_ctor$rtcVarDesc DD 028H
	DD	028H
	DQ	FLAT:RollingQue_ctor$rtcName$0
	ORG $+48
RollingQue_ctor$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:RollingQue_ctor$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	04eH
	DB	05cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_ClearAll DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RollingQue_Clear DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_SeeNext
_TEXT	SEGMENT
que$ = 224
trg$ = 232
RollingQue_SeeNext PROC					; COMDAT

; 61   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 62   : 	if (que->_start == que->_next) {

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR que$[rbp]
  0002b	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR que$[rbp]
  00035	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  00038	3b c1		 cmp	 eax, ecx
  0003a	75 04		 jne	 SHORT $LN2@RollingQue

; 63   : 		//PREENT("End of que! No requests left to process!\n");
; 64   : 		return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 1e		 jmp	 SHORT $LN1@RollingQue
$LN2@RollingQue:

; 65   : 	}
; 66   : 
; 67   : 	return Collection_Read(que, trg, que->_start);

  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR que$[rbp]
  00047	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  0004b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR trg$[rbp]
  00052	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR que$[rbp]
  00059	e8 00 00 00 00	 call	 Collection_Read
$LN1@RollingQue:

; 68   : }

  0005e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00065	5f		 pop	 rdi
  00066	5d		 pop	 rbp
  00067	c3		 ret	 0
RollingQue_SeeNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_HasQue
_TEXT	SEGMENT
tv69 = 192
que$ = 240
RollingQue_HasQue PROC					; COMDAT

; 56   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   : 	return que->_start != que->_next;

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR que$[rbp]
  00026	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00029	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR que$[rbp]
  00030	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  00033	3b c1		 cmp	 eax, ecx
  00035	74 0c		 je	 SHORT $LN3@RollingQue
  00037	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00041	eb 0a		 jmp	 SHORT $LN4@RollingQue
$LN3@RollingQue:
  00043	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@RollingQue:
  0004d	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv69[rbp]

; 58   : }

  00053	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
RollingQue_HasQue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_PullNext
_TEXT	SEGMENT
que$ = 224
trg$ = 232
RollingQue_PullNext PROC				; COMDAT

; 44   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 45   : 	return false;

  00024	33 c0		 xor	 eax, eax

; 46   : 	//if (que->_start == que->_next) {
; 47   : 	//	//PREENT("End of que! No requests left to process!\n");
; 48   : 	//	return false;
; 49   : 	//}
; 50   : 	//
; 51   : 	//PREENT("Request pulled!\n");
; 52   : 	//return Collection_Read(que, trg, Advance(&que->_start));
; 53   : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
RollingQue_PullNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_Append
_TEXT	SEGMENT
que$ = 224
next$ = 232
RollingQue_Append PROC					; COMDAT

; 32   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 33   : 	return false;

  00024	33 c0		 xor	 eax, eax

; 34   : 	//if (que->_next + 1 == que->_start) {
; 35   : 	//	PREENT("Que Capacity Full! No request space!\n");
; 36   : 	//	return false;
; 37   : 	//}
; 38   : 	//
; 39   : 	//PREENT("Request made!\n");
; 40   : 	//return Collection_Write(que, next, Advance(&que->_next));
; 41   : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
RollingQue_Append ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT Advance
_TEXT	SEGMENT
tv70 = 192
index$ = 240
Advance	PROC						; COMDAT

; 27   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 28   : 	return InterlockedExchange(index, *index + 1 >= MaxQueCount ? 0 : *index + 1);

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR index$[rbp]
  00026	8b 00		 mov	 eax, DWORD PTR [rax]
  00028	ff c0		 inc	 eax
  0002a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0002d	72 0c		 jb	 SHORT $LN3@Advance
  0002f	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
  00039	eb 11		 jmp	 SHORT $LN4@Advance
$LN3@Advance:
  0003b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR index$[rbp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	ff c0		 inc	 eax
  00046	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
$LN4@Advance:
  0004c	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  00052	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR index$[rbp]
  00059	87 01		 xchg	 DWORD PTR [rcx], eax

; 29   : }

  0005b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
Advance	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_ctor
_TEXT	SEGMENT
newQue$ = 8
__$ArrayPad$ = 248
__$ReturnAddress$ = 288
bucket$ = 296
RollingQue_ctor PROC					; COMDAT

; 20   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 10 00 00 00	 mov	 ecx, 16
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00039	48 33 c5	 xor	 rax, rbp
  0003c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 21   : 	RollingQue newQue = { bucket };

  0004f	48 8d 45 08	 lea	 rax, QWORD PTR newQue$[rbp]
  00053	48 8b f8	 mov	 rdi, rax
  00056	48 8b b5 28 01
	00 00		 mov	 rsi, QWORD PTR bucket$[rbp]
  0005d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00062	f3 a4		 rep movsb
  00064	48 8d 45 28	 lea	 rax, QWORD PTR newQue$[rbp+32]
  00068	48 8b f8	 mov	 rdi, rax
  0006b	33 c0		 xor	 eax, eax
  0006d	b9 08 00 00 00	 mov	 ecx, 8
  00072	f3 aa		 rep stosb

; 22   : 	RollingQue_ClearAll(&newQue);

  00074	48 8d 4d 08	 lea	 rcx, QWORD PTR newQue$[rbp]
  00078	e8 00 00 00 00	 call	 RollingQue_ClearAll

; 23   : 	return newQue;

  0007d	48 8d 45 08	 lea	 rax, QWORD PTR newQue$[rbp]
  00081	48 8b bd 20 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnAddress$[rbp]
  00088	48 8b f0	 mov	 rsi, rax
  0008b	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00090	f3 a4		 rep movsb
  00092	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]

; 24   : }

  00099	48 8b f8	 mov	 rdi, rax
  0009c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:RollingQue_ctor$rtcFrameData
  000a7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ac	48 8b c7	 mov	 rax, rdi
  000af	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000b6	48 33 cd	 xor	 rcx, rbp
  000b9	e8 00 00 00 00	 call	 __security_check_cookie
  000be	48 8d a5 00 01
	00 00		 lea	 rsp, QWORD PTR [rbp+256]
  000c5	5f		 pop	 rdi
  000c6	5e		 pop	 rsi
  000c7	5d		 pop	 rbp
  000c8	c3		 ret	 0
RollingQue_ctor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_ClearAll
_TEXT	SEGMENT
i$1 = 4
que$ = 256
RollingQue_ClearAll PROC				; COMDAT

; 11   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 12   : 	for (int i = 0; i < MaxQueCount; i++)

  0001f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00026	eb 08		 jmp	 SHORT $LN4@RollingQue
$LN2@RollingQue:
  00028	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0002b	ff c0		 inc	 eax
  0002d	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@RollingQue:
  00030	83 7d 04 20	 cmp	 DWORD PTR i$1[rbp], 32	; 00000020H
  00034	7d 11		 jge	 SHORT $LN3@RollingQue

; 13   : 		RollingQue_Clear(que, i);

  00036	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR que$[rbp]
  00040	e8 00 00 00 00	 call	 RollingQue_Clear
  00045	eb e1		 jmp	 SHORT $LN2@RollingQue
$LN3@RollingQue:

; 14   : 
; 15   : 	que->_next = 0;

  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR que$[rbp]
  0004e	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [rax+36], 0

; 16   : 	que->_start = 0;

  00055	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR que$[rbp]
  0005c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 17   : }

  00063	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
RollingQue_ClearAll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tQues.c
;	COMDAT RollingQue_Clear
_TEXT	SEGMENT
que$ = 224
index$ = 232
RollingQue_Clear PROC					; COMDAT

; 6    : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A062F563_tQues@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 7    : 	Collection_Write(que, NULL, index);

  00023	44 8b 85 e8 00
	00 00		 mov	 r8d, DWORD PTR index$[rbp]
  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR que$[rbp]
  00033	e8 00 00 00 00	 call	 Collection_Write

; 8    : }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
RollingQue_Clear ENDP
_TEXT	ENDS
END
