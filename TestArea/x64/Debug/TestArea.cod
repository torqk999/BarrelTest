; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	ThreadHandle_TypeID:BYTE:018H
COMM	GlobalBarrelService:BYTE:030H
COMM	GlobalBarrelNodeType:BYTE:018H
COMM	barrelService_ThreadBin:BYTE:0100H
COMM	barrelService_QueBin:BYTE:0200H
_DATA	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__9A4426E4_tUserCollection@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__03948348_tThreads@h DB 01H
__978ECD68_tServices@h DB 01H
__FEADC134_tHeap@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__CE367354_tBarrel@h DB 01H
__308C18FA_BarrelTest@h DB 01H
__E8DC32E4_tLink@h DB 01H
__7D6FBD02_tHashMap@h DB 01H
__BC332FCF_TestArea@c DB 01H
msvcjmc	ENDS
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ ; `string'
PUBLIC	??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ ; `string'
EXTRN	Collection_Count:PROC
EXTRN	Collection_Read:PROC
EXTRN	Bucket_ctor:PROC
EXTRN	Preent:PROC
EXTRN	paramCount:PROC
EXTRN	Barrel_ctor:PROC
EXTRN	barrelTest:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN5
	DD	imagerel $LN5+1059
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ DB 'value a'
	DB	't index 3 of myBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
CONST	SEGMENT
??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ DB 'collection cou'
	DB	'nt of emptyBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@ DB 'value a'
	DB	't index 3 of myBarrel: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0409H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035063219H
	DD	010b3310H
	DD	0700400b0H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0578H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
main$rtcName$1 DB 024H
	DB	053H
	DB	031H
	DB	00H
main$rtcName$2 DB 024H
	DB	053H
	DB	032H
	DB	00H
main$rtcName$3 DB 024H
	DB	053H
	DB	033H
	DB	00H
main$rtcName$4 DB 024H
	DB	053H
	DB	034H
	DB	00H
main$rtcName$5 DB 024H
	DB	053H
	DB	035H
	DB	00H
main$rtcName$6 DB 024H
	DB	053H
	DB	036H
	DB	00H
main$rtcName$7 DB 024H
	DB	053H
	DB	037H
	DB	00H
main$rtcName$8 DB 024H
	DB	053H
	DB	038H
	DB	00H
main$rtcName$9 DB 024H
	DB	053H
	DB	039H
	DB	00H
main$rtcName$10 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
main$rtcName$11 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
main$rtcName$12 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+3
main$rtcName$13 DB 024H
	DB	053H
	DB	031H
	DB	033H
	DB	00H
	ORG $+3
main$rtcName$14 DB 024H
	DB	053H
	DB	031H
	DB	034H
	DB	00H
	ORG $+3
main$rtcName$15 DB 024H
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+3
main$rtcName$16 DB 024H
	DB	053H
	DB	031H
	DB	036H
	DB	00H
	ORG $+3
main$rtcName$17 DB 024H
	DB	053H
	DB	031H
	DB	037H
	DB	00H
	ORG $+3
main$rtcName$18 DB 024H
	DB	053H
	DB	031H
	DB	038H
	DB	00H
	ORG $+15
main$rtcVarDesc DD 03d8H
	DD	010H
	DQ	FLAT:main$rtcName$18
	DD	03b4H
	DD	04H
	DQ	FLAT:main$rtcName$17
	DD	0378H
	DD	020H
	DQ	FLAT:main$rtcName$16
	DD	0348H
	DD	010H
	DQ	FLAT:main$rtcName$15
	DD	0324H
	DD	04H
	DQ	FLAT:main$rtcName$14
	DD	02e8H
	DD	020H
	DQ	FLAT:main$rtcName$13
	DD	02b8H
	DD	018H
	DQ	FLAT:main$rtcName$12
	DD	0278H
	DD	020H
	DQ	FLAT:main$rtcName$11
	DD	0234H
	DD	07H
	DQ	FLAT:main$rtcName$10
	DD	0214H
	DD	07H
	DQ	FLAT:main$rtcName$9
	DD	01e8H
	DD	018H
	DQ	FLAT:main$rtcName$8
	DD	01a8H
	DD	020H
	DQ	FLAT:main$rtcName$7
	DD	0158H
	DD	010H
	DQ	FLAT:main$rtcName$6
	DD	0134H
	DD	04H
	DQ	FLAT:main$rtcName$5
	DD	0f8H
	DD	020H
	DQ	FLAT:main$rtcName$4
	DD	0d8H
	DD	08H
	DQ	FLAT:main$rtcName$3
	DD	0b8H
	DD	08H
	DQ	FLAT:main$rtcName$2
	DD	078H
	DD	01cH
	DQ	FLAT:main$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+912
main$rtcFrameData DD 013H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT main
_TEXT	SEGMENT
output$ = 4
myBarrel$ = 40
$S1$ = 72
$S2$ = 136
$S3$ = 168
$S4$ = 200
$S5$ = 260
$S6$ = 296
myBucket$ = 344
$S7$ = 376
$S8$ = 440
$S9$ = 484
$S10$ = 516
emptyBucket$ = 552
$S11$ = 584
$S12$ = 648
$S13$ = 696
$S14$ = 756
$S15$ = 792
$S16$ = 840
$S17$ = 900
$S18$ = 936
__$ArrayPad$ = 1352
main	PROC						; COMDAT

; 25   : int main() {

$LN5:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 80 05
	00 00		 sub	 rsp, 1408		; 00000580H
  0000b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00010	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00015	b9 f4 00 00 00	 mov	 ecx, 244		; 000000f4H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 48 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 26   : 
; 27   : 	barrelTest();

  0003e	e8 00 00 00 00	 call	 barrelTest

; 28   : 
; 29   : 	return 0;

  00043	33 c0		 xor	 eax, eax
  00045	e9 a9 03 00 00	 jmp	 $LN1@main

; 30   : 
; 31   : 	int output = 0;

  0004a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR output$[rbp], 0

; 32   : 
; 33   : 	COLLECTION myBarrel = Barrel_List(int, 0, 1, 2, 3, 4, 5, 6);

  00051	c6 85 a8 00 00
	00 00		 mov	 BYTE PTR $S3$[rbp], 0
  00058	c6 85 a9 00 00
	00 01		 mov	 BYTE PTR $S3$[rbp+1], 1
  0005f	c6 85 aa 00 00
	00 02		 mov	 BYTE PTR $S3$[rbp+2], 2
  00066	c6 85 ab 00 00
	00 03		 mov	 BYTE PTR $S3$[rbp+3], 3
  0006d	c6 85 ac 00 00
	00 04		 mov	 BYTE PTR $S3$[rbp+4], 4
  00074	c6 85 ad 00 00
	00 05		 mov	 BYTE PTR $S3$[rbp+5], 5
  0007b	c6 85 ae 00 00
	00 06		 mov	 BYTE PTR $S3$[rbp+6], 6
  00082	c6 85 af 00 00
	00 01		 mov	 BYTE PTR $S3$[rbp+7], 1
  00089	c6 85 88 00 00
	00 00		 mov	 BYTE PTR $S2$[rbp], 0
  00090	c6 85 89 00 00
	00 01		 mov	 BYTE PTR $S2$[rbp+1], 1
  00097	c6 85 8a 00 00
	00 02		 mov	 BYTE PTR $S2$[rbp+2], 2
  0009e	c6 85 8b 00 00
	00 03		 mov	 BYTE PTR $S2$[rbp+3], 3
  000a5	c6 85 8c 00 00
	00 04		 mov	 BYTE PTR $S2$[rbp+4], 4
  000ac	c6 85 8d 00 00
	00 05		 mov	 BYTE PTR $S2$[rbp+5], 5
  000b3	c6 85 8e 00 00
	00 06		 mov	 BYTE PTR $S2$[rbp+6], 6
  000ba	c6 85 8f 00 00
	00 00		 mov	 BYTE PTR $S2$[rbp+7], 0
  000c1	c7 45 48 00 00
	00 00		 mov	 DWORD PTR $S1$[rbp], 0
  000c8	c7 45 4c 01 00
	00 00		 mov	 DWORD PTR $S1$[rbp+4], 1
  000cf	c7 45 50 02 00
	00 00		 mov	 DWORD PTR $S1$[rbp+8], 2
  000d6	c7 45 54 03 00
	00 00		 mov	 DWORD PTR $S1$[rbp+12], 3
  000dd	c7 45 58 04 00
	00 00		 mov	 DWORD PTR $S1$[rbp+16], 4
  000e4	c7 45 5c 05 00
	00 00		 mov	 DWORD PTR $S1$[rbp+20], 5
  000eb	c7 45 60 06 00
	00 00		 mov	 DWORD PTR $S1$[rbp+24], 6
  000f2	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR $S3$[rbp]
  000f9	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR $S2$[rbp]
  00100	e8 00 00 00 00	 call	 paramCount
  00105	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00109	45 33 c9	 xor	 r9d, r9d
  0010c	4c 8d 45 48	 lea	 r8, QWORD PTR $S1$[rbp]
  00110	ba 04 00 00 00	 mov	 edx, 4
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  0011c	e8 00 00 00 00	 call	 Barrel_ctor
  00121	48 89 45 28	 mov	 QWORD PTR myBarrel$[rbp], rax

; 34   : 
; 35   : 	if (!Collection_Read(myBarrel, &output, 3))

  00125	41 b8 03 00 00
	00		 mov	 r8d, 3
  0012b	48 8d 55 04	 lea	 rdx, QWORD PTR output$[rbp]
  0012f	48 8b 4d 28	 mov	 rcx, QWORD PTR myBarrel$[rbp]
  00133	e8 00 00 00 00	 call	 Collection_Read
  00138	85 c0		 test	 eax, eax
  0013a	75 0a		 jne	 SHORT $LN2@main

; 36   : 		return 1;

  0013c	b8 01 00 00 00	 mov	 eax, 1
  00141	e9 ad 02 00 00	 jmp	 $LN1@main
$LN2@main:

; 37   : 
; 38   : 	PREENT_ARGS("value at index 3 of myBarrel: %\n", fmt_i(output));

  00146	c7 85 c8 00 00
	00 1d 00 00 00	 mov	 DWORD PTR $S4$[rbp], 29
  00150	8b 45 04	 mov	 eax, DWORD PTR output$[rbp]
  00153	89 85 04 01 00
	00		 mov	 DWORD PTR $S5$[rbp], eax
  00159	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $S5$[rbp]
  00160	48 89 85 d0 00
	00 00		 mov	 QWORD PTR $S4$[rbp+8], rax
  00167	c7 85 28 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S6$[rbp], -2
  00171	48 c7 85 30 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S6$[rbp+8], 0
  0017c	48 8d 85 d8 00
	00 00		 lea	 rax, QWORD PTR $S4$[rbp+16]
  00183	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $S6$[rbp]
  0018a	48 8b f8	 mov	 rdi, rax
  0018d	48 8b f1	 mov	 rsi, rcx
  00190	b9 10 00 00 00	 mov	 ecx, 16
  00195	f3 a4		 rep movsb
  00197	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $S4$[rbp]
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@
  001a5	e8 00 00 00 00	 call	 Preent

; 39   : 
; 40   : 	COLLECTION myBucket = Bucket_List(int, 0, 1.0f, 2, 3, 4, 5);

  001aa	c6 85 04 02 00
	00 00		 mov	 BYTE PTR $S10$[rbp], 0
  001b1	c6 85 05 02 00
	00 01		 mov	 BYTE PTR $S10$[rbp+1], 1
  001b8	c6 85 06 02 00
	00 02		 mov	 BYTE PTR $S10$[rbp+2], 2
  001bf	c6 85 07 02 00
	00 03		 mov	 BYTE PTR $S10$[rbp+3], 3
  001c6	c6 85 08 02 00
	00 04		 mov	 BYTE PTR $S10$[rbp+4], 4
  001cd	c6 85 09 02 00
	00 05		 mov	 BYTE PTR $S10$[rbp+5], 5
  001d4	c6 85 0a 02 00
	00 01		 mov	 BYTE PTR $S10$[rbp+6], 1
  001db	c6 85 e4 01 00
	00 00		 mov	 BYTE PTR $S9$[rbp], 0
  001e2	c6 85 e5 01 00
	00 01		 mov	 BYTE PTR $S9$[rbp+1], 1
  001e9	c6 85 e6 01 00
	00 02		 mov	 BYTE PTR $S9$[rbp+2], 2
  001f0	c6 85 e7 01 00
	00 03		 mov	 BYTE PTR $S9$[rbp+3], 3
  001f7	c6 85 e8 01 00
	00 04		 mov	 BYTE PTR $S9$[rbp+4], 4
  001fe	c6 85 e9 01 00
	00 05		 mov	 BYTE PTR $S9$[rbp+5], 5
  00205	c6 85 ea 01 00
	00 00		 mov	 BYTE PTR $S9$[rbp+6], 0
  0020c	c7 85 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR $S8$[rbp], 0
  00216	c7 85 bc 01 00
	00 01 00 00 00	 mov	 DWORD PTR $S8$[rbp+4], 1
  00220	c7 85 c0 01 00
	00 02 00 00 00	 mov	 DWORD PTR $S8$[rbp+8], 2
  0022a	c7 85 c4 01 00
	00 03 00 00 00	 mov	 DWORD PTR $S8$[rbp+12], 3
  00234	c7 85 c8 01 00
	00 04 00 00 00	 mov	 DWORD PTR $S8$[rbp+16], 4
  0023e	c7 85 cc 01 00
	00 05 00 00 00	 mov	 DWORD PTR $S8$[rbp+20], 5
  00248	48 8d 85 78 01
	00 00		 lea	 rax, QWORD PTR $S7$[rbp]
  0024f	48 8b f8	 mov	 rdi, rax
  00252	33 c0		 xor	 eax, eax
  00254	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00259	f3 aa		 rep stosb
  0025b	48 8d 95 04 02
	00 00		 lea	 rdx, QWORD PTR $S10$[rbp]
  00262	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $S9$[rbp]
  00269	e8 00 00 00 00	 call	 paramCount
  0026e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00272	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0027a	4c 8d 8d b8 01
	00 00		 lea	 r9, QWORD PTR $S8$[rbp]
  00281	4c 8d 85 78 01
	00 00		 lea	 r8, QWORD PTR $S7$[rbp]
  00288	ba 04 00 00 00	 mov	 edx, 4
  0028d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  00294	e8 00 00 00 00	 call	 Bucket_ctor
  00299	48 89 85 58 01
	00 00		 mov	 QWORD PTR myBucket$[rbp], rax

; 41   : 
; 42   : 	COLLECTION emptyBucket = Bucket_Empty(int, 6);

  002a0	48 8d 85 88 02
	00 00		 lea	 rax, QWORD PTR $S12$[rbp]
  002a7	48 8b f8	 mov	 rdi, rax
  002aa	33 c0		 xor	 eax, eax
  002ac	b9 18 00 00 00	 mov	 ecx, 24
  002b1	f3 aa		 rep stosb
  002b3	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR $S11$[rbp]
  002ba	48 8b f8	 mov	 rdi, rax
  002bd	33 c0		 xor	 eax, eax
  002bf	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  002c4	f3 aa		 rep stosb
  002c6	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR [rsp+40], 6
  002ce	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  002d6	4c 8d 8d 88 02
	00 00		 lea	 r9, QWORD PTR $S12$[rbp]
  002dd	4c 8d 85 48 02
	00 00		 lea	 r8, QWORD PTR $S11$[rbp]
  002e4	ba 04 00 00 00	 mov	 edx, 4
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  002f0	e8 00 00 00 00	 call	 Bucket_ctor
  002f5	48 89 85 28 02
	00 00		 mov	 QWORD PTR emptyBucket$[rbp], rax

; 43   : 
; 44   : 	if (!Collection_Read(myBucket, &output, 3))

  002fc	41 b8 03 00 00
	00		 mov	 r8d, 3
  00302	48 8d 55 04	 lea	 rdx, QWORD PTR output$[rbp]
  00306	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR myBucket$[rbp]
  0030d	e8 00 00 00 00	 call	 Collection_Read
  00312	85 c0		 test	 eax, eax
  00314	75 0a		 jne	 SHORT $LN3@main

; 45   : 		return 1;

  00316	b8 01 00 00 00	 mov	 eax, 1
  0031b	e9 d3 00 00 00	 jmp	 $LN1@main
$LN3@main:

; 46   : 
; 47   : 	PREENT_ARGS("collection count of emptyBucket: %\n", fmt_i(Collection_Count(emptyBucket)));

  00320	c7 85 b8 02 00
	00 1d 00 00 00	 mov	 DWORD PTR $S13$[rbp], 29
  0032a	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR emptyBucket$[rbp]
  00331	e8 00 00 00 00	 call	 Collection_Count
  00336	89 85 f4 02 00
	00		 mov	 DWORD PTR $S14$[rbp], eax
  0033c	48 8d 85 f4 02
	00 00		 lea	 rax, QWORD PTR $S14$[rbp]
  00343	48 89 85 c0 02
	00 00		 mov	 QWORD PTR $S13$[rbp+8], rax
  0034a	c7 85 18 03 00
	00 fe ff ff ff	 mov	 DWORD PTR $S15$[rbp], -2
  00354	48 c7 85 20 03
	00 00 00 00 00
	00		 mov	 QWORD PTR $S15$[rbp+8], 0
  0035f	48 8d 85 c8 02
	00 00		 lea	 rax, QWORD PTR $S13$[rbp+16]
  00366	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $S15$[rbp]
  0036d	48 8b f8	 mov	 rdi, rax
  00370	48 8b f1	 mov	 rsi, rcx
  00373	b9 10 00 00 00	 mov	 ecx, 16
  00378	f3 a4		 rep movsb
  0037a	48 8d 95 b8 02
	00 00		 lea	 rdx, QWORD PTR $S13$[rbp]
  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
  00388	e8 00 00 00 00	 call	 Preent

; 48   : 	PREENT_ARGS("value at index 3 of myBucket: %\n", fmt_i(output));

  0038d	c7 85 48 03 00
	00 1d 00 00 00	 mov	 DWORD PTR $S16$[rbp], 29
  00397	8b 45 04	 mov	 eax, DWORD PTR output$[rbp]
  0039a	89 85 84 03 00
	00		 mov	 DWORD PTR $S17$[rbp], eax
  003a0	48 8d 85 84 03
	00 00		 lea	 rax, QWORD PTR $S17$[rbp]
  003a7	48 89 85 50 03
	00 00		 mov	 QWORD PTR $S16$[rbp+8], rax
  003ae	c7 85 a8 03 00
	00 fe ff ff ff	 mov	 DWORD PTR $S18$[rbp], -2
  003b8	48 c7 85 b0 03
	00 00 00 00 00
	00		 mov	 QWORD PTR $S18$[rbp+8], 0
  003c3	48 8d 85 58 03
	00 00		 lea	 rax, QWORD PTR $S16$[rbp+16]
  003ca	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $S18$[rbp]
  003d1	48 8b f8	 mov	 rdi, rax
  003d4	48 8b f1	 mov	 rsi, rcx
  003d7	b9 10 00 00 00	 mov	 ecx, 16
  003dc	f3 a4		 rep movsb
  003de	48 8d 95 48 03
	00 00		 lea	 rdx, QWORD PTR $S16$[rbp]
  003e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
  003ec	e8 00 00 00 00	 call	 Preent

; 49   : 
; 50   : 	return 0;

  003f1	33 c0		 xor	 eax, eax
$LN1@main:

; 51   : }

  003f3	48 8b f8	 mov	 rdi, rax
  003f6	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  003fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00401	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00406	48 8b c7	 mov	 rax, rdi
  00409	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00410	48 33 cd	 xor	 rcx, rbp
  00413	e8 00 00 00 00	 call	 __security_check_cookie
  00418	48 8d a5 50 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1360]
  0041f	5f		 pop	 rdi
  00420	5e		 pop	 rsi
  00421	5d		 pop	 rbp
  00422	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
