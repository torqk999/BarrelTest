; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__E8DC32E4_tLink@h DB 01H
__7F0EEB6C_tLink@c DB 01H
msvcjmc	ENDS
PUBLIC	LinkElements
PUBLIC	UnLink
PUBLIC	RemoveAndNext
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$LinkElements DD imagerel $LN16
	DD	imagerel $LN16+363
	DD	imagerel $unwind$LinkElements
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$UnLink DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$UnLink
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RemoveAndNext DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$RemoveAndNext
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RemoveAndNext DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$UnLink DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	04eH
	DW	07fH
	DW	093H
	DW	0a7H
	DW	0efH
	DW	0103H
	DW	0117H
	DW	015eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LinkElements DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tLink.c
;	COMDAT RemoveAndNext
_TEXT	SEGMENT
next$ = 8
target$ = 256
RemoveAndNext PROC					; COMDAT

; 37   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F0EEB6C_tLink@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 38   : 
; 39   : 	Link* next = target->_next;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 45 08	 mov	 QWORD PTR next$[rbp], rax

; 40   : 	UnLink(target);

  0002d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00034	e8 00 00 00 00	 call	 UnLink

; 41   : 	return next;

  00039	48 8b 45 08	 mov	 rax, QWORD PTR next$[rbp]

; 42   : 
; 43   : }

  0003d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
RemoveAndNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tLink.c
;	COMDAT UnLink
_TEXT	SEGMENT
target$ = 224
UnLink	PROC						; COMDAT

; 32   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F0EEB6C_tLink@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 33   : 	LinkElements(NULL, target->_prev, target->_next);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  00026	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  00030	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00034	33 c9		 xor	 ecx, ecx
  00036	e8 00 00 00 00	 call	 LinkElements

; 34   : }

  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
UnLink	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tLink.c
;	COMDAT LinkElements
_TEXT	SEGMENT
tv93 = 192
tv82 = 192
target$ = 240
prev$ = 248
next$ = 256
LinkElements PROC					; COMDAT

; 4    : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7F0EEB6C_tLink@c
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 5    : 	if (target)

  00029	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR target$[rbp], 0
  00031	74 4f		 je	 SHORT $LN8@LinkElemen
$LN2@LinkElemen:

; 6    : 	{
; 7    : 		while (target->_lock) {}

  00033	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  0003a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0003d	85 c0		 test	 eax, eax
  0003f	74 02		 je	 SHORT $LN3@LinkElemen
  00041	eb f0		 jmp	 SHORT $LN2@LinkElemen
$LN3@LinkElemen:

; 8    : 		InterlockedIncrement(&(target->_lock));

  00043	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  0004a	48 83 c0 10	 add	 rax, 16
  0004e	f0 ff 00	 lock inc DWORD PTR [rax]

; 9    : 		target->_next = next;

  00051	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  00058	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR next$[rbp]
  0005f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 10   : 		target->_prev = prev;

  00062	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  00069	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR prev$[rbp]
  00070	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 11   : 		InterlockedDecrement(&(target->_lock));

  00074	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  0007b	48 83 c0 10	 add	 rax, 16
  0007f	f0 ff 08	 lock dec DWORD PTR [rax]
$LN8@LinkElemen:

; 12   : 	}
; 13   : 
; 14   : 	if (next)

  00082	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR next$[rbp], 0
  0008a	74 66		 je	 SHORT $LN9@LinkElemen
$LN4@LinkElemen:

; 15   : 	{
; 16   : 		while (next->_lock) {}

  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR next$[rbp]
  00093	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00096	85 c0		 test	 eax, eax
  00098	74 02		 je	 SHORT $LN5@LinkElemen
  0009a	eb f0		 jmp	 SHORT $LN4@LinkElemen
$LN5@LinkElemen:

; 17   : 		InterlockedIncrement(&(next->_lock));

  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR next$[rbp]
  000a3	48 83 c0 10	 add	 rax, 16
  000a7	f0 ff 00	 lock inc DWORD PTR [rax]

; 18   : 		next->_prev = target ? target : prev;

  000aa	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR target$[rbp], 0
  000b2	74 10		 je	 SHORT $LN12@LinkElemen
  000b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  000bb	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  000c2	eb 0e		 jmp	 SHORT $LN13@LinkElemen
$LN12@LinkElemen:
  000c4	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  000cb	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
$LN13@LinkElemen:
  000d2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR next$[rbp]
  000d9	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv82[rbp]
  000e0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 19   : 		InterlockedDecrement(&(next->_lock));

  000e4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR next$[rbp]
  000eb	48 83 c0 10	 add	 rax, 16
  000ef	f0 ff 08	 lock dec DWORD PTR [rax]
$LN9@LinkElemen:

; 20   : 	}
; 21   : 
; 22   : 	if (prev)

  000f2	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR prev$[rbp], 0
  000fa	74 65		 je	 SHORT $LN10@LinkElemen
$LN6@LinkElemen:

; 23   : 	{
; 24   : 		while (prev->_lock) {}

  000fc	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  00103	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00106	85 c0		 test	 eax, eax
  00108	74 02		 je	 SHORT $LN7@LinkElemen
  0010a	eb f0		 jmp	 SHORT $LN6@LinkElemen
$LN7@LinkElemen:

; 25   : 		InterlockedIncrement(&(prev->_lock));

  0010c	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  00113	48 83 c0 10	 add	 rax, 16
  00117	f0 ff 00	 lock inc DWORD PTR [rax]

; 26   : 		prev->_next = target ? target : next;

  0011a	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR target$[rbp], 0
  00122	74 10		 je	 SHORT $LN14@LinkElemen
  00124	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  0012b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00132	eb 0e		 jmp	 SHORT $LN15@LinkElemen
$LN14@LinkElemen:
  00134	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR next$[rbp]
  0013b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv93[rbp], rax
$LN15@LinkElemen:
  00142	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  00149	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  00150	48 89 08	 mov	 QWORD PTR [rax], rcx

; 27   : 		InterlockedDecrement(&(prev->_lock));

  00153	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  0015a	48 83 c0 10	 add	 rax, 16
  0015e	f0 ff 08	 lock dec DWORD PTR [rax]
$LN10@LinkElemen:

; 28   : 	}
; 29   : }

  00161	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00168	5f		 pop	 rdi
  00169	5d		 pop	 rbp
  0016a	c3		 ret	 0
LinkElements ENDP
_TEXT	ENDS
END
