; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__FC472216_tVector@h DB 01H
__6B95FB9E_tVector@c DB 01H
msvcjmc	ENDS
PUBLIC	Vector_Transcribe
PUBLIC	Vector_Transcribe0
PUBLIC	__JustMyCode_Default
EXTRN	CreateRequest:PROC
EXTRN	Chunk_ctor:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$Vector_Transcribe DD imagerel $LN6
	DD	imagerel $LN6+492
	DD	imagerel $unwind$Vector_Transcribe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Vector_Transcribe0 DD imagerel $LN15
	DD	imagerel $LN15+1244
	DD	imagerel $unwind$Vector_Transcribe0
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	04c2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Vector_Transcribe0 DD 025063e19H
	DD	010f2314H
	DD	070080142H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0a08H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Vector_Transcribe0$rtcName$0 DB 068H
	DB	06fH
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
Vector_Transcribe0$rtcName$1 DB 061H
	DB	067H
	DB	067H
	DB	072H
	DB	00H
	ORG $+3
Vector_Transcribe0$rtcName$2 DB 024H
	DB	053H
	DB	031H
	DB	00H
Vector_Transcribe0$rtcName$3 DB 024H
	DB	053H
	DB	032H
	DB	00H
Vector_Transcribe0$rtcName$4 DB 024H
	DB	053H
	DB	033H
	DB	00H
Vector_Transcribe0$rtcName$5 DB 024H
	DB	053H
	DB	034H
	DB	00H
Vector_Transcribe0$rtcName$6 DB 024H
	DB	053H
	DB	035H
	DB	00H
Vector_Transcribe0$rtcName$7 DB 024H
	DB	053H
	DB	036H
	DB	00H
Vector_Transcribe0$rtcName$8 DB 024H
	DB	053H
	DB	037H
	DB	00H
Vector_Transcribe0$rtcName$9 DB 024H
	DB	053H
	DB	038H
	DB	00H
Vector_Transcribe0$rtcName$10 DB 024H
	DB	053H
	DB	039H
	DB	00H
Vector_Transcribe0$rtcName$11 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
Vector_Transcribe0$rtcName$12 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
Vector_Transcribe0$rtcName$13 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+7
Vector_Transcribe0$rtcVarDesc DD 0500H
	DD	0110H
	DQ	FLAT:Vector_Transcribe0$rtcName$13
	DD	04c8H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$12
	DD	0498H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$11
	DD	0468H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$10
	DD	0438H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$9
	DD	03e0H
	DD	040H
	DQ	FLAT:Vector_Transcribe0$rtcName$8
	DD	02b0H
	DD	0110H
	DQ	FLAT:Vector_Transcribe0$rtcName$7
	DD	0278H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$6
	DD	0248H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$5
	DD	0218H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$4
	DD	01e8H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$3
	DD	0190H
	DD	040H
	DQ	FLAT:Vector_Transcribe0$rtcName$2
	DD	0118H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$1
	DD	0e8H
	DD	010H
	DQ	FLAT:Vector_Transcribe0$rtcName$0
	ORG $+672
Vector_Transcribe0$rtcFrameData DD 0eH
	DD	00H
	DQ	FLAT:Vector_Transcribe0$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Vector_Transcribe DD 025062d01H
	DD	010f2314H
	DD	070080048H
	DD	050066007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Vector_Transcribe$rtcName$0 DB 074H
	DB	072H
	DB	067H
	DB	00H
Vector_Transcribe$rtcName$1 DB 073H
	DB	072H
	DB	063H
	DB	00H
	ORG $+8
Vector_Transcribe$rtcVarDesc DD 058H
	DD	010H
	DQ	FLAT:Vector_Transcribe$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:Vector_Transcribe$rtcName$0
	ORG $+96
Vector_Transcribe$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:Vector_Transcribe$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tVector.c
;	COMDAT Vector_Transcribe0
_TEXT	SEGMENT
dir$ = 4
var$ = 36
hostIx$ = 68
aggrIx$ = 100
hostCol$ = 136
aggrCol$ = 168
host$ = 200
aggr$ = 248
size$ = 296
count$ = 328
$S1$ = 368
$S2$ = 456
$S3$ = 504
$S4$ = 552
$S5$ = 600
$S6$ = 656
$S7$17 = 960
$S8$18 = 1048
$S9$19 = 1096
$S10$20 = 1144
$S11$21 = 1192
$S12$22 = 1248
$T23 = 2312
$T24 = 2360
$T25 = 2416
$T26 = 2464
$T27 = 2512
tv165 = 2532
tv73 = 2532
tv71 = 2532
__$ArrayPad$ = 2536
request$ = 2576
Vector_Transcribe0 PROC					; COMDAT

; 54   : bool Vector_Transcribe0(REQUEST request) {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 10 0a
	00 00		 sub	 rsp, 2576		; 00000a10H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 bc 01 00 00	 mov	 ecx, 444		; 000001bcH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 38
	0a 00 00	 mov	 rcx, QWORD PTR [rsp+2616]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c5	 xor	 rax, rbp
  00037	48 89 85 e8 09
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6B95FB9E_tVector@c
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 55   : 
; 56   : 	ParamType dir = (ParamType)request._params[tDIRECTION];

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 05	 imul	 rax, rax, 5
  00053	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0005a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005e	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00061	89 45 04	 mov	 DWORD PTR dir$[rbp], eax

; 57   : 	ParamType var = (ParamType)request._params[tVARIANT];

  00064	b8 08 00 00 00	 mov	 eax, 8
  00069	48 6b c0 00	 imul	 rax, rax, 0
  0006d	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00074	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00078	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0007b	89 45 24	 mov	 DWORD PTR var$[rbp], eax

; 58   : 
; 59   : 	ParamType hostIx = dir == tWRITE ? tTRG : tSRC;

  0007e	83 7d 04 00	 cmp	 DWORD PTR dir$[rbp], 0
  00082	75 0c		 jne	 SHORT $LN11@Vector_Tra
  00084	c7 85 e4 09 00
	00 01 00 00 00	 mov	 DWORD PTR tv71[rbp], 1
  0008e	eb 0a		 jmp	 SHORT $LN12@Vector_Tra
$LN11@Vector_Tra:
  00090	c7 85 e4 09 00
	00 02 00 00 00	 mov	 DWORD PTR tv71[rbp], 2
$LN12@Vector_Tra:
  0009a	8b 85 e4 09 00
	00		 mov	 eax, DWORD PTR tv71[rbp]
  000a0	89 45 44	 mov	 DWORD PTR hostIx$[rbp], eax

; 60   : 	ParamType aggrIx = dir == tWRITE ? tSRC : tTRG;

  000a3	83 7d 04 00	 cmp	 DWORD PTR dir$[rbp], 0
  000a7	75 0c		 jne	 SHORT $LN13@Vector_Tra
  000a9	c7 85 e4 09 00
	00 02 00 00 00	 mov	 DWORD PTR tv73[rbp], 2
  000b3	eb 0a		 jmp	 SHORT $LN14@Vector_Tra
$LN13@Vector_Tra:
  000b5	c7 85 e4 09 00
	00 01 00 00 00	 mov	 DWORD PTR tv73[rbp], 1
$LN14@Vector_Tra:
  000bf	8b 85 e4 09 00
	00		 mov	 eax, DWORD PTR tv73[rbp]
  000c5	89 45 64	 mov	 DWORD PTR aggrIx$[rbp], eax

; 61   : 
; 62   : 	COLLECTION hostCol = request._params[hostIx];

  000c8	48 63 45 44	 movsxd	 rax, DWORD PTR hostIx$[rbp]
  000cc	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000d3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d7	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000db	48 89 85 88 00
	00 00		 mov	 QWORD PTR hostCol$[rbp], rax

; 63   : 	COLLECTION aggrCol = NULL;

  000e2	48 c7 85 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR aggrCol$[rbp], 0

; 64   : 
; 65   : 	Chunk host;
; 66   : 	Chunk aggr; // Aggregate from the requested collection source.
; 67   : 
; 68   : 	size_t size = hostCol->_extensions->_type->_size;

  000ed	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR hostCol$[rbp]
  000f4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fa	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000fe	48 89 85 28 01
	00 00		 mov	 QWORD PTR size$[rbp], rax

; 69   : 	size_t count = (size_t)request._params[tCOUNT];

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 07	 imul	 rax, rax, 7
  0010e	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00115	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00119	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0011d	48 89 85 48 01
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 70   : 
; 71   : 	request._params[tSIZE] = size;

  00124	b8 08 00 00 00	 mov	 eax, 8
  00129	48 6b c0 06	 imul	 rax, rax, 6
  0012d	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00134	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00138	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR size$[rbp]
  0013f	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 72   : 
; 73   : 	if (!hostCol->_extensions->_methods(Request(MANAGE, P_(tVARIANT, tCHUNK), P_(tSRC, hostCol), P_(tTRG, &host))))

  00143	48 8d 85 90 02
	00 00		 lea	 rax, QWORD PTR $S6$[rbp]
  0014a	48 8b f8	 mov	 rdi, rax
  0014d	33 c0		 xor	 eax, eax
  0014f	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  00154	f3 aa		 rep stosb
  00156	c7 85 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR $S2$[rbp], 0
  00160	48 c7 85 d0 01
	00 00 05 00 00
	00		 mov	 QWORD PTR $S2$[rbp+8], 5
  0016b	48 8d 85 70 01
	00 00		 lea	 rax, QWORD PTR $S1$[rbp]
  00172	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $S2$[rbp]
  00179	48 8b f8	 mov	 rdi, rax
  0017c	48 8b f1	 mov	 rsi, rcx
  0017f	b9 10 00 00 00	 mov	 ecx, 16
  00184	f3 a4		 rep movsb
  00186	c7 85 f8 01 00
	00 02 00 00 00	 mov	 DWORD PTR $S3$[rbp], 2
  00190	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR hostCol$[rbp]
  00197	48 89 85 00 02
	00 00		 mov	 QWORD PTR $S3$[rbp+8], rax
  0019e	48 8d 85 80 01
	00 00		 lea	 rax, QWORD PTR $S1$[rbp+16]
  001a5	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $S3$[rbp]
  001ac	48 8b f8	 mov	 rdi, rax
  001af	48 8b f1	 mov	 rsi, rcx
  001b2	b9 10 00 00 00	 mov	 ecx, 16
  001b7	f3 a4		 rep movsb
  001b9	c7 85 28 02 00
	00 01 00 00 00	 mov	 DWORD PTR $S4$[rbp], 1
  001c3	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR host$[rbp]
  001ca	48 89 85 30 02
	00 00		 mov	 QWORD PTR $S4$[rbp+8], rax
  001d1	48 8d 85 90 01
	00 00		 lea	 rax, QWORD PTR $S1$[rbp+32]
  001d8	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $S4$[rbp]
  001df	48 8b f8	 mov	 rdi, rax
  001e2	48 8b f1	 mov	 rsi, rcx
  001e5	b9 10 00 00 00	 mov	 ecx, 16
  001ea	f3 a4		 rep movsb
  001ec	c7 85 58 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S5$[rbp], -2
  001f6	48 c7 85 60 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S5$[rbp+8], 0
  00201	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR $S1$[rbp+48]
  00208	48 8d 8d 58 02
	00 00		 lea	 rcx, QWORD PTR $S5$[rbp]
  0020f	48 8b f8	 mov	 rdi, rax
  00212	48 8b f1	 mov	 rsi, rcx
  00215	b9 10 00 00 00	 mov	 ecx, 16
  0021a	f3 a4		 rep movsb
  0021c	4c 8d 8d 90 02
	00 00		 lea	 r9, QWORD PTR $S6$[rbp]
  00223	4c 8d 85 70 01
	00 00		 lea	 r8, QWORD PTR $S1$[rbp]
  0022a	ba 08 00 00 00	 mov	 edx, 8
  0022f	48 8d 8d 08 09
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  00236	e8 00 00 00 00	 call	 CreateRequest
  0023b	48 8d 8d 70 09
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00242	48 8b f9	 mov	 rdi, rcx
  00245	48 8b f0	 mov	 rsi, rax
  00248	b9 10 00 00 00	 mov	 ecx, 16
  0024d	f3 a4		 rep movsb
  0024f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR hostCol$[rbp]
  00256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00259	48 8d 8d 70 09
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00260	ff 50 08	 call	 QWORD PTR [rax+8]
  00263	85 c0		 test	 eax, eax
  00265	75 07		 jne	 SHORT $LN4@Vector_Tra

; 74   : 		return false;

  00267	33 c0		 xor	 eax, eax
  00269	e9 3e 02 00 00	 jmp	 $LN1@Vector_Tra
$LN4@Vector_Tra:

; 75   : 
; 76   : 
; 77   : 	switch (var) {

  0026e	8b 45 24	 mov	 eax, DWORD PTR var$[rbp]
  00271	89 85 e4 09 00
	00		 mov	 DWORD PTR tv165[rbp], eax
  00277	83 bd e4 09 00
	00 02		 cmp	 DWORD PTR tv165[rbp], 2
  0027e	74 0e		 je	 SHORT $LN5@Vector_Tra
  00280	83 bd e4 09 00
	00 03		 cmp	 DWORD PTR tv165[rbp], 3
  00287	74 4c		 je	 SHORT $LN6@Vector_Tra
  00289	e9 bd 01 00 00	 jmp	 $LN9@Vector_Tra
$LN5@Vector_Tra:

; 78   : 	case tRAW:
; 79   : 		Chunk_ctor(&aggr, request._params[aggrIx], (size_t)request._params[tSIZE] * count);

  0028e	b8 08 00 00 00	 mov	 eax, 8
  00293	48 6b c0 06	 imul	 rax, rax, 6
  00297	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0029e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002a2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002a6	48 0f af 85 48
	01 00 00	 imul	 rax, QWORD PTR count$[rbp]
  002ae	48 63 4d 64	 movsxd	 rcx, DWORD PTR aggrIx$[rbp]
  002b2	48 8b 95 10 0a
	00 00		 mov	 rdx, QWORD PTR request$[rbp]
  002b9	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  002bd	4c 8b c0	 mov	 r8, rax
  002c0	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  002c4	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR aggr$[rbp]
  002cb	e8 00 00 00 00	 call	 Chunk_ctor

; 80   : 		break;

  002d0	e9 7a 01 00 00	 jmp	 $LN2@Vector_Tra
$LN6@Vector_Tra:

; 81   : 
; 82   : 	case tCOLLECTION:;
; 83   : 		aggrCol = request._params[aggrIx];

  002d5	48 63 45 64	 movsxd	 rax, DWORD PTR aggrIx$[rbp]
  002d9	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  002e0	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002e4	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  002e8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR aggrCol$[rbp], rax

; 84   : 		if (aggrCol->_extensions->_type->_size != request._params[tSIZE])

  002ef	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR aggrCol$[rbp]
  002f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002fc	b9 08 00 00 00	 mov	 ecx, 8
  00301	48 6b c9 06	 imul	 rcx, rcx, 6
  00305	48 8b 95 10 0a
	00 00		 mov	 rdx, QWORD PTR request$[rbp]
  0030c	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00310	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00314	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00318	74 07		 je	 SHORT $LN7@Vector_Tra

; 85   : 			return false;

  0031a	33 c0		 xor	 eax, eax
  0031c	e9 8b 01 00 00	 jmp	 $LN1@Vector_Tra
$LN7@Vector_Tra:

; 86   : 		if (!aggrCol->_extensions->_methods(Request(MANAGE, P_(tVARIANT, tCHUNK), P_(tSRC, aggrCol), P_(tTRG, &aggr))))

  00321	48 8d 85 e0 04
	00 00		 lea	 rax, QWORD PTR $S12$22[rbp]
  00328	48 8b f8	 mov	 rdi, rax
  0032b	33 c0		 xor	 eax, eax
  0032d	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  00332	f3 aa		 rep stosb
  00334	c7 85 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR $S8$18[rbp], 0
  0033e	48 c7 85 20 04
	00 00 05 00 00
	00		 mov	 QWORD PTR $S8$18[rbp+8], 5
  00349	48 8d 85 c0 03
	00 00		 lea	 rax, QWORD PTR $S7$17[rbp]
  00350	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR $S8$18[rbp]
  00357	48 8b f8	 mov	 rdi, rax
  0035a	48 8b f1	 mov	 rsi, rcx
  0035d	b9 10 00 00 00	 mov	 ecx, 16
  00362	f3 a4		 rep movsb
  00364	c7 85 48 04 00
	00 02 00 00 00	 mov	 DWORD PTR $S9$19[rbp], 2
  0036e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR aggrCol$[rbp]
  00375	48 89 85 50 04
	00 00		 mov	 QWORD PTR $S9$19[rbp+8], rax
  0037c	48 8d 85 d0 03
	00 00		 lea	 rax, QWORD PTR $S7$17[rbp+16]
  00383	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR $S9$19[rbp]
  0038a	48 8b f8	 mov	 rdi, rax
  0038d	48 8b f1	 mov	 rsi, rcx
  00390	b9 10 00 00 00	 mov	 ecx, 16
  00395	f3 a4		 rep movsb
  00397	c7 85 78 04 00
	00 01 00 00 00	 mov	 DWORD PTR $S10$20[rbp], 1
  003a1	48 8d 85 f8 00
	00 00		 lea	 rax, QWORD PTR aggr$[rbp]
  003a8	48 89 85 80 04
	00 00		 mov	 QWORD PTR $S10$20[rbp+8], rax
  003af	48 8d 85 e0 03
	00 00		 lea	 rax, QWORD PTR $S7$17[rbp+32]
  003b6	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $S10$20[rbp]
  003bd	48 8b f8	 mov	 rdi, rax
  003c0	48 8b f1	 mov	 rsi, rcx
  003c3	b9 10 00 00 00	 mov	 ecx, 16
  003c8	f3 a4		 rep movsb
  003ca	c7 85 a8 04 00
	00 fe ff ff ff	 mov	 DWORD PTR $S11$21[rbp], -2
  003d4	48 c7 85 b0 04
	00 00 00 00 00
	00		 mov	 QWORD PTR $S11$21[rbp+8], 0
  003df	48 8d 85 f0 03
	00 00		 lea	 rax, QWORD PTR $S7$17[rbp+48]
  003e6	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR $S11$21[rbp]
  003ed	48 8b f8	 mov	 rdi, rax
  003f0	48 8b f1	 mov	 rsi, rcx
  003f3	b9 10 00 00 00	 mov	 ecx, 16
  003f8	f3 a4		 rep movsb
  003fa	4c 8d 8d e0 04
	00 00		 lea	 r9, QWORD PTR $S12$22[rbp]
  00401	4c 8d 85 c0 03
	00 00		 lea	 r8, QWORD PTR $S7$17[rbp]
  00408	ba 08 00 00 00	 mov	 edx, 8
  0040d	48 8d 8d 38 09
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00414	e8 00 00 00 00	 call	 CreateRequest
  00419	48 8d 8d a0 09
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00420	48 8b f9	 mov	 rdi, rcx
  00423	48 8b f0	 mov	 rsi, rax
  00426	b9 10 00 00 00	 mov	 ecx, 16
  0042b	f3 a4		 rep movsb
  0042d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR aggrCol$[rbp]
  00434	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00437	48 8d 8d a0 09
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  0043e	ff 50 08	 call	 QWORD PTR [rax+8]
  00441	85 c0		 test	 eax, eax
  00443	75 04		 jne	 SHORT $LN8@Vector_Tra

; 87   : 			return false;

  00445	33 c0		 xor	 eax, eax
  00447	eb 63		 jmp	 SHORT $LN1@Vector_Tra
$LN8@Vector_Tra:

; 88   : 		break;

  00449	eb 04		 jmp	 SHORT $LN2@Vector_Tra
$LN9@Vector_Tra:

; 89   : 	default:
; 90   : 		return false;

  0044b	33 c0		 xor	 eax, eax
  0044d	eb 5d		 jmp	 SHORT $LN1@Vector_Tra
$LN2@Vector_Tra:

; 91   : 	}
; 92   : 
; 93   : 	request._params[hostIx] = &host;

  0044f	48 63 45 44	 movsxd	 rax, DWORD PTR hostIx$[rbp]
  00453	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0045a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0045e	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR host$[rbp]
  00465	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 94   : 	request._params[aggrIx] = &aggr;

  00469	48 63 45 64	 movsxd	 rax, DWORD PTR aggrIx$[rbp]
  0046d	48 8b 8d 10 0a
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00474	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00478	48 8d 95 f8 00
	00 00		 lea	 rdx, QWORD PTR aggr$[rbp]
  0047f	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 95   : 	Vector_Transcribe0(request);

  00483	48 8d 85 d0 09
	00 00		 lea	 rax, QWORD PTR $T27[rbp]
  0048a	48 8b f8	 mov	 rdi, rax
  0048d	48 8b b5 10 0a
	00 00		 mov	 rsi, QWORD PTR request$[rbp]
  00494	b9 10 00 00 00	 mov	 ecx, 16
  00499	f3 a4		 rep movsb
  0049b	48 8d 8d d0 09
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  004a2	e8 00 00 00 00	 call	 Vector_Transcribe0

; 96   : 
; 97   : 
; 98   : 	return true;

  004a7	b8 01 00 00 00	 mov	 eax, 1
$LN1@Vector_Tra:

; 99   : }

  004ac	48 8b f8	 mov	 rdi, rax
  004af	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Vector_Transcribe0$rtcFrameData
  004ba	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004bf	48 8b c7	 mov	 rax, rdi
  004c2	48 8b 8d e8 09
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004c9	48 33 cd	 xor	 rcx, rbp
  004cc	e8 00 00 00 00	 call	 __security_check_cookie
  004d1	48 8d a5 f0 09
	00 00		 lea	 rsp, QWORD PTR [rbp+2544]
  004d8	5f		 pop	 rdi
  004d9	5e		 pop	 rsi
  004da	5d		 pop	 rbp
  004db	c3		 ret	 0
Vector_Transcribe0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tVector.c
;	COMDAT Vector_Transcribe
_TEXT	SEGMENT
trg$ = 8
src$ = 56
unitSize$ = 104
count$ = 136
trgIx$ = 168
srcIx$ = 200
span$ = 232
trgPtr$ = 264
srcPtr$ = 296
i$5 = 328
tv128 = 536
request$ = 576
Vector_Transcribe PROC					; COMDAT

; 5    : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 40 02
	00 00		 sub	 rsp, 576		; 00000240H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6B95FB9E_tVector@c
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    : 	Chunk trg = *((Chunk*)request._params[tTRG]);

  00039	b8 08 00 00 00	 mov	 eax, 8
  0003e	48 6b c0 01	 imul	 rax, rax, 1
  00042	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00049	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004d	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00051	48 8d 4d 08	 lea	 rcx, QWORD PTR trg$[rbp]
  00055	48 8b f9	 mov	 rdi, rcx
  00058	48 8b f0	 mov	 rsi, rax
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb

; 7    : 	Chunk src = *((Chunk*)request._params[tSRC]);

  00062	b8 08 00 00 00	 mov	 eax, 8
  00067	48 6b c0 02	 imul	 rax, rax, 2
  0006b	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0007a	48 8d 4d 38	 lea	 rcx, QWORD PTR src$[rbp]
  0007e	48 8b f9	 mov	 rdi, rcx
  00081	48 8b f0	 mov	 rsi, rax
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb

; 8    : 
; 9    : 	size_t unitSize = request._params[tSIZE];

  0008b	b8 08 00 00 00	 mov	 eax, 8
  00090	48 6b c0 06	 imul	 rax, rax, 6
  00094	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0009b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0009f	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000a3	48 89 45 68	 mov	 QWORD PTR unitSize$[rbp], rax

; 10   : 	size_t count = request._params[tCOUNT];

  000a7	b8 08 00 00 00	 mov	 eax, 8
  000ac	48 6b c0 07	 imul	 rax, rax, 7
  000b0	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000b7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bb	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000bf	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 11   : 	size_t trgIx = request._params[Ix_TRG];

  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 03	 imul	 rax, rax, 3
  000cf	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000d6	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000da	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000de	48 89 85 a8 00
	00 00		 mov	 QWORD PTR trgIx$[rbp], rax

; 12   : 	size_t srcIx = request._params[Ix_SRC];

  000e5	b8 08 00 00 00	 mov	 eax, 8
  000ea	48 6b c0 04	 imul	 rax, rax, 4
  000ee	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000f5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f9	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000fd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR srcIx$[rbp], rax

; 13   : 
; 14   : 	size_t span = unitSize * count;

  00104	48 8b 45 68	 mov	 rax, QWORD PTR unitSize$[rbp]
  00108	48 0f af 85 88
	00 00 00	 imul	 rax, QWORD PTR count$[rbp]
  00110	48 89 85 e8 00
	00 00		 mov	 QWORD PTR span$[rbp], rax

; 15   : 	size_t trgPtr = (unitSize * trgIx);

  00117	48 8b 45 68	 mov	 rax, QWORD PTR unitSize$[rbp]
  0011b	48 0f af 85 a8
	00 00 00	 imul	 rax, QWORD PTR trgIx$[rbp]
  00123	48 89 85 08 01
	00 00		 mov	 QWORD PTR trgPtr$[rbp], rax

; 16   : 	size_t srcPtr = src._head + (unitSize * srcIx);

  0012a	48 8b 45 68	 mov	 rax, QWORD PTR unitSize$[rbp]
  0012e	48 0f af 85 c8
	00 00 00	 imul	 rax, QWORD PTR srcIx$[rbp]
  00136	48 8b 4d 38	 mov	 rcx, QWORD PTR src$[rbp]
  0013a	48 03 c8	 add	 rcx, rax
  0013d	48 8b c1	 mov	 rax, rcx
  00140	48 89 85 28 01
	00 00		 mov	 QWORD PTR srcPtr$[rbp], rax

; 17   : 	
; 18   : 	for (size_t i = 0; i < span; i++)

  00147	48 c7 85 48 01
	00 00 00 00 00
	00		 mov	 QWORD PTR i$5[rbp], 0
  00152	eb 11		 jmp	 SHORT $LN4@Vector_Tra
$LN2@Vector_Tra:
  00154	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR i$5[rbp]
  0015b	48 ff c0	 inc	 rax
  0015e	48 89 85 48 01
	00 00		 mov	 QWORD PTR i$5[rbp], rax
$LN4@Vector_Tra:
  00165	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR span$[rbp]
  0016c	48 39 85 48 01
	00 00		 cmp	 QWORD PTR i$5[rbp], rax
  00173	73 5c		 jae	 SHORT $LN3@Vector_Tra

; 19   : 		*((char*)(((trgPtr + i) % trg._size) + trg._head)) = *((char*)(((srcPtr + i) % src._size) + src._head));

  00175	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR i$5[rbp]
  0017c	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR srcPtr$[rbp]
  00183	48 03 c8	 add	 rcx, rax
  00186	48 8b c1	 mov	 rax, rcx
  00189	33 d2		 xor	 edx, edx
  0018b	48 f7 75 40	 div	 QWORD PTR src$[rbp+8]
  0018f	48 8b c2	 mov	 rax, rdx
  00192	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv128[rbp], rax
  00199	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR i$5[rbp]
  001a0	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR trgPtr$[rbp]
  001a7	48 03 d1	 add	 rdx, rcx
  001aa	48 8b ca	 mov	 rcx, rdx
  001ad	33 d2		 xor	 edx, edx
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 f7 75 10	 div	 QWORD PTR trg$[rbp+8]
  001b6	48 8b c2	 mov	 rax, rdx
  001b9	48 8b 4d 08	 mov	 rcx, QWORD PTR trg$[rbp]
  001bd	48 8b 55 38	 mov	 rdx, QWORD PTR src$[rbp]
  001c1	48 8b bd 18 02
	00 00		 mov	 rdi, QWORD PTR tv128[rbp]
  001c8	0f b6 14 17	 movzx	 edx, BYTE PTR [rdi+rdx]
  001cc	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  001cf	eb 83		 jmp	 SHORT $LN2@Vector_Tra
$LN3@Vector_Tra:

; 20   : 
; 21   : 	//while (span)
; 22   : 	//{
; 23   : 	//	
; 24   : 	//
; 25   : 	//
; 26   : 	//	size_t trgRemain = (trg._head + trg._size) - trgPtr;
; 27   : 	//	trgPtr = trgRemain == 0 ? trg._head : trgPtr;
; 28   : 	//	trgRemain = trgRemain == 0 ? trg._size : trgRemain;
; 29   : 	//
; 30   : 	//	size_t srcRemain = (src._head + src._size) - srcPtr;
; 31   : 	//	srcPtr = srcRemain == 0 ? src._head : srcPtr;
; 32   : 	//	srcRemain = srcRemain == 0 ? src._size : srcRemain;
; 33   : 	//
; 34   : 	//	size_t delta = trgRemain < span ? srcRemain < trgRemain ? srcRemain : trgRemain : span;
; 35   : 	//	
; 36   : 	//	//if (delta >= sizeof(Barrel)) {
; 37   : 	//	//	
; 38   : 	//	//	uint barrelCount = delta / sizeof(Barrel);
; 39   : 	//	//	delta = barrelCount * sizeof(Barrel);
; 40   : 	//	//	
; 41   : 	//	//	barrelTranscribe(trgPtr, srcPtr, barrelCount);
; 42   : 	//	//}
; 43   : 	//	//else {
; 44   : 	//	rawTranscribe(trgPtr, srcPtr, delta);
; 45   : 	//	//}
; 46   : 	//
; 47   : 	//	trgPtr += delta;
; 48   : 	//	srcPtr += delta;
; 49   : 	//	span -= delta;
; 50   : 	//}
; 51   : 
; 52   : }

  001d1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Vector_Transcribe$rtcFrameData
  001dc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001e1	48 8d a5 20 02
	00 00		 lea	 rsp, QWORD PTR [rbp+544]
  001e8	5f		 pop	 rdi
  001e9	5e		 pop	 rsi
  001ea	5d		 pop	 rbp
  001eb	c3		 ret	 0
Vector_Transcribe ENDP
_TEXT	ENDS
END
