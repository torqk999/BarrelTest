; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	GlobalCollectionInfoCurrentCount
_DATA	SEGMENT
COMM	GlobalCollectionInfo:BYTE:0300H
_DATA	ENDS
_BSS	SEGMENT
GlobalCollectionInfoCurrentCount DD 01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__EB233596_tCollection@c DB 01H
msvcjmc	ENDS
PUBLIC	Collection_Transcribe
PUBLIC	Collection_ReadSpan
PUBLIC	Collection_Read
PUBLIC	Collection_WriteSpan
PUBLIC	Collection_Write
PUBLIC	Collection_Capacity
PUBLIC	Collection_Count
PUBLIC	Collection_ReadOnly
PUBLIC	Collection_InfoCompare
PUBLIC	Collection_Request
PUBLIC	Collection_Release
PUBLIC	CollectionExtensions_Create
PUBLIC	Collection_Create
PUBLIC	Collection_GetExtensions
PUBLIC	Collection_RawBucket
PUBLIC	Collection_RawMethods
PUBLIC	Collection_GetRawExtensions
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BH@LCKCAPHB@CollectionInfo?5found?$CB?6@	; `string'
PUBLIC	??_C@_0BM@KPOEFPPK@No?5type?5slots?5available?4?4?4?6@ ; `string'
PUBLIC	??_C@_0BN@DBMNBHNG@Created?5new?5CollectionInfo?$CB?6@ ; `string'
EXTRN	Preent:PROC
EXTRN	CreateRequest:PROC
EXTRN	rawTranscribe:PROC
EXTRN	TypeInfo_Compare:PROC
EXTRN	Chunk_Create:PROC
EXTRN	Collection_ReadOnlyExtensions:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Transcribe DD imagerel $LN9
	DD	imagerel $LN9+951
	DD	imagerel $unwind$Collection_Transcribe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_ReadSpan DD imagerel $LN3
	DD	imagerel $LN3+223
	DD	imagerel $unwind$Collection_ReadSpan
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Read DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$Collection_Read
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_WriteSpan DD imagerel $LN3
	DD	imagerel $LN3+223
	DD	imagerel $unwind$Collection_WriteSpan
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Write DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$Collection_Write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Capacity DD imagerel $LN4
	DD	imagerel $LN4+352
	DD	imagerel $unwind$Collection_Capacity
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Count DD imagerel $LN4
	DD	imagerel $LN4+403
	DD	imagerel $unwind$Collection_Count
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_ReadOnly DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$Collection_ReadOnly
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_InfoCompare DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$Collection_InfoCompare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Request DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$Collection_Request
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Release DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$Collection_Release
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CollectionExtensions_Create DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$CollectionExtensions_Create
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_Create DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$Collection_Create
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_GetExtensions DD imagerel $LN8
	DD	imagerel $LN8+370
	DD	imagerel $unwind$Collection_GetExtensions
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_RawBucket DD imagerel $LN3
	DD	imagerel $LN3+238
	DD	imagerel $unwind$Collection_RawBucket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_RawMethods DD imagerel $LN9
	DD	imagerel $LN9+273
	DD	imagerel $unwind$Collection_RawMethods
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Collection_GetRawExtensions DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$Collection_GetRawExtensions
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BN@DBMNBHNG@Created?5new?5CollectionInfo?$CB?6@
CONST	SEGMENT
??_C@_0BN@DBMNBHNG@Created?5new?5CollectionInfo?$CB?6@ DB 'Created new Co'
	DB	'llectionInfo!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KPOEFPPK@No?5type?5slots?5available?4?4?4?6@
CONST	SEGMENT
??_C@_0BM@KPOEFPPK@No?5type?5slots?5available?4?4?4?6@ DB 'No type slots '
	DB	'available...', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCKCAPHB@CollectionInfo?5found?$CB?6@
CONST	SEGMENT
??_C@_0BH@LCKCAPHB@CollectionInfo?5found?$CB?6@ DB 'CollectionInfo found!'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_GetRawExtensions DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_RawMethods DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_RawBucket DD 025063c01H
	DD	011e2323H
	DD	070170034H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_RawBucket$rtcName$0 DB 024H
	DB	053H
	DB	031H
	DB	00H
	ORG $+4
Collection_RawBucket$rtcName$1 DB 05fH
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+12
Collection_RawBucket$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:Collection_RawBucket$rtcName$1
	DD	028H
	DD	020H
	DQ	FLAT:Collection_RawBucket$rtcName$0
	ORG $+96
Collection_RawBucket$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:Collection_RawBucket$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0159H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_GetExtensions DD 025054719H
	DD	0118231dH
	DD	07011002bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_GetExtensions$rtcName$0 DB 06eH
	DB	065H
	DB	077H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+8
Collection_GetExtensions$rtcVarDesc DD 028H
	DD	018H
	DQ	FLAT:Collection_GetExtensions$rtcName$0
	ORG $+48
Collection_GetExtensions$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Collection_GetExtensions$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	041H
	DB	068H
	DB	0a1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Create DD 025064819H
	DD	0119231eH
	DD	070120022H
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_Create$rtcName$0 DB 024H
	DB	053H
	DB	032H
	DB	036H
	DB	00H
	ORG $+11
Collection_Create$rtcVarDesc DD 028H
	DD	010H
	DQ	FLAT:Collection_Create$rtcName$0
	ORG $+48
Collection_Create$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Collection_Create$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CollectionExtensions_Create DD 025053b01H
	DD	011d2322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CollectionExtensions_Create$rtcName$0 DB 024H
	DB	053H
	DB	032H
	DB	035H
	DB	00H
	ORG $+3
CollectionExtensions_Create$rtcName$1 DB 05fH
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+12
CollectionExtensions_Create$rtcVarDesc DD 058H
	DD	08H
	DQ	FLAT:CollectionExtensions_Create$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:CollectionExtensions_Create$rtcName$0
	ORG $+96
CollectionExtensions_Create$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:CollectionExtensions_Create$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Release DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	046H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Request DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_InfoCompare DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_ReadOnly DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0179H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Count DD 025063e19H
	DD	010f2314H
	DD	07008008eH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0468H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_Count$rtcName$0 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
Collection_Count$rtcName$1 DB 024H
	DB	053H
	DB	031H
	DB	039H
	DB	00H
	ORG $+3
Collection_Count$rtcName$2 DB 024H
	DB	053H
	DB	032H
	DB	030H
	DB	00H
	ORG $+3
Collection_Count$rtcName$3 DB 024H
	DB	053H
	DB	032H
	DB	031H
	DB	00H
	ORG $+3
Collection_Count$rtcName$4 DB 024H
	DB	053H
	DB	032H
	DB	032H
	DB	00H
	ORG $+3
Collection_Count$rtcName$5 DB 024H
	DB	053H
	DB	032H
	DB	033H
	DB	00H
	ORG $+3
Collection_Count$rtcName$6 DB 024H
	DB	053H
	DB	032H
	DB	034H
	DB	00H
	ORG $+11
Collection_Count$rtcVarDesc DD 0170H
	DD	0110H
	DQ	FLAT:Collection_Count$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:Collection_Count$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:Collection_Count$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:Collection_Count$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:Collection_Count$rtcName$2
	DD	050H
	DD	040H
	DQ	FLAT:Collection_Count$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:Collection_Count$rtcName$0
	ORG $+336
Collection_Count$rtcFrameData DD 07H
	DD	00H
	DQ	FLAT:Collection_Count$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0146H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Capacity DD 025063e19H
	DD	010f2314H
	DD	070080086H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0428H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_Capacity$rtcName$0 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
Collection_Capacity$rtcName$1 DB 024H
	DB	053H
	DB	031H
	DB	034H
	DB	00H
	ORG $+3
Collection_Capacity$rtcName$2 DB 024H
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+3
Collection_Capacity$rtcName$3 DB 024H
	DB	053H
	DB	031H
	DB	036H
	DB	00H
	ORG $+3
Collection_Capacity$rtcName$4 DB 024H
	DB	053H
	DB	031H
	DB	037H
	DB	00H
	ORG $+3
Collection_Capacity$rtcName$5 DB 024H
	DB	053H
	DB	031H
	DB	038H
	DB	00H
	ORG $+3
Collection_Capacity$rtcVarDesc DD 0130H
	DD	0110H
	DQ	FLAT:Collection_Capacity$rtcName$5
	DD	0f8H
	DD	010H
	DQ	FLAT:Collection_Capacity$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:Collection_Capacity$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:Collection_Capacity$rtcName$2
	DD	048H
	DD	030H
	DQ	FLAT:Collection_Capacity$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:Collection_Capacity$rtcName$0
	ORG $+288
Collection_Capacity$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:Collection_Capacity$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Write DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	046H
	DB	0c5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_WriteSpan DD 035064d19H
	DD	011e3323H
	DD	07017002eH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_WriteSpan$rtcName$0 DB 073H
	DB	072H
	DB	063H
	DB	042H
	DB	075H
	DB	063H
	DB	06bH
	DB	065H
	DB	074H
	DB	00H
	ORG $+6
Collection_WriteSpan$rtcVarDesc DD 038H
	DD	020H
	DQ	FLAT:Collection_WriteSpan$rtcName$0
	ORG $+48
Collection_WriteSpan$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Collection_WriteSpan$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Read DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	046H
	DB	0c5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_ReadSpan DD 035064d19H
	DD	011e3323H
	DD	07017002eH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_ReadSpan$rtcName$0 DB 074H
	DB	072H
	DB	067H
	DB	042H
	DB	075H
	DB	063H
	DB	06bH
	DB	065H
	DB	074H
	DB	00H
	ORG $+6
Collection_ReadSpan$rtcVarDesc DD 038H
	DD	020H
	DQ	FLAT:Collection_ReadSpan$rtcName$0
	ORG $+48
Collection_ReadSpan$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Collection_ReadSpan$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	039dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Collection_Transcribe DD 025064d19H
	DD	011e2323H
	DD	07017012cH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0958H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Collection_Transcribe$rtcName$0 DB 074H
	DB	072H
	DB	067H
	DB	050H
	DB	074H
	DB	072H
	DB	00H
	ORG $+1
Collection_Transcribe$rtcName$1 DB 074H
	DB	072H
	DB	067H
	DB	049H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
Collection_Transcribe$rtcName$2 DB 024H
	DB	053H
	DB	032H
	DB	00H
Collection_Transcribe$rtcName$3 DB 024H
	DB	053H
	DB	033H
	DB	00H
Collection_Transcribe$rtcName$4 DB 024H
	DB	053H
	DB	034H
	DB	00H
Collection_Transcribe$rtcName$5 DB 024H
	DB	053H
	DB	035H
	DB	00H
Collection_Transcribe$rtcName$6 DB 024H
	DB	053H
	DB	036H
	DB	00H
Collection_Transcribe$rtcName$7 DB 024H
	DB	053H
	DB	037H
	DB	00H
Collection_Transcribe$rtcName$8 DB 073H
	DB	072H
	DB	063H
	DB	050H
	DB	074H
	DB	072H
	DB	00H
	ORG $+1
Collection_Transcribe$rtcName$9 DB 073H
	DB	072H
	DB	063H
	DB	049H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
Collection_Transcribe$rtcName$10 DB 024H
	DB	053H
	DB	038H
	DB	00H
Collection_Transcribe$rtcName$11 DB 024H
	DB	053H
	DB	039H
	DB	00H
Collection_Transcribe$rtcName$12 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
Collection_Transcribe$rtcName$13 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
Collection_Transcribe$rtcName$14 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+3
Collection_Transcribe$rtcName$15 DB 024H
	DB	053H
	DB	031H
	DB	033H
	DB	00H
	ORG $+3
Collection_Transcribe$rtcVarDesc DD 0440H
	DD	0110H
	DQ	FLAT:Collection_Transcribe$rtcName$15
	DD	0408H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$14
	DD	03d8H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$13
	DD	03a8H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$12
	DD	0378H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$11
	DD	0320H
	DD	040H
	DQ	FLAT:Collection_Transcribe$rtcName$10
	DD	02e8H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$9
	DD	02c8H
	DD	08H
	DQ	FLAT:Collection_Transcribe$rtcName$8
	DD	01a0H
	DD	0110H
	DQ	FLAT:Collection_Transcribe$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$3
	DD	080H
	DD	040H
	DQ	FLAT:Collection_Transcribe$rtcName$2
	DD	048H
	DD	010H
	DQ	FLAT:Collection_Transcribe$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:Collection_Transcribe$rtcName$0
	ORG $+768
Collection_Transcribe$rtcFrameData DD 010H
	DD	00H
	DQ	FLAT:Collection_Transcribe$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_GetRawExtensions
_TEXT	SEGMENT
src$ = 224
Collection_GetRawExtensions PROC			; COMDAT

; 287  : CollectionExtensions* Collection_GetRawExtensions(CollectionExtensions* src) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 288  : 	return Collection_GetExtensions(src->_type, Collection_RawMethods, src->_memFlags | READ_ONLY);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00026	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00029	83 c8 01	 or	 eax, 1
  0002c	44 8b c0	 mov	 r8d, eax
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_RawMethods
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  0003d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00040	e8 00 00 00 00	 call	 Collection_GetExtensions

; 289  : }

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
Collection_GetRawExtensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_RawMethods
_TEXT	SEGMENT
rawBucket$ = 8
index$1 = 36
tv68 = 244
tv84 = 248
request$ = 288
Collection_RawMethods PROC				; COMDAT

; 274  : bool Collection_RawMethods(REQUEST request) {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  : 	Bucket* rawBucket = request._params[tSRC];

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 02	 imul	 rax, rax, 2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0002f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00033	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00037	48 89 45 08	 mov	 QWORD PTR rawBucket$[rbp], rax

; 276  : 	switch (request._type) {

  0003b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR request$[rbp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 85 f4 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  0004a	83 bd f4 00 00
	00 01		 cmp	 DWORD PTR tv68[rbp], 1
  00051	74 05		 je	 SHORT $LN4@Collection
  00053	e9 ad 00 00 00	 jmp	 $LN5@Collection
$LN4@Collection:

; 277  : 	case ITERATE:;
; 278  : 		uint index = request._params[Ix_TRG];

  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	48 6b c0 03	 imul	 rax, rax, 3
  00061	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00068	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006c	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0006f	89 45 24	 mov	 DWORD PTR index$1[rbp], eax

; 279  : 		request._params[tTRG] = index >= rawBucket->_collection._count ? NULL : rawBucket->_chunk._head + (index * rawBucket->_collection._extensions->_type->_size);

  00072	48 8b 45 08	 mov	 rax, QWORD PTR rawBucket$[rbp]
  00076	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00079	39 45 24	 cmp	 DWORD PTR index$1[rbp], eax
  0007c	72 0d		 jb	 SHORT $LN7@Collection
  0007e	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv84[rbp], 0
  00089	eb 21		 jmp	 SHORT $LN8@Collection
$LN7@Collection:
  0008b	8b 45 24	 mov	 eax, DWORD PTR index$1[rbp]
  0008e	48 8b 4d 08	 mov	 rcx, QWORD PTR rawBucket$[rbp]
  00092	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00095	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00098	48 0f af 41 08	 imul	 rax, QWORD PTR [rcx+8]
  0009d	48 8b 4d 08	 mov	 rcx, QWORD PTR rawBucket$[rbp]
  000a1	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  000a5	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv84[rbp], rax
$LN8@Collection:
  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 01	 imul	 rax, rax, 1
  000b5	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000bc	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c0	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR tv84[rbp]
  000c7	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 280  : 		((size_t)request._params[Ix_TRG])++;

  000cb	b8 08 00 00 00	 mov	 eax, 8
  000d0	48 6b c0 03	 imul	 rax, rax, 3
  000d4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  000db	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000df	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e3	48 ff c0	 inc	 rax
  000e6	b9 08 00 00 00	 mov	 ecx, 8
  000eb	48 6b c9 03	 imul	 rcx, rcx, 3
  000ef	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR request$[rbp]
  000f6	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000fa	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 281  : 		return true;

  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	eb 02		 jmp	 SHORT $LN1@Collection
$LN5@Collection:

; 282  : 	default:
; 283  : 		return false;

  00105	33 c0		 xor	 eax, eax
$LN1@Collection:

; 284  : 	}
; 285  : }

  00107	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010e	5f		 pop	 rdi
  0010f	5d		 pop	 rbp
  00110	c3		 ret	 0
Collection_RawMethods ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_RawBucket
_TEXT	SEGMENT
$T5 = 296
$T6 = 344
__$ReturnAddress$ = 416
col$ = 424
head$ = 432
count$ = 440
Collection_RawBucket PROC				; COMDAT

; 126  : Bucket Collection_RawBucket(COLLECTION col, void* head, unsigned int count) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00028	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00043	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 127  : 	return (Bucket) {

  00048	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR col$[rbp]
  0004f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00052	e8 00 00 00 00	 call	 Collection_ReadOnlyExtensions
  00057	48 98		 cdqe
  00059	44 8b 85 b8 01
	00 00		 mov	 r8d, DWORD PTR count$[rbp]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0006a	e8 00 00 00 00	 call	 Collection_Create
  0006f	48 8b bd a0 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnAddress$[rbp]
  00076	48 8b f0	 mov	 rsi, rax
  00079	b9 10 00 00 00	 mov	 ecx, 16
  0007e	f3 a4		 rep movsb
  00080	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR col$[rbp]
  00087	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008d	8b 8d b8 01 00
	00		 mov	 ecx, DWORD PTR count$[rbp]
  00093	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00097	48 0f af c1	 imul	 rax, rcx
  0009b	4c 8b c0	 mov	 r8, rax
  0009e	48 8b 95 b0 01
	00 00		 mov	 rdx, QWORD PTR head$[rbp]
  000a5	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ac	e8 00 00 00 00	 call	 Chunk_Create
  000b1	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnAddress$[rbp]
  000b8	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  000bc	48 8b f0	 mov	 rsi, rax
  000bf	b9 10 00 00 00	 mov	 ecx, 16
  000c4	f3 a4		 rep movsb
  000c6	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]

; 128  : 		Collection_Create(Collection_ReadOnlyExtensions(col->_extensions), count),
; 129  : 		Chunk_Create(head, col->_extensions->_type->_size * count)
; 130  : 	};
; 131  : }

  000cd	48 8b f8	 mov	 rdi, rax
  000d0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_RawBucket$rtcFrameData
  000db	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e0	48 8b c7	 mov	 rax, rdi
  000e3	48 8d a5 80 01
	00 00		 lea	 rsp, QWORD PTR [rbp+384]
  000ea	5f		 pop	 rdi
  000eb	5e		 pop	 rsi
  000ec	5d		 pop	 rbp
  000ed	c3		 ret	 0
Collection_RawBucket ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_GetExtensions
_TEXT	SEGMENT
newInfo$ = 8
i$4 = 52
ptr$ = 88
__$ArrayPad$ = 296
typeInfo$ = 336
methods$ = 344
memFlags$ = 352
Collection_GetExtensions PROC				; COMDAT

; 291  : CollectionExtensions* Collection_GetExtensions(TypeInfo* typeInfo, bool(*methods)(RequestType* request), int memFlags)  {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 1e 00 00 00	 mov	 ecx, 30
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 28 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 292  : 
; 293  : 	CollectionExtensions newInfo = {

  00053	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR typeInfo$[rbp]
  0005a	48 89 45 08	 mov	 QWORD PTR newInfo$[rbp], rax
  0005e	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR methods$[rbp]
  00065	48 89 45 10	 mov	 QWORD PTR newInfo$[rbp+8], rax
  00069	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  0006f	89 45 18	 mov	 DWORD PTR newInfo$[rbp+16], eax

; 294  : 		typeInfo,
; 295  : 		methods,
; 296  : 		memFlags
; 297  : 	};
; 298  : 
; 299  : 	for (int i = 0; i < GlobalCollectionInfoCurrentCount; i++) {

  00072	c7 45 34 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00079	eb 08		 jmp	 SHORT $LN4@Collection
$LN2@Collection:
  0007b	8b 45 34	 mov	 eax, DWORD PTR i$4[rbp]
  0007e	ff c0		 inc	 eax
  00080	89 45 34	 mov	 DWORD PTR i$4[rbp], eax
$LN4@Collection:
  00083	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR GlobalCollectionInfoCurrentCount
  00089	39 45 34	 cmp	 DWORD PTR i$4[rbp], eax
  0008c	73 4c		 jae	 SHORT $LN3@Collection

; 300  : 		if (Collection_InfoCompare(&GlobalCollectionInfo[i], &newInfo)) {

  0008e	48 63 45 34	 movsxd	 rax, DWORD PTR i$4[rbp]
  00092	48 6b c0 18	 imul	 rax, rax, 24
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GlobalCollectionInfo
  0009d	48 03 c8	 add	 rcx, rax
  000a0	48 8b c1	 mov	 rax, rcx
  000a3	48 8d 55 08	 lea	 rdx, QWORD PTR newInfo$[rbp]
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	e8 00 00 00 00	 call	 Collection_InfoCompare
  000af	85 c0		 test	 eax, eax
  000b1	74 25		 je	 SHORT $LN5@Collection

; 301  : 			PREENT("CollectionInfo found!\n");

  000b3	33 d2		 xor	 edx, edx
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@LCKCAPHB@CollectionInfo?5found?$CB?6@
  000bc	e8 00 00 00 00	 call	 Preent

; 302  : 			return &GlobalCollectionInfo[i];

  000c1	48 63 45 34	 movsxd	 rax, DWORD PTR i$4[rbp]
  000c5	48 6b c0 18	 imul	 rax, rax, 24
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GlobalCollectionInfo
  000d0	48 03 c8	 add	 rcx, rax
  000d3	48 8b c1	 mov	 rax, rcx
  000d6	eb 6b		 jmp	 SHORT $LN1@Collection
$LN5@Collection:

; 303  : 		}
; 304  : 			
; 305  : 	}

  000d8	eb a1		 jmp	 SHORT $LN2@Collection
$LN3@Collection:

; 306  : 
; 307  : 	if (GlobalCollectionInfoCurrentCount >= testTypeBinCount)

  000da	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR GlobalCollectionInfoCurrentCount, 32 ; 00000020H
  000e1	72 12		 jb	 SHORT $LN6@Collection

; 308  : 	{
; 309  : 		PREENT("No type slots available...\n");

  000e3	33 d2		 xor	 edx, edx
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KPOEFPPK@No?5type?5slots?5available?4?4?4?6@
  000ec	e8 00 00 00 00	 call	 Preent

; 310  : 		return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	eb 4e		 jmp	 SHORT $LN1@Collection
$LN6@Collection:

; 311  : 	}
; 312  : 
; 313  : 	CollectionExtensions* ptr = &GlobalCollectionInfo[GlobalCollectionInfoCurrentCount];

  000f5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR GlobalCollectionInfoCurrentCount
  000fb	48 6b c0 18	 imul	 rax, rax, 24
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GlobalCollectionInfo
  00106	48 03 c8	 add	 rcx, rax
  00109	48 8b c1	 mov	 rax, rcx
  0010c	48 89 45 58	 mov	 QWORD PTR ptr$[rbp], rax

; 314  : 	rawTranscribe(ptr, &newInfo, sizeof(TypeInfo));

  00110	41 b8 18 00 00
	00		 mov	 r8d, 24
  00116	48 8d 55 08	 lea	 rdx, QWORD PTR newInfo$[rbp]
  0011a	48 8b 4d 58	 mov	 rcx, QWORD PTR ptr$[rbp]
  0011e	e8 00 00 00 00	 call	 rawTranscribe

; 315  : 
; 316  : 	PREENT("Created new CollectionInfo!\n");

  00123	33 d2		 xor	 edx, edx
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@DBMNBHNG@Created?5new?5CollectionInfo?$CB?6@
  0012c	e8 00 00 00 00	 call	 Preent

; 317  : 
; 318  : 	GlobalCollectionInfoCurrentCount++;

  00131	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR GlobalCollectionInfoCurrentCount
  00137	ff c0		 inc	 eax
  00139	89 05 00 00 00
	00		 mov	 DWORD PTR GlobalCollectionInfoCurrentCount, eax

; 319  : 	return ptr;

  0013f	48 8b 45 58	 mov	 rax, QWORD PTR ptr$[rbp]
$LN1@Collection:

; 320  : }

  00143	48 8b f8	 mov	 rdi, rax
  00146	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_GetExtensions$rtcFrameData
  00151	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00156	48 8b c7	 mov	 rax, rdi
  00159	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00160	48 33 cd	 xor	 rcx, rbp
  00163	e8 00 00 00 00	 call	 __security_check_cookie
  00168	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  0016f	5f		 pop	 rdi
  00170	5d		 pop	 rbp
  00171	c3		 ret	 0
Collection_GetExtensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Create
_TEXT	SEGMENT
$S26$ = 8
__$ArrayPad$ = 232
__$ReturnAddress$ = 272
extensions$ = 280
count$ = 288
Collection_Create PROC					; COMDAT

; 266  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00023	b9 0c 00 00 00	 mov	 ecx, 12
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  00037	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003e	48 33 c5	 xor	 rax, rbp
  00041	48 89 85 e8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0004f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 267  : 	return (Collection) {

  00054	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR extensions$[rbp]
  0005b	48 89 45 08	 mov	 QWORD PTR $S26$[rbp], rax
  0005f	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR count$[rbp]
  00065	89 45 10	 mov	 DWORD PTR $S26$[rbp+8], eax
  00068	c7 45 14 00 00
	00 00		 mov	 DWORD PTR $S26$[rbp+12], 0
  0006f	48 8d 45 08	 lea	 rax, QWORD PTR $S26$[rbp]
  00073	48 8b bd 10 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnAddress$[rbp]
  0007a	48 8b f0	 mov	 rsi, rax
  0007d	b9 10 00 00 00	 mov	 ecx, 16
  00082	f3 a4		 rep movsb
  00084	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]

; 268  : 		extensions,
; 269  : 		count,
; 270  : 		0
; 271  : 	};
; 272  : }

  0008b	48 8b f8	 mov	 rdi, rax
  0008e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_Create$rtcFrameData
  00099	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0009e	48 8b c7	 mov	 rax, rdi
  000a1	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000a8	48 33 cd	 xor	 rcx, rbp
  000ab	e8 00 00 00 00	 call	 __security_check_cookie
  000b0	48 8d a5 f0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+240]
  000b7	5f		 pop	 rdi
  000b8	5e		 pop	 rsi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
Collection_Create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT CollectionExtensions_Create
_TEXT	SEGMENT
__$ReturnAddress$ = 304
type$ = 312
extensions$ = 320
memFlags$ = 328
CollectionExtensions_Create PROC			; COMDAT

; 257  : CollectionExtensions CollectionExtensions_Create(TypeInfo* type, bool(*extensions)(RequestType* request), int memFlags) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 16 00 00 00	 mov	 ecx, 22
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 258  : 	return (CollectionExtensions) {

  00047	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]
  0004e	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR type$[rbp]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx
  00058	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]
  0005f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR extensions$[rbp]
  00066	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0006a	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]
  00071	8b 8d 48 01 00
	00		 mov	 ecx, DWORD PTR memFlags$[rbp]
  00077	89 48 10	 mov	 DWORD PTR [rax+16], ecx
  0007a	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]

; 259  : 		type,
; 260  : 		extensions,
; 261  : 		memFlags
; 262  : 	};
; 263  : }

  00081	48 8b f8	 mov	 rdi, rax
  00084	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CollectionExtensions_Create$rtcFrameData
  0008f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00094	48 8b c7	 mov	 rax, rdi
  00097	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
CollectionExtensions_Create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Release
_TEXT	SEGMENT
collection$ = 224
Collection_Release PROC					; COMDAT

; 225  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 226  : 	InterlockedExchange(&(collection->_spinLock), 0);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  00026	48 83 c0 0c	 add	 rax, 12
  0002a	33 c9		 xor	 ecx, ecx
  0002c	87 08		 xchg	 DWORD PTR [rax], ecx

; 227  : 	return true;

  0002e	b8 01 00 00 00	 mov	 eax, 1

; 228  : }

  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
Collection_Release ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Request
_TEXT	SEGMENT
tv72 = 192
collection$ = 240
Collection_Request PROC					; COMDAT

; 213  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@Collection:

; 214  : 	while (InterlockedCompareExchange(&(collection->_spinLock), 1, 0)) {

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  00026	48 83 c0 0c	 add	 rax, 12
  0002a	b9 01 00 00 00	 mov	 ecx, 1
  0002f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00036	33 c0		 xor	 eax, eax
  00038	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR tv72[rbp]
  0003f	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR tv72[rbp]
  00046	f0 0f b1 0a	 lock cmpxchg DWORD PTR [rdx], ecx
  0004a	85 c0		 test	 eax, eax
  0004c	74 02		 je	 SHORT $LN3@Collection

; 215  : 		// time sensitive logic...
; 216  : 		// eg:
; 217  : 		// int counter = 0;
; 218  : 		// if (counter > 100000)
; 219  : 		//	return false;
; 220  : 		// counter++;
; 221  : 	}

  0004e	eb cf		 jmp	 SHORT $LN2@Collection
$LN3@Collection:

; 222  : 	return true;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 223  : }

  00055	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
Collection_Request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_InfoCompare
_TEXT	SEGMENT
trg$ = 224
src$ = 232
Collection_InfoCompare PROC				; COMDAT

; 202  : inline bool Collection_InfoCompare(CollectionExtensions* trg, CollectionExtensions* src) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 203  : 	if (trg->_memFlags & READ_ONLY)

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  0002b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0002e	83 e0 01	 and	 eax, 1
  00031	85 c0		 test	 eax, eax
  00033	74 04		 je	 SHORT $LN2@Collection

; 204  : 		return false;

  00035	33 c0		 xor	 eax, eax
  00037	eb 3e		 jmp	 SHORT $LN1@Collection
$LN2@Collection:

; 205  : 	
; 206  : 	if (trg->_methods != src->_methods ||

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  00040	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  00047	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004b	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0004f	75 1d		 jne	 SHORT $LN4@Collection
  00051	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00058	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  00062	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00065	e8 00 00 00 00	 call	 TypeInfo_Compare
  0006a	85 c0		 test	 eax, eax
  0006c	75 04		 jne	 SHORT $LN3@Collection
$LN4@Collection:

; 207  : 		//A._memFlags != B._memFlags ||
; 208  : 		!TypeInfo_Compare(trg->_type, src->_type))
; 209  : 		return false;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 05		 jmp	 SHORT $LN1@Collection
$LN3@Collection:

; 210  : 	return true;

  00072	b8 01 00 00 00	 mov	 eax, 1
$LN1@Collection:

; 211  : }

  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
Collection_InfoCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_ReadOnly
_TEXT	SEGMENT
collection$ = 224
Collection_ReadOnly PROC				; COMDAT

; 195  : bool Collection_ReadOnly(COLLECTION collection) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 196  : 	return collection->_extensions->_memFlags & READ_ONLY;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0002c	83 e0 01	 and	 eax, 1

; 197  : }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
Collection_ReadOnly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Count
_TEXT	SEGMENT
output$ = 4
$S19$ = 48
$S20$ = 136
$S21$ = 184
$S22$ = 232
$S23$ = 280
$S24$ = 336
$T10 = 1016
$T11 = 1072
__$ArrayPad$ = 1096
collection$ = 1136
Collection_Count PROC					; COMDAT

; 189  : uint Collection_Count(COLLECTION collection) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 70 04
	00 00		 sub	 rsp, 1136		; 00000470H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1176]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c5	 xor	 rax, rbp
  00037	48 89 85 48 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 190  : 	uint output;
; 191  : 	if (!collection->_extensions->_methods(Request(INFO, P_(tVARIANT, tCOUNT), P_(tSRC, collection), P_(tTRG, &output))))

  0004a	48 8d 85 50 01
	00 00		 lea	 rax, QWORD PTR $S24$[rbp]
  00051	48 8b f8	 mov	 rdi, rax
  00054	33 c0		 xor	 eax, eax
  00056	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  0005b	f3 aa		 rep stosb
  0005d	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR $S20$[rbp], 0
  00067	48 c7 85 90 00
	00 00 07 00 00
	00		 mov	 QWORD PTR $S20$[rbp+8], 7
  00072	48 8d 45 30	 lea	 rax, QWORD PTR $S19$[rbp]
  00076	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR $S20$[rbp]
  0007d	48 8b f8	 mov	 rdi, rax
  00080	48 8b f1	 mov	 rsi, rcx
  00083	b9 10 00 00 00	 mov	 ecx, 16
  00088	f3 a4		 rep movsb
  0008a	c7 85 b8 00 00
	00 02 00 00 00	 mov	 DWORD PTR $S21$[rbp], 2
  00094	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  0009b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR $S21$[rbp+8], rax
  000a2	48 8d 45 40	 lea	 rax, QWORD PTR $S19$[rbp+16]
  000a6	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR $S21$[rbp]
  000ad	48 8b f8	 mov	 rdi, rax
  000b0	48 8b f1	 mov	 rsi, rcx
  000b3	b9 10 00 00 00	 mov	 ecx, 16
  000b8	f3 a4		 rep movsb
  000ba	c7 85 e8 00 00
	00 01 00 00 00	 mov	 DWORD PTR $S22$[rbp], 1
  000c4	48 8d 45 04	 lea	 rax, QWORD PTR output$[rbp]
  000c8	48 89 85 f0 00
	00 00		 mov	 QWORD PTR $S22$[rbp+8], rax
  000cf	48 8d 45 50	 lea	 rax, QWORD PTR $S19$[rbp+32]
  000d3	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $S22$[rbp]
  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b f1	 mov	 rsi, rcx
  000e0	b9 10 00 00 00	 mov	 ecx, 16
  000e5	f3 a4		 rep movsb
  000e7	c7 85 18 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S23$[rbp], -2
  000f1	48 c7 85 20 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S23$[rbp+8], 0
  000fc	48 8d 45 60	 lea	 rax, QWORD PTR $S19$[rbp+48]
  00100	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR $S23$[rbp]
  00107	48 8b f8	 mov	 rdi, rax
  0010a	48 8b f1	 mov	 rsi, rcx
  0010d	b9 10 00 00 00	 mov	 ecx, 16
  00112	f3 a4		 rep movsb
  00114	4c 8d 8d 50 01
	00 00		 lea	 r9, QWORD PTR $S24$[rbp]
  0011b	4c 8d 45 30	 lea	 r8, QWORD PTR $S19$[rbp]
  0011f	ba 04 00 00 00	 mov	 edx, 4
  00124	48 8d 8d f8 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0012b	e8 00 00 00 00	 call	 CreateRequest
  00130	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00137	48 8b f9	 mov	 rdi, rcx
  0013a	48 8b f0	 mov	 rsi, rax
  0013d	b9 10 00 00 00	 mov	 ecx, 16
  00142	f3 a4		 rep movsb
  00144	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  0014b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014e	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00155	ff 50 08	 call	 QWORD PTR [rax+8]
  00158	85 c0		 test	 eax, eax
  0015a	75 04		 jne	 SHORT $LN2@Collection

; 192  : 		return 0;

  0015c	33 c0		 xor	 eax, eax
  0015e	eb 03		 jmp	 SHORT $LN1@Collection
$LN2@Collection:

; 193  : 	return output;

  00160	8b 45 04	 mov	 eax, DWORD PTR output$[rbp]
$LN1@Collection:

; 194  : }

  00163	48 8b f8	 mov	 rdi, rax
  00166	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_Count$rtcFrameData
  00171	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00176	48 8b c7	 mov	 rax, rdi
  00179	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00180	48 33 cd	 xor	 rcx, rbp
  00183	e8 00 00 00 00	 call	 __security_check_cookie
  00188	48 8d a5 50 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1104]
  0018f	5f		 pop	 rdi
  00190	5e		 pop	 rsi
  00191	5d		 pop	 rbp
  00192	c3		 ret	 0
Collection_Count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Capacity
_TEXT	SEGMENT
output$ = 4
$S14$ = 40
$S15$ = 120
$S16$ = 168
$S17$ = 216
$S18$ = 272
$T9 = 952
$T10 = 1008
__$ArrayPad$ = 1032
collection$ = 1072
Collection_Capacity PROC				; COMDAT

; 183  : uint Collection_Capacity(COLLECTION collection) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 30 04
	00 00		 sub	 rsp, 1072		; 00000430H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c5	 xor	 rax, rbp
  00037	48 89 85 08 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 184  : 	uint output;
; 185  : 	if (!collection->_extensions->_methods(Request(INFO, P_(tTRG, collection) , P_(tCAPACITY, &output))))

  0004a	48 8d 85 10 01
	00 00		 lea	 rax, QWORD PTR $S18$[rbp]
  00051	48 8b f8	 mov	 rdi, rax
  00054	33 c0		 xor	 eax, eax
  00056	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  0005b	f3 aa		 rep stosb
  0005d	c7 45 78 01 00
	00 00		 mov	 DWORD PTR $S15$[rbp], 1
  00064	48 8b 85 30 04
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  0006b	48 89 85 80 00
	00 00		 mov	 QWORD PTR $S15$[rbp+8], rax
  00072	48 8d 45 28	 lea	 rax, QWORD PTR $S14$[rbp]
  00076	48 8d 4d 78	 lea	 rcx, QWORD PTR $S15$[rbp]
  0007a	48 8b f8	 mov	 rdi, rax
  0007d	48 8b f1	 mov	 rsi, rcx
  00080	b9 10 00 00 00	 mov	 ecx, 16
  00085	f3 a4		 rep movsb
  00087	c7 85 a8 00 00
	00 08 00 00 00	 mov	 DWORD PTR $S16$[rbp], 8
  00091	48 8d 45 04	 lea	 rax, QWORD PTR output$[rbp]
  00095	48 89 85 b0 00
	00 00		 mov	 QWORD PTR $S16$[rbp+8], rax
  0009c	48 8d 45 38	 lea	 rax, QWORD PTR $S14$[rbp+16]
  000a0	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR $S16$[rbp]
  000a7	48 8b f8	 mov	 rdi, rax
  000aa	48 8b f1	 mov	 rsi, rcx
  000ad	b9 10 00 00 00	 mov	 ecx, 16
  000b2	f3 a4		 rep movsb
  000b4	c7 85 d8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S17$[rbp], -2
  000be	48 c7 85 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S17$[rbp+8], 0
  000c9	48 8d 45 48	 lea	 rax, QWORD PTR $S14$[rbp+32]
  000cd	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR $S17$[rbp]
  000d4	48 8b f8	 mov	 rdi, rax
  000d7	48 8b f1	 mov	 rsi, rcx
  000da	b9 10 00 00 00	 mov	 ecx, 16
  000df	f3 a4		 rep movsb
  000e1	4c 8d 8d 10 01
	00 00		 lea	 r9, QWORD PTR $S18$[rbp]
  000e8	4c 8d 45 28	 lea	 r8, QWORD PTR $S14$[rbp]
  000ec	ba 04 00 00 00	 mov	 edx, 4
  000f1	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000f8	e8 00 00 00 00	 call	 CreateRequest
  000fd	48 8d 8d f0 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00104	48 8b f9	 mov	 rdi, rcx
  00107	48 8b f0	 mov	 rsi, rax
  0010a	b9 10 00 00 00	 mov	 ecx, 16
  0010f	f3 a4		 rep movsb
  00111	48 8b 85 30 04
	00 00		 mov	 rax, QWORD PTR collection$[rbp]
  00118	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011b	48 8d 8d f0 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00122	ff 50 08	 call	 QWORD PTR [rax+8]
  00125	85 c0		 test	 eax, eax
  00127	75 04		 jne	 SHORT $LN2@Collection

; 186  : 		return 0;

  00129	33 c0		 xor	 eax, eax
  0012b	eb 03		 jmp	 SHORT $LN1@Collection
$LN2@Collection:

; 187  : 	return output;

  0012d	8b 45 04	 mov	 eax, DWORD PTR output$[rbp]
$LN1@Collection:

; 188  : }

  00130	48 8b f8	 mov	 rdi, rax
  00133	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_Capacity$rtcFrameData
  0013e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00143	48 8b c7	 mov	 rax, rdi
  00146	48 8b 8d 08 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0014d	48 33 cd	 xor	 rcx, rbp
  00150	e8 00 00 00 00	 call	 __security_check_cookie
  00155	48 8d a5 10 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1040]
  0015c	5f		 pop	 rdi
  0015d	5e		 pop	 rsi
  0015e	5d		 pop	 rbp
  0015f	c3		 ret	 0
Collection_Capacity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Write
_TEXT	SEGMENT
trg$ = 224
src$ = 232
index$ = 240
Collection_Write PROC					; COMDAT

; 180  : bool Collection_Write(COLLECTION trg, void* src, unsigned int index) {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 181  : 	return Collection_WriteSpan(trg, src, index, 1);

  00029	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002f	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR index$[rbp]
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR trg$[rbp]
  00044	e8 00 00 00 00	 call	 Collection_WriteSpan

; 182  : }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
Collection_Write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_WriteSpan
_TEXT	SEGMENT
srcBucket$ = 8
$T4 = 264
__$ArrayPad$ = 312
trg$ = 352
src$ = 360
start$ = 368
count$ = 376
Collection_WriteSpan PROC				; COMDAT

; 165  : bool Collection_WriteSpan(COLLECTION trg, void* src, unsigned int start, unsigned int count) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00028	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00043	48 33 c5	 xor	 rax, rbp
  00046	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00054	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 166  : 	Bucket srcBucket = Collection_RawBucket(trg, src, count);

  00059	44 8b 8d 78 01
	00 00		 mov	 r9d, DWORD PTR count$[rbp]
  00060	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR src$[rbp]
  00067	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR trg$[rbp]
  0006e	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00075	e8 00 00 00 00	 call	 Collection_RawBucket
  0007a	48 8d 4d 08	 lea	 rcx, QWORD PTR srcBucket$[rbp]
  0007e	48 8b f9	 mov	 rdi, rcx
  00081	48 8b f0	 mov	 rsi, rax
  00084	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00089	f3 a4		 rep movsb

; 167  : 	return Collection_Transcribe(trg, &srcBucket, start, 0, count);;

  0008b	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR count$[rbp]
  00091	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00095	45 33 c9	 xor	 r9d, r9d
  00098	44 8b 85 70 01
	00 00		 mov	 r8d, DWORD PTR start$[rbp]
  0009f	48 8d 55 08	 lea	 rdx, QWORD PTR srcBucket$[rbp]
  000a3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR trg$[rbp]
  000aa	e8 00 00 00 00	 call	 Collection_Transcribe

; 168  : }

  000af	48 8b f8	 mov	 rdi, rax
  000b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_WriteSpan$rtcFrameData
  000bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c2	48 8b c7	 mov	 rax, rdi
  000c5	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000cc	48 33 cd	 xor	 rcx, rbp
  000cf	e8 00 00 00 00	 call	 __security_check_cookie
  000d4	48 8d a5 40 01
	00 00		 lea	 rsp, QWORD PTR [rbp+320]
  000db	5f		 pop	 rdi
  000dc	5e		 pop	 rsi
  000dd	5d		 pop	 rbp
  000de	c3		 ret	 0
Collection_WriteSpan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Read
_TEXT	SEGMENT
src$ = 224
trg$ = 232
index$ = 240
Collection_Read PROC					; COMDAT

; 177  : bool Collection_Read(COLLECTION src, void* trg, unsigned int index) {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 178  : 	return Collection_ReadSpan(src, trg, index, 1);

  00029	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002f	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR index$[rbp]
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR trg$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  00044	e8 00 00 00 00	 call	 Collection_ReadSpan

; 179  : }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
Collection_Read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_ReadSpan
_TEXT	SEGMENT
trgBucket$ = 8
$T4 = 264
__$ArrayPad$ = 312
src$ = 352
trg$ = 360
start$ = 368
count$ = 376
Collection_ReadSpan PROC				; COMDAT

; 161  : bool Collection_ReadSpan(COLLECTION src, void* trg, unsigned int start, unsigned int count) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00028	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00043	48 33 c5	 xor	 rax, rbp
  00046	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00054	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 162  : 	Bucket trgBucket = Collection_RawBucket(src, trg, count);

  00059	44 8b 8d 78 01
	00 00		 mov	 r9d, DWORD PTR count$[rbp]
  00060	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR trg$[rbp]
  00067	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  0006e	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00075	e8 00 00 00 00	 call	 Collection_RawBucket
  0007a	48 8d 4d 08	 lea	 rcx, QWORD PTR trgBucket$[rbp]
  0007e	48 8b f9	 mov	 rdi, rcx
  00081	48 8b f0	 mov	 rsi, rax
  00084	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00089	f3 a4		 rep movsb

; 163  : 	return Collection_Transcribe(src, &trgBucket, 0, start, count);

  0008b	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR count$[rbp]
  00091	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00095	44 8b 8d 70 01
	00 00		 mov	 r9d, DWORD PTR start$[rbp]
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	48 8d 55 08	 lea	 rdx, QWORD PTR trgBucket$[rbp]
  000a3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  000aa	e8 00 00 00 00	 call	 Collection_Transcribe

; 164  : }

  000af	48 8b f8	 mov	 rdi, rax
  000b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_ReadSpan$rtcFrameData
  000bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c2	48 8b c7	 mov	 rax, rdi
  000c5	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000cc	48 33 cd	 xor	 rcx, rbp
  000cf	e8 00 00 00 00	 call	 __security_check_cookie
  000d4	48 8d a5 40 01
	00 00		 lea	 rsp, QWORD PTR [rbp+320]
  000db	5f		 pop	 rdi
  000dc	5e		 pop	 rsi
  000dd	5d		 pop	 rbp
  000de	c3		 ret	 0
Collection_ReadSpan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tCollection.c
;	COMDAT Collection_Transcribe
_TEXT	SEGMENT
trgPtr$ = 8
trgIter$ = 40
$S2$ = 96
$S3$ = 184
$S4$ = 232
$S5$ = 280
$S6$ = 328
$S7$ = 384
srcPtr$ = 680
srcIter$ = 712
$S8$ = 768
$S9$ = 856
$S10$ = 904
$S11$ = 952
$S12$ = 1000
$S13$ = 1056
size$ = 1352
i$19 = 1380
$T20 = 2184
$T21 = 2232
$T22 = 2288
$T23 = 2336
__$ArrayPad$ = 2360
trg$ = 2400
src$ = 2408
trgStart$ = 2416
srcStart$ = 2424
count$ = 2432
Collection_Transcribe PROC				; COMDAT

; 133  : bool Collection_Transcribe(COLLECTION trg, COLLECTION src, unsigned int trgStart, unsigned int srcStart, unsigned int count) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 60 09
	00 00		 sub	 rsp, 2400		; 00000960H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00028	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 88
	09 00 00	 mov	 rcx, QWORD PTR [rsp+2440]
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00043	48 33 c5	 xor	 rax, rbp
  00046	48 89 85 38 09
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EB233596_tCollection@c
  00054	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 134  : 
; 135  : 	if (!Collection_InfoCompare(trg->_extensions, src->_extensions))

  00059	48 8b 85 68 09
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00060	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00063	48 8b 85 60 09
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  0006a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0006d	e8 00 00 00 00	 call	 Collection_InfoCompare
  00072	85 c0		 test	 eax, eax
  00074	75 07		 jne	 SHORT $LN5@Collection

; 136  : 		return false;

  00076	33 c0		 xor	 eax, eax
  00078	e9 0a 03 00 00	 jmp	 $LN1@Collection
$LN5@Collection:

; 137  : 
; 138  : 	if (!Collection_Request(trg) || !Collection_Request(src))

  0007d	48 8b 8d 60 09
	00 00		 mov	 rcx, QWORD PTR trg$[rbp]
  00084	e8 00 00 00 00	 call	 Collection_Request
  00089	85 c0		 test	 eax, eax
  0008b	74 10		 je	 SHORT $LN7@Collection
  0008d	48 8b 8d 68 09
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  00094	e8 00 00 00 00	 call	 Collection_Request
  00099	85 c0		 test	 eax, eax
  0009b	75 07		 jne	 SHORT $LN6@Collection
$LN7@Collection:

; 139  : 		return false;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 e3 02 00 00	 jmp	 $LN1@Collection
$LN6@Collection:

; 140  : 
; 141  : 	void* trgPtr;
; 142  : 	REQUEST trgIter = Request(ITERATE, P_(tSRC, trg), P_(tTRG, &trgPtr), P_(Ix_TRG, &trgStart));

  000a4	48 8d 85 80 01
	00 00		 lea	 rax, QWORD PTR $S7$[rbp]
  000ab	48 8b f8	 mov	 rdi, rax
  000ae	33 c0		 xor	 eax, eax
  000b0	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  000b5	f3 aa		 rep stosb
  000b7	c7 85 b8 00 00
	00 02 00 00 00	 mov	 DWORD PTR $S3$[rbp], 2
  000c1	48 8b 85 60 09
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  000c8	48 89 85 c0 00
	00 00		 mov	 QWORD PTR $S3$[rbp+8], rax
  000cf	48 8d 45 60	 lea	 rax, QWORD PTR $S2$[rbp]
  000d3	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR $S3$[rbp]
  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8b f1	 mov	 rsi, rcx
  000e0	b9 10 00 00 00	 mov	 ecx, 16
  000e5	f3 a4		 rep movsb
  000e7	c7 85 e8 00 00
	00 01 00 00 00	 mov	 DWORD PTR $S4$[rbp], 1
  000f1	48 8d 45 08	 lea	 rax, QWORD PTR trgPtr$[rbp]
  000f5	48 89 85 f0 00
	00 00		 mov	 QWORD PTR $S4$[rbp+8], rax
  000fc	48 8d 45 70	 lea	 rax, QWORD PTR $S2$[rbp+16]
  00100	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $S4$[rbp]
  00107	48 8b f8	 mov	 rdi, rax
  0010a	48 8b f1	 mov	 rsi, rcx
  0010d	b9 10 00 00 00	 mov	 ecx, 16
  00112	f3 a4		 rep movsb
  00114	c7 85 18 01 00
	00 03 00 00 00	 mov	 DWORD PTR $S5$[rbp], 3
  0011e	48 8d 85 70 09
	00 00		 lea	 rax, QWORD PTR trgStart$[rbp]
  00125	48 89 85 20 01
	00 00		 mov	 QWORD PTR $S5$[rbp+8], rax
  0012c	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR $S2$[rbp+32]
  00133	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR $S5$[rbp]
  0013a	48 8b f8	 mov	 rdi, rax
  0013d	48 8b f1	 mov	 rsi, rcx
  00140	b9 10 00 00 00	 mov	 ecx, 16
  00145	f3 a4		 rep movsb
  00147	c7 85 48 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S6$[rbp], -2
  00151	48 c7 85 50 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S6$[rbp+8], 0
  0015c	48 8d 85 90 00
	00 00		 lea	 rax, QWORD PTR $S2$[rbp+48]
  00163	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $S6$[rbp]
  0016a	48 8b f8	 mov	 rdi, rax
  0016d	48 8b f1	 mov	 rsi, rcx
  00170	b9 10 00 00 00	 mov	 ecx, 16
  00175	f3 a4		 rep movsb
  00177	4c 8d 8d 80 01
	00 00		 lea	 r9, QWORD PTR $S7$[rbp]
  0017e	4c 8d 45 60	 lea	 r8, QWORD PTR $S2$[rbp]
  00182	ba 01 00 00 00	 mov	 edx, 1
  00187	48 8d 8d 88 08
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  0018e	e8 00 00 00 00	 call	 CreateRequest
  00193	48 8d 4d 28	 lea	 rcx, QWORD PTR trgIter$[rbp]
  00197	48 8b f9	 mov	 rdi, rcx
  0019a	48 8b f0	 mov	 rsi, rax
  0019d	b9 10 00 00 00	 mov	 ecx, 16
  001a2	f3 a4		 rep movsb

; 143  : 
; 144  : 	void* srcPtr;
; 145  : 	REQUEST srcIter = Request(ITERATE, P_(tSRC, src), P_(tTRG, &srcPtr), P_(Ix_TRG, &srcStart));

  001a4	48 8d 85 20 04
	00 00		 lea	 rax, QWORD PTR $S13$[rbp]
  001ab	48 8b f8	 mov	 rdi, rax
  001ae	33 c0		 xor	 eax, eax
  001b0	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  001b5	f3 aa		 rep stosb
  001b7	c7 85 58 03 00
	00 02 00 00 00	 mov	 DWORD PTR $S9$[rbp], 2
  001c1	48 8b 85 68 09
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  001c8	48 89 85 60 03
	00 00		 mov	 QWORD PTR $S9$[rbp+8], rax
  001cf	48 8d 85 00 03
	00 00		 lea	 rax, QWORD PTR $S8$[rbp]
  001d6	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $S9$[rbp]
  001dd	48 8b f8	 mov	 rdi, rax
  001e0	48 8b f1	 mov	 rsi, rcx
  001e3	b9 10 00 00 00	 mov	 ecx, 16
  001e8	f3 a4		 rep movsb
  001ea	c7 85 88 03 00
	00 01 00 00 00	 mov	 DWORD PTR $S10$[rbp], 1
  001f4	48 8d 85 a8 02
	00 00		 lea	 rax, QWORD PTR srcPtr$[rbp]
  001fb	48 89 85 90 03
	00 00		 mov	 QWORD PTR $S10$[rbp+8], rax
  00202	48 8d 85 10 03
	00 00		 lea	 rax, QWORD PTR $S8$[rbp+16]
  00209	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $S10$[rbp]
  00210	48 8b f8	 mov	 rdi, rax
  00213	48 8b f1	 mov	 rsi, rcx
  00216	b9 10 00 00 00	 mov	 ecx, 16
  0021b	f3 a4		 rep movsb
  0021d	c7 85 b8 03 00
	00 03 00 00 00	 mov	 DWORD PTR $S11$[rbp], 3
  00227	48 8d 85 78 09
	00 00		 lea	 rax, QWORD PTR srcStart$[rbp]
  0022e	48 89 85 c0 03
	00 00		 mov	 QWORD PTR $S11$[rbp+8], rax
  00235	48 8d 85 20 03
	00 00		 lea	 rax, QWORD PTR $S8$[rbp+32]
  0023c	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $S11$[rbp]
  00243	48 8b f8	 mov	 rdi, rax
  00246	48 8b f1	 mov	 rsi, rcx
  00249	b9 10 00 00 00	 mov	 ecx, 16
  0024e	f3 a4		 rep movsb
  00250	c7 85 e8 03 00
	00 fe ff ff ff	 mov	 DWORD PTR $S12$[rbp], -2
  0025a	48 c7 85 f0 03
	00 00 00 00 00
	00		 mov	 QWORD PTR $S12$[rbp+8], 0
  00265	48 8d 85 30 03
	00 00		 lea	 rax, QWORD PTR $S8$[rbp+48]
  0026c	48 8d 8d e8 03
	00 00		 lea	 rcx, QWORD PTR $S12$[rbp]
  00273	48 8b f8	 mov	 rdi, rax
  00276	48 8b f1	 mov	 rsi, rcx
  00279	b9 10 00 00 00	 mov	 ecx, 16
  0027e	f3 a4		 rep movsb
  00280	4c 8d 8d 20 04
	00 00		 lea	 r9, QWORD PTR $S13$[rbp]
  00287	4c 8d 85 00 03
	00 00		 lea	 r8, QWORD PTR $S8$[rbp]
  0028e	ba 01 00 00 00	 mov	 edx, 1
  00293	48 8d 8d b8 08
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  0029a	e8 00 00 00 00	 call	 CreateRequest
  0029f	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR srcIter$[rbp]
  002a6	48 8b f9	 mov	 rdi, rcx
  002a9	48 8b f0	 mov	 rsi, rax
  002ac	b9 10 00 00 00	 mov	 ecx, 16
  002b1	f3 a4		 rep movsb

; 146  : 
; 147  : 	size_t size = trg->_extensions->_type->_size;

  002b3	48 8b 85 60 09
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  002ba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002c4	48 89 85 48 05
	00 00		 mov	 QWORD PTR size$[rbp], rax

; 148  : 
; 149  : 	for (int i = 0; i < count; i++) {

  002cb	c7 85 64 05 00
	00 00 00 00 00	 mov	 DWORD PTR i$19[rbp], 0
  002d5	eb 0e		 jmp	 SHORT $LN4@Collection
$LN2@Collection:
  002d7	8b 85 64 05 00
	00		 mov	 eax, DWORD PTR i$19[rbp]
  002dd	ff c0		 inc	 eax
  002df	89 85 64 05 00
	00		 mov	 DWORD PTR i$19[rbp], eax
$LN4@Collection:
  002e5	8b 85 80 09 00
	00		 mov	 eax, DWORD PTR count$[rbp]
  002eb	39 85 64 05 00
	00		 cmp	 DWORD PTR i$19[rbp], eax
  002f1	73 77		 jae	 SHORT $LN3@Collection

; 150  : 		trg->_extensions->_methods(trgIter);

  002f3	48 8d 85 f0 08
	00 00		 lea	 rax, QWORD PTR $T22[rbp]
  002fa	48 8d 4d 28	 lea	 rcx, QWORD PTR trgIter$[rbp]
  002fe	48 8b f8	 mov	 rdi, rax
  00301	48 8b f1	 mov	 rsi, rcx
  00304	b9 10 00 00 00	 mov	 ecx, 16
  00309	f3 a4		 rep movsb
  0030b	48 8b 85 60 09
	00 00		 mov	 rax, QWORD PTR trg$[rbp]
  00312	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00315	48 8d 8d f0 08
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  0031c	ff 50 08	 call	 QWORD PTR [rax+8]

; 151  : 		src->_extensions->_methods(srcIter);

  0031f	48 8d 85 20 09
	00 00		 lea	 rax, QWORD PTR $T23[rbp]
  00326	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR srcIter$[rbp]
  0032d	48 8b f8	 mov	 rdi, rax
  00330	48 8b f1	 mov	 rsi, rcx
  00333	b9 10 00 00 00	 mov	 ecx, 16
  00338	f3 a4		 rep movsb
  0033a	48 8b 85 68 09
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00341	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00344	48 8d 8d 20 09
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  0034b	ff 50 08	 call	 QWORD PTR [rax+8]

; 152  : 		rawTranscribe(trgPtr, srcPtr, size);

  0034e	4c 8b 85 48 05
	00 00		 mov	 r8, QWORD PTR size$[rbp]
  00355	48 8b 95 a8 02
	00 00		 mov	 rdx, QWORD PTR srcPtr$[rbp]
  0035c	48 8b 4d 08	 mov	 rcx, QWORD PTR trgPtr$[rbp]
  00360	e8 00 00 00 00	 call	 rawTranscribe

; 153  : 	}

  00365	e9 6d ff ff ff	 jmp	 $LN2@Collection
$LN3@Collection:

; 154  : 
; 155  : 	Collection_Release(trg);

  0036a	48 8b 8d 60 09
	00 00		 mov	 rcx, QWORD PTR trg$[rbp]
  00371	e8 00 00 00 00	 call	 Collection_Release

; 156  : 	Collection_Release(src);

  00376	48 8b 8d 68 09
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  0037d	e8 00 00 00 00	 call	 Collection_Release

; 157  : 
; 158  : 	return true;

  00382	b8 01 00 00 00	 mov	 eax, 1
$LN1@Collection:

; 159  : }

  00387	48 8b f8	 mov	 rdi, rax
  0038a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Collection_Transcribe$rtcFrameData
  00395	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0039a	48 8b c7	 mov	 rax, rdi
  0039d	48 8b 8d 38 09
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003a4	48 33 cd	 xor	 rcx, rbp
  003a7	e8 00 00 00 00	 call	 __security_check_cookie
  003ac	48 8d a5 40 09
	00 00		 lea	 rsp, QWORD PTR [rbp+2368]
  003b3	5f		 pop	 rdi
  003b4	5e		 pop	 rsi
  003b5	5d		 pop	 rbp
  003b6	c3		 ret	 0
Collection_Transcribe ENDP
_TEXT	ENDS
END
