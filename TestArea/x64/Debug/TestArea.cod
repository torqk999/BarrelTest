; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	barrelTest_ESCAPE
PUBLIC	clear_screen
PUBLIC	barrelTest_REMOVE
PUBLIC	barrelTest_RESIZE
PUBLIC	barrelTest_VIEW_HEAP
PUBLIC	ESCAPE
PUBLIC	escapeAction
PUBLIC	??_C@_06OIGFGPHJ@Escape@			; `string'
PUBLIC	mainMenuActionCount
PUBLIC	mainMenuActions
PUBLIC	??_C@_0N@GKKFFGGN@Quit?5Program@		; `string'
PUBLIC	??_C@_0BC@EGJKACHO@Remove?5Collection@		; `string'
PUBLIC	??_C@_0BD@DGEAJMED@Re?9size?5Collection@	; `string'
PUBLIC	??_C@_0BB@DMJKMIHM@View?5entire?5heap@		; `string'
PUBLIC	??_C@_0N@EDMEMMAC@Clear?5Screen@		; `string'
_DATA	SEGMENT
COMM	ThreadHandle_TypeID:BYTE:018H
COMM	Request_TypeID:BYTE:018H
COMM	GlobalBarrelService:BYTE:078H
COMM	GlobalBarrelNodeType:BYTE:018H
COMM	barrelService_ThreadBin:BYTE:0100H
COMM	barrelService_QueBin:BYTE:0200H
_DATA	ENDS
_BSS	SEGMENT
ESCAPE	DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__03948348_tThreads@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__FC472216_tVector@h DB 01H
__EAE81D8C_tBucket@h DB 01H
__37B02CEB_tQues@h DB 01H
__978ECD68_tServices@h DB 01H
__FEADC134_tHeap@h DB 01H
__E8DC32E4_tLink@h DB 01H
__CE367354_tBarrel@h DB 01H
__7D6FBD02_tHashMap@h DB 01H
__BC332FCF_TestArea@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0N@EDMEMMAC@Clear?5Screen@
CONST	SEGMENT
??_C@_0N@EDMEMMAC@Clear?5Screen@ DB 'Clear Screen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMJKMIHM@View?5entire?5heap@
CONST	SEGMENT
??_C@_0BB@DMJKMIHM@View?5entire?5heap@ DB 'View entire heap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DGEAJMED@Re?9size?5Collection@
CONST	SEGMENT
??_C@_0BD@DGEAJMED@Re?9size?5Collection@ DB 'Re-size Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EGJKACHO@Remove?5Collection@
CONST	SEGMENT
??_C@_0BC@EGJKACHO@Remove?5Collection@ DB 'Remove Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKKFFGGN@Quit?5Program@
CONST	SEGMENT
??_C@_0N@GKKFFGGN@Quit?5Program@ DB 'Quit Program', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGFGPHJ@Escape@
CONST	SEGMENT
??_C@_06OIGFGPHJ@Escape@ DB 'Escape', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
escapeAction DB	071H
	ORG $+7
	DQ	FLAT:??_C@_06OIGFGPHJ@Escape@
	DQ	FLAT:barrelTest_ESCAPE
mainMenuActionCount DD 08H
	ORG $+4
mainMenuActions DB 071H
	ORG $+7
	DQ	FLAT:??_C@_0N@GKKFFGGN@Quit?5Program@
	DQ	FLAT:barrelTest_ESCAPE
	DB	06dH
	ORG $+7
	DQ	FLAT:??_C@_0BC@EGJKACHO@Remove?5Collection@
	DQ	FLAT:barrelTest_REMOVE
	DB	073H
	ORG $+7
	DQ	FLAT:??_C@_0BD@DGEAJMED@Re?9size?5Collection@
	DQ	FLAT:barrelTest_RESIZE
	DB	076H
	ORG $+7
	DQ	FLAT:??_C@_0BB@DMJKMIHM@View?5entire?5heap@
	DQ	FLAT:barrelTest_VIEW_HEAP
	DB	063H
	ORG $+7
	DQ	FLAT:??_C@_0N@EDMEMMAC@Clear?5Screen@
	DQ	FLAT:clear_screen
_DATA	ENDS
PUBLIC	fill_screen
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ ; `string'
PUBLIC	??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ ; `string'
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_FillConsoleOutputCharacterW:PROC
EXTRN	__imp_FillConsoleOutputAttribute:PROC
EXTRN	__imp_GetConsoleScreenBufferInfo:PROC
EXTRN	__imp_SetConsoleCursorPosition:PROC
EXTRN	Preent:PROC
EXTRN	paramCount:PROC
EXTRN	Collection_Read:PROC
EXTRN	Collection_Count:PROC
EXTRN	Bucket_ctor:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_ESCAPE DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$barrelTest_ESCAPE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_screen DD imagerel $LN5
	DD	imagerel $LN5+294
	DD	imagerel $unwind$fill_screen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_screen DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$clear_screen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_REMOVE DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$barrelTest_REMOVE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_RESIZE DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$barrelTest_RESIZE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_VIEW_HEAP DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$barrelTest_VIEW_HEAP
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN4
	DD	imagerel $LN4+678
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ DB 'value a'
	DB	't index 3 of myBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
CONST	SEGMENT
??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ DB 'collection cou'
	DB	'nt of emptyBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	028cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035063219H
	DD	010b3310H
	DD	07004008aH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0448H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 024H
	DB	053H
	DB	031H
	DB	00H
main$rtcName$1 DB 024H
	DB	053H
	DB	032H
	DB	00H
main$rtcName$2 DB 024H
	DB	053H
	DB	033H
	DB	00H
main$rtcName$3 DB 024H
	DB	053H
	DB	034H
	DB	00H
main$rtcName$4 DB 024H
	DB	053H
	DB	035H
	DB	00H
main$rtcName$5 DB 024H
	DB	053H
	DB	036H
	DB	00H
main$rtcName$6 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
main$rtcName$7 DB 024H
	DB	053H
	DB	037H
	DB	00H
main$rtcName$8 DB 024H
	DB	053H
	DB	038H
	DB	00H
main$rtcName$9 DB 024H
	DB	053H
	DB	039H
	DB	00H
main$rtcName$10 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
main$rtcName$11 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
main$rtcName$12 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+15
main$rtcVarDesc DD 02a8H
	DD	010H
	DQ	FLAT:main$rtcName$12
	DD	0284H
	DD	04H
	DQ	FLAT:main$rtcName$11
	DD	0248H
	DD	020H
	DQ	FLAT:main$rtcName$10
	DD	0218H
	DD	010H
	DQ	FLAT:main$rtcName$9
	DD	01f4H
	DD	04H
	DQ	FLAT:main$rtcName$8
	DD	01b8H
	DD	020H
	DQ	FLAT:main$rtcName$7
	DD	0194H
	DD	04H
	DQ	FLAT:main$rtcName$6
	DD	0168H
	DD	018H
	DQ	FLAT:main$rtcName$5
	DD	0128H
	DD	020H
	DQ	FLAT:main$rtcName$4
	DD	0e4H
	DD	07H
	DQ	FLAT:main$rtcName$3
	DD	0c4H
	DD	07H
	DQ	FLAT:main$rtcName$2
	DD	098H
	DD	018H
	DQ	FLAT:main$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:main$rtcName$0
	ORG $+624
main$rtcFrameData DD 0dH
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_VIEW_HEAP DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_RESIZE DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_REMOVE DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_screen DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	010dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_screen DD 035053d19H
	DD	010e3313H
	DD	070070035H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
fill_screen$rtcName$0 DB 074H
	DB	06cH
	DB	00H
	ORG $+1
fill_screen$rtcName$1 DB 073H
	DB	00H
	ORG $+2
fill_screen$rtcName$2 DB 077H
	DB	072H
	DB	069H
	DB	074H
	DB	074H
	DB	065H
	DB	06eH
	DB	00H
fill_screen$rtcVarDesc DD 0a4H
	DD	04H
	DQ	FLAT:fill_screen$rtcName$2
	DD	058H
	DD	016H
	DQ	FLAT:fill_screen$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:fill_screen$rtcName$0
	ORG $+144
fill_screen$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:fill_screen$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_ESCAPE DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT main
_TEXT	SEGMENT
myBucket$ = 8
$S1$ = 40
$S2$ = 104
$S3$ = 148
$S4$ = 180
emptyBucket$ = 216
$S5$ = 248
$S6$ = 312
output$ = 356
$S7$ = 392
$S8$ = 452
$S9$ = 488
$S10$ = 536
$S11$ = 596
$S12$ = 632
__$ArrayPad$ = 1048
main	PROC						; COMDAT

; 281  : int main() {

$LN4:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 50 04
	00 00		 sub	 rsp, 1104		; 00000450H
  0000b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00010	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00015	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 18 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 282  : 
; 283  : 	COLLECTION myBucket = Bucket_List(int, 0, 1.0f, 2, 3, 4, 5);

  0003e	c6 85 b4 00 00
	00 00		 mov	 BYTE PTR $S4$[rbp], 0
  00045	c6 85 b5 00 00
	00 01		 mov	 BYTE PTR $S4$[rbp+1], 1
  0004c	c6 85 b6 00 00
	00 02		 mov	 BYTE PTR $S4$[rbp+2], 2
  00053	c6 85 b7 00 00
	00 03		 mov	 BYTE PTR $S4$[rbp+3], 3
  0005a	c6 85 b8 00 00
	00 04		 mov	 BYTE PTR $S4$[rbp+4], 4
  00061	c6 85 b9 00 00
	00 05		 mov	 BYTE PTR $S4$[rbp+5], 5
  00068	c6 85 ba 00 00
	00 01		 mov	 BYTE PTR $S4$[rbp+6], 1
  0006f	c6 85 94 00 00
	00 00		 mov	 BYTE PTR $S3$[rbp], 0
  00076	c6 85 95 00 00
	00 01		 mov	 BYTE PTR $S3$[rbp+1], 1
  0007d	c6 85 96 00 00
	00 02		 mov	 BYTE PTR $S3$[rbp+2], 2
  00084	c6 85 97 00 00
	00 03		 mov	 BYTE PTR $S3$[rbp+3], 3
  0008b	c6 85 98 00 00
	00 04		 mov	 BYTE PTR $S3$[rbp+4], 4
  00092	c6 85 99 00 00
	00 05		 mov	 BYTE PTR $S3$[rbp+5], 5
  00099	c6 85 9a 00 00
	00 00		 mov	 BYTE PTR $S3$[rbp+6], 0
  000a0	c7 45 68 00 00
	00 00		 mov	 DWORD PTR $S2$[rbp], 0
  000a7	c7 45 6c 01 00
	00 00		 mov	 DWORD PTR $S2$[rbp+4], 1
  000ae	c7 45 70 02 00
	00 00		 mov	 DWORD PTR $S2$[rbp+8], 2
  000b5	c7 45 74 03 00
	00 00		 mov	 DWORD PTR $S2$[rbp+12], 3
  000bc	c7 45 78 04 00
	00 00		 mov	 DWORD PTR $S2$[rbp+16], 4
  000c3	c7 45 7c 05 00
	00 00		 mov	 DWORD PTR $S2$[rbp+20], 5
  000ca	48 8d 45 28	 lea	 rax, QWORD PTR $S1$[rbp]
  000ce	48 8b f8	 mov	 rdi, rax
  000d1	33 c0		 xor	 eax, eax
  000d3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000d8	f3 aa		 rep stosb
  000da	48 8d 95 b4 00
	00 00		 lea	 rdx, QWORD PTR $S4$[rbp]
  000e1	48 8d 8d 94 00
	00 00		 lea	 rcx, QWORD PTR $S3$[rbp]
  000e8	e8 00 00 00 00	 call	 paramCount
  000ed	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000f1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000f9	4c 8d 4d 68	 lea	 r9, QWORD PTR $S2$[rbp]
  000fd	4c 8d 45 28	 lea	 r8, QWORD PTR $S1$[rbp]
  00101	ba 04 00 00 00	 mov	 edx, 4
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  0010d	e8 00 00 00 00	 call	 Bucket_ctor
  00112	48 89 45 08	 mov	 QWORD PTR myBucket$[rbp], rax

; 284  : 
; 285  : 	COLLECTION emptyBucket = Bucket_Empty(int, 6);

  00116	48 8d 85 38 01
	00 00		 lea	 rax, QWORD PTR $S6$[rbp]
  0011d	48 8b f8	 mov	 rdi, rax
  00120	33 c0		 xor	 eax, eax
  00122	b9 18 00 00 00	 mov	 ecx, 24
  00127	f3 aa		 rep stosb
  00129	48 8d 85 f8 00
	00 00		 lea	 rax, QWORD PTR $S5$[rbp]
  00130	48 8b f8	 mov	 rdi, rax
  00133	33 c0		 xor	 eax, eax
  00135	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0013a	f3 aa		 rep stosb
  0013c	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR [rsp+40], 6
  00144	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0014c	4c 8d 8d 38 01
	00 00		 lea	 r9, QWORD PTR $S6$[rbp]
  00153	4c 8d 85 f8 00
	00 00		 lea	 r8, QWORD PTR $S5$[rbp]
  0015a	ba 04 00 00 00	 mov	 edx, 4
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  00166	e8 00 00 00 00	 call	 Bucket_ctor
  0016b	48 89 85 d8 00
	00 00		 mov	 QWORD PTR emptyBucket$[rbp], rax

; 286  : 
; 287  : 	int output = 0;

  00172	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR output$[rbp], 0

; 288  : 	if (!Collection_Read(myBucket, &output, 3))

  0017c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00182	48 8d 95 64 01
	00 00		 lea	 rdx, QWORD PTR output$[rbp]
  00189	48 8b 4d 08	 mov	 rcx, QWORD PTR myBucket$[rbp]
  0018d	e8 00 00 00 00	 call	 Collection_Read
  00192	85 c0		 test	 eax, eax
  00194	75 0a		 jne	 SHORT $LN2@main

; 289  : 		return 1;

  00196	b8 01 00 00 00	 mov	 eax, 1
  0019b	e9 d6 00 00 00	 jmp	 $LN1@main
$LN2@main:

; 290  : 
; 291  : 	PREENT_ARGS("collection count of emptyBucket: %\n", fmt_i(Collection_Count(emptyBucket)));

  001a0	c7 85 88 01 00
	00 1c 00 00 00	 mov	 DWORD PTR $S7$[rbp], 28
  001aa	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR emptyBucket$[rbp]
  001b1	e8 00 00 00 00	 call	 Collection_Count
  001b6	89 85 c4 01 00
	00		 mov	 DWORD PTR $S8$[rbp], eax
  001bc	48 8d 85 c4 01
	00 00		 lea	 rax, QWORD PTR $S8$[rbp]
  001c3	48 89 85 90 01
	00 00		 mov	 QWORD PTR $S7$[rbp+8], rax
  001ca	c7 85 e8 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S9$[rbp], -2
  001d4	48 c7 85 f0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S9$[rbp+8], 0
  001df	48 8d 85 98 01
	00 00		 lea	 rax, QWORD PTR $S7$[rbp+16]
  001e6	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR $S9$[rbp]
  001ed	48 8b f8	 mov	 rdi, rax
  001f0	48 8b f1	 mov	 rsi, rcx
  001f3	b9 10 00 00 00	 mov	 ecx, 16
  001f8	f3 a4		 rep movsb
  001fa	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR $S7$[rbp]
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
  00208	e8 00 00 00 00	 call	 Preent

; 292  : 	PREENT_ARGS("value at index 3 of myBucket: %\n", fmt_i(output));

  0020d	c7 85 18 02 00
	00 1c 00 00 00	 mov	 DWORD PTR $S10$[rbp], 28
  00217	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR output$[rbp]
  0021d	89 85 54 02 00
	00		 mov	 DWORD PTR $S11$[rbp], eax
  00223	48 8d 85 54 02
	00 00		 lea	 rax, QWORD PTR $S11$[rbp]
  0022a	48 89 85 20 02
	00 00		 mov	 QWORD PTR $S10$[rbp+8], rax
  00231	c7 85 78 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S12$[rbp], -2
  0023b	48 c7 85 80 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S12$[rbp+8], 0
  00246	48 8d 85 28 02
	00 00		 lea	 rax, QWORD PTR $S10$[rbp+16]
  0024d	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $S12$[rbp]
  00254	48 8b f8	 mov	 rdi, rax
  00257	48 8b f1	 mov	 rsi, rcx
  0025a	b9 10 00 00 00	 mov	 ecx, 16
  0025f	f3 a4		 rep movsb
  00261	48 8d 95 18 02
	00 00		 lea	 rdx, QWORD PTR $S10$[rbp]
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
  0026f	e8 00 00 00 00	 call	 Preent

; 293  : 
; 294  : 	return 0;

  00274	33 c0		 xor	 eax, eax
$LN1@main:

; 295  : }

  00276	48 8b f8	 mov	 rdi, rax
  00279	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0027d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00284	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00289	48 8b c7	 mov	 rax, rdi
  0028c	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00293	48 33 cd	 xor	 rcx, rbp
  00296	e8 00 00 00 00	 call	 __security_check_cookie
  0029b	48 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1056]
  002a2	5f		 pop	 rdi
  002a3	5e		 pop	 rsi
  002a4	5d		 pop	 rbp
  002a5	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT barrelTest_VIEW_HEAP
_TEXT	SEGMENT
barrelTest_VIEW_HEAP PROC				; COMDAT

; 185  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 186  : 	//PREENT("bCount | vCount | offset | bStart | bRequests | flags\n");
; 187  : 	//
; 188  : 	//for (int i = 0; i < barrel_NodeCount(); i++)
; 189  : 	//{
; 190  : 	//	BarrelNode nextNode = *barrel_NodeLocation(i);
; 191  : 	//	PREENT_ARGS("[%]: % | % | % | % | % | % \n",
; 192  : 	//		fmt_I(i),
; 193  : 	//		fmt_I(nextNode._managed._collection._capacity),
; 194  : 	//		fmt_I(nextNode._managed._collection._count),
; 195  : 	//		fmt_I(nextNode._barrelOffset),
; 196  : 	//		fmt_I(nextNode._barrelStart),
; 197  : 	//		fmt_I(nextNode._requests),
; 198  : 	//		fmt_I(nextNode._flags));
; 199  : 	//}
; 200  : 	//
; 201  : 	//PREENT("\n[HEEP MAP]\n");
; 202  : 
; 203  : 	//for (int i = 0; i < 32; i++) {
; 204  : 	//	PREENT("|");
; 205  : 	//	for (int j = 0; j < 8; j++) {
; 206  : 	//		PREENT_ARGS("| % ", fmt_I(((int*)test_heapService->_heapStart)[(i * 8) + j]));
; 207  : 	//	}
; 208  : 	//
; 209  : 	//	PREENT("||\n");
; 210  : 	//}
; 211  : }

  0001b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
barrelTest_VIEW_HEAP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT barrelTest_RESIZE
_TEXT	SEGMENT
barrelTest_RESIZE PROC					; COMDAT

; 77   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 78   : 
; 79   : }

  0001b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
barrelTest_RESIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT barrelTest_REMOVE
_TEXT	SEGMENT
targetPtr$ = 8
input$ = 40
barrelTest_REMOVE PROC					; COMDAT

; 71   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 72   : 	int* targetPtr = NULL;

  0001b	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR targetPtr$[rbp], 0

; 73   : 	const char* input = NULL;

  00023	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR input$[rbp], 0

; 74   : }

  0002b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
barrelTest_REMOVE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT clear_screen
_TEXT	SEGMENT
clear_screen PROC					; COMDAT

; 40   : void clear_screen() { fill_screen(NULL); }

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	33 c9		 xor	 ecx, ecx
  0001d	e8 00 00 00 00	 call	 fill_screen
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
clear_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT fill_screen
_TEXT	SEGMENT
tl$ = 4
s$ = 40
console$ = 88
written$ = 116
cells$ = 148
tv77 = 356
__$ArrayPad$ = 360
fill$ = 400
fill_screen PROC					; COMDAT

; 29   : void fill_screen(char* fill) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00018	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 68 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   : 	COORD tl = { 0,0 };

  00049	33 c0		 xor	 eax, eax
  0004b	66 89 45 04	 mov	 WORD PTR tl$[rbp], ax
  0004f	33 c0		 xor	 eax, eax
  00051	66 89 45 06	 mov	 WORD PTR tl$[rbp+2], ax

; 31   : 	CONSOLE_SCREEN_BUFFER_INFO s;
; 32   : 	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);

  00055	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  00060	48 89 45 58	 mov	 QWORD PTR console$[rbp], rax

; 33   : 	GetConsoleScreenBufferInfo(console, &s);

  00064	48 8d 55 28	 lea	 rdx, QWORD PTR s$[rbp]
  00068	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo

; 34   : 	DWORD written, cells = s.dwSize.X * s.dwSize.Y;

  00072	0f bf 45 28	 movsx	 eax, WORD PTR s$[rbp]
  00076	0f bf 4d 2a	 movsx	 ecx, WORD PTR s$[rbp+2]
  0007a	0f af c1	 imul	 eax, ecx
  0007d	89 85 94 00 00
	00		 mov	 DWORD PTR cells$[rbp], eax

; 35   : 	FillConsoleOutputCharacter(console, fill == NULL ? ' ' : *fill, cells, tl, &written);

  00083	48 83 bd 90 01
	00 00 00	 cmp	 QWORD PTR fill$[rbp], 0
  0008b	75 0c		 jne	 SHORT $LN3@fill_scree
  0008d	c7 85 64 01 00
	00 20 00 00 00	 mov	 DWORD PTR tv77[rbp], 32	; 00000020H
  00097	eb 10		 jmp	 SHORT $LN4@fill_scree
$LN3@fill_scree:
  00099	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR fill$[rbp]
  000a0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a3	89 85 64 01 00
	00		 mov	 DWORD PTR tv77[rbp], eax
$LN4@fill_scree:
  000a9	48 8d 45 74	 lea	 rax, QWORD PTR written$[rbp]
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	44 8b 4d 04	 mov	 r9d, DWORD PTR tl$[rbp]
  000b6	44 8b 85 94 00
	00 00		 mov	 r8d, DWORD PTR cells$[rbp]
  000bd	0f b7 95 64 01
	00 00		 movzx	 edx, WORD PTR tv77[rbp]
  000c4	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputCharacterW

; 36   : 	FillConsoleOutputAttribute(console, s.wAttributes, cells, tl, &written);

  000ce	48 8d 45 74	 lea	 rax, QWORD PTR written$[rbp]
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	44 8b 4d 04	 mov	 r9d, DWORD PTR tl$[rbp]
  000db	44 8b 85 94 00
	00 00		 mov	 r8d, DWORD PTR cells$[rbp]
  000e2	0f b7 55 30	 movzx	 edx, WORD PTR s$[rbp+8]
  000e6	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputAttribute

; 37   : 	SetConsoleCursorPosition(console, tl);

  000f0	8b 55 04	 mov	 edx, DWORD PTR tl$[rbp]
  000f3	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorPosition

; 38   : }

  000fd	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:fill_screen$rtcFrameData
  00108	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010d	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00114	48 33 cd	 xor	 rcx, rbp
  00117	e8 00 00 00 00	 call	 __security_check_cookie
  0011c	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
fill_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT barrelTest_ESCAPE
_TEXT	SEGMENT
barrelTest_ESCAPE PROC					; COMDAT

; 25   : void barrelTest_ESCAPE() { ESCAPE = true; }

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ESCAPE, 1
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
barrelTest_ESCAPE ENDP
_TEXT	ENDS
END
