; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__EAE81D8C_tBucket@h DB 01H
__7D3AC404_tBucket@c DB 01H
msvcjmc	ENDS
PUBLIC	Bucket_Create
PUBLIC	Bucket_ctor
PUBLIC	Bucket_GetPtr
PUBLIC	Bucket_GetChunk
PUBLIC	Bucket_Capacity
PUBLIC	Bucket_Iterate
PUBLIC	Bucket_Manage
PUBLIC	Bucket_Info
PUBLIC	Bucket_Methods
PUBLIC	__JustMyCode_Default
EXTRN	rawTranscribe:PROC
EXTRN	TypeInfo_GetInfo:PROC
EXTRN	TypeInfo_Get:PROC
EXTRN	Chunk_Create:PROC
EXTRN	Chunk_ctor:PROC
EXTRN	Collection_Create:PROC
EXTRN	Collection_GetExtensions:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Create DD imagerel $LN9
	DD	imagerel $LN9+458
	DD	imagerel $unwind$Bucket_Create
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_ctor DD imagerel $LN3
	DD	imagerel $LN3+236
	DD	imagerel $unwind$Bucket_ctor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_GetPtr DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$Bucket_GetPtr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_GetChunk DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$Bucket_GetChunk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Capacity DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$Bucket_Capacity
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Iterate DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$Bucket_Iterate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Manage DD imagerel $LN8
	DD	imagerel $LN8+196
	DD	imagerel $unwind$Bucket_Manage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Info DD imagerel $LN10
	DD	imagerel $LN10+254
	DD	imagerel $unwind$Bucket_Info
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Bucket_Methods DD imagerel $LN9
	DD	imagerel $LN9+203
	DD	imagerel $unwind$Bucket_Methods
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Methods DD 025061401H
	DD	010f2314H
	DD	07008002eH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Info DD 025061401H
	DD	010f2314H
	DD	07008002eH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Manage DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Iterate DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Capacity DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_GetChunk DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_GetPtr DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	046H
	DB	0d2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_ctor DD 035064d19H
	DD	011e3323H
	DD	07017002eH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Bucket_ctor$rtcName$0 DB 074H
	DB	06dH
	DB	070H
	DB	042H
	DB	075H
	DB	063H
	DB	06bH
	DB	065H
	DB	074H
	DB	00H
	ORG $+6
Bucket_ctor$rtcVarDesc DD 038H
	DD	020H
	DQ	FLAT:Bucket_ctor$rtcName$0
	ORG $+48
Bucket_ctor$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Bucket_ctor$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Bucket_Create DD 025063c01H
	DD	011e2323H
	DD	070170040H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Bucket_Create$rtcName$0 DB 074H
	DB	06dH
	DB	070H
	DB	042H
	DB	075H
	DB	063H
	DB	06bH
	DB	065H
	DB	074H
	DB	00H
	ORG $+6
Bucket_Create$rtcVarDesc DD 088H
	DD	020H
	DQ	FLAT:Bucket_Create$rtcName$0
	ORG $+48
Bucket_Create$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Bucket_Create$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Methods
_TEXT	SEGMENT
$T1 = 208
$T2 = 256
$T3 = 304
tv65 = 324
request$ = 368
Bucket_Methods PROC					; COMDAT

; 200  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 201  : 	switch (request._type) {

  00020	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR request$[rbp]
  00027	8b 00		 mov	 eax, DWORD PTR [rax]
  00029	89 85 44 01 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  0002f	83 bd 44 01 00
	00 01		 cmp	 DWORD PTR tv65[rbp], 1
  00036	74 60		 je	 SHORT $LN6@Bucket_Met
  00038	83 bd 44 01 00
	00 04		 cmp	 DWORD PTR tv65[rbp], 4
  0003f	74 0b		 je	 SHORT $LN4@Bucket_Met
  00041	83 bd 44 01 00
	00 08		 cmp	 DWORD PTR tv65[rbp], 8
  00048	74 28		 je	 SHORT $LN5@Bucket_Met
  0004a	eb 72		 jmp	 SHORT $LN7@Bucket_Met
$LN4@Bucket_Met:

; 202  : 
; 203  : 	case INFO:
; 204  : 		return Bucket_Info(request);

  0004c	48 8d 85 d0 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00053	48 8b f8	 mov	 rdi, rax
  00056	48 8b b5 70 01
	00 00		 mov	 rsi, QWORD PTR request$[rbp]
  0005d	b9 10 00 00 00	 mov	 ecx, 16
  00062	f3 a4		 rep movsb
  00064	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0006b	e8 00 00 00 00	 call	 Bucket_Info
  00070	eb 4e		 jmp	 SHORT $LN1@Bucket_Met
$LN5@Bucket_Met:

; 205  : 
; 206  : 	//case TRANSCRIBE:
; 207  : 	//	return Bucket_Transcribe(request);
; 208  : 
; 209  : 	case MANAGE:
; 210  : 		return Bucket_Manage(request);

  00072	48 8d 85 00 01
	00 00		 lea	 rax, QWORD PTR $T2[rbp]
  00079	48 8b f8	 mov	 rdi, rax
  0007c	48 8b b5 70 01
	00 00		 mov	 rsi, QWORD PTR request$[rbp]
  00083	b9 10 00 00 00	 mov	 ecx, 16
  00088	f3 a4		 rep movsb
  0008a	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00091	e8 00 00 00 00	 call	 Bucket_Manage
  00096	eb 28		 jmp	 SHORT $LN1@Bucket_Met
$LN6@Bucket_Met:

; 211  : 
; 212  : 	case ITERATE:
; 213  : 		return Bucket_Iterate(request);

  00098	48 8d 85 30 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  0009f	48 8b f8	 mov	 rdi, rax
  000a2	48 8b b5 70 01
	00 00		 mov	 rsi, QWORD PTR request$[rbp]
  000a9	b9 10 00 00 00	 mov	 ecx, 16
  000ae	f3 a4		 rep movsb
  000b0	48 8d 8d 30 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000b7	e8 00 00 00 00	 call	 Bucket_Iterate
  000bc	eb 02		 jmp	 SHORT $LN1@Bucket_Met
$LN7@Bucket_Met:

; 214  : 
; 215  : 		//case LOCATION:
; 216  : 		//	return Bucket_Location(request);
; 217  : 		//
; 218  : 		//case SLICE_CREATE:
; 219  : 		//	return Bucket_Slice(*request);
; 220  : 		//
; 221  : 		//case MODIFY_DELTA_CAPACITY:
; 222  : 		//	return Bucket_Resize(*request);
; 223  : 		//
; 224  : 		//case TRANSCRIBE_RAW_TO_COLLECTION:
; 225  : 		//case TRANSCRIBE_COLLECTIONS:
; 226  : 		//	return Bucket_Write(*request);
; 227  : 		//
; 228  : 		//case TRANSCRIBE_COLLECTION_TO_RAW:
; 229  : 		//	return Bucket_Read(*request);
; 230  : 		//
; 231  : 		//case MODIFY_INSERT:
; 232  : 		//	return Bucket_Insert(*request);
; 233  : 		//
; 234  : 		//case MODIFY_REMOVE_FIRST_FOUND:
; 235  : 		//	return Bucket_Remove(*request);
; 236  : 		//
; 237  : 		//case MODIFY_REMOVE_AT:
; 238  : 		//	return Bucket_RemoveAt(*request);
; 239  : 		//
; 240  : 		//case ITERATE:
; 241  : 		//	return Bucket_Iterate(request);
; 242  : 
; 243  : 	default:
; 244  : 		return false;

  000be	33 c0		 xor	 eax, eax
$LN1@Bucket_Met:

; 245  : 	}
; 246  : }

  000c0	48 8d a5 50 01
	00 00		 lea	 rsp, QWORD PTR [rbp+336]
  000c7	5f		 pop	 rdi
  000c8	5e		 pop	 rsi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
Bucket_Methods ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Info
_TEXT	SEGMENT
bucket$ = 8
var$ = 36
output$ = 72
$T1 = 304
tv73 = 324
request$ = 368
Bucket_Info PROC					; COMDAT

; 173  : inline bool Bucket_Info(REQUEST request) {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  : 
; 175  : 	Bucket* bucket = request._params[tSRC];

  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 02	 imul	 rax, rax, 2
  00029	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00030	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00034	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00038	48 89 45 08	 mov	 QWORD PTR bucket$[rbp], rax

; 176  : 	ParamType var = (ParamType)request._params[tVARIANT];

  0003c	b8 08 00 00 00	 mov	 eax, 8
  00041	48 6b c0 00	 imul	 rax, rax, 0
  00045	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0004c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00050	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00053	89 45 24	 mov	 DWORD PTR var$[rbp], eax

; 177  : 	void* output = request._params[tTRG];

  00056	b8 08 00 00 00	 mov	 eax, 8
  0005b	48 6b c0 01	 imul	 rax, rax, 1
  0005f	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0006e	48 89 45 48	 mov	 QWORD PTR output$[rbp], rax

; 178  : 
; 179  : 	switch (var) {

  00072	8b 45 24	 mov	 eax, DWORD PTR var$[rbp]
  00075	89 85 44 01 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  0007b	83 bd 44 01 00
	00 06		 cmp	 DWORD PTR tv73[rbp], 6
  00082	74 47		 je	 SHORT $LN7@Bucket_Inf
  00084	83 bd 44 01 00
	00 07		 cmp	 DWORD PTR tv73[rbp], 7
  0008b	74 14		 je	 SHORT $LN4@Bucket_Inf
  0008d	83 bd 44 01 00
	00 08		 cmp	 DWORD PTR tv73[rbp], 8
  00094	74 1f		 je	 SHORT $LN5@Bucket_Inf
  00096	83 bd 44 01 00
	00 09		 cmp	 DWORD PTR tv73[rbp], 9
  0009d	74 2c		 je	 SHORT $LN6@Bucket_Inf
  0009f	eb 50		 jmp	 SHORT $LN8@Bucket_Inf
$LN4@Bucket_Inf:

; 180  : 
; 181  : 	case tCOUNT:
; 182  : 		*((uint*)output) = bucket->_collection._count;

  000a1	48 8b 45 48	 mov	 rax, QWORD PTR output$[rbp]
  000a5	48 8b 4d 08	 mov	 rcx, QWORD PTR bucket$[rbp]
  000a9	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  000ac	89 08		 mov	 DWORD PTR [rax], ecx

; 183  : 		return true;

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	eb 3e		 jmp	 SHORT $LN1@Bucket_Inf
$LN5@Bucket_Inf:

; 184  : 
; 185  : 	case tCAPACITY:
; 186  : 		*((uint*)output) = Bucket_Capacity(bucket);

  000b5	48 8b 4d 08	 mov	 rcx, QWORD PTR bucket$[rbp]
  000b9	e8 00 00 00 00	 call	 Bucket_Capacity
  000be	48 8b 4d 48	 mov	 rcx, QWORD PTR output$[rbp]
  000c2	89 01		 mov	 DWORD PTR [rcx], eax

; 187  : 		return true;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	eb 28		 jmp	 SHORT $LN1@Bucket_Inf
$LN6@Bucket_Inf:
$LN7@Bucket_Inf:

; 188  : 
; 189  : 	case tNAME:
; 190  : 	case tSIZE:
; 191  : 		return TypeInfo_GetInfo(request);

  000cb	48 8d 85 30 01
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  000d2	48 8b f8	 mov	 rdi, rax
  000d5	48 8b b5 70 01
	00 00		 mov	 rsi, QWORD PTR request$[rbp]
  000dc	b9 10 00 00 00	 mov	 ecx, 16
  000e1	f3 a4		 rep movsb
  000e3	48 8d 8d 30 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000ea	e8 00 00 00 00	 call	 TypeInfo_GetInfo
  000ef	eb 02		 jmp	 SHORT $LN1@Bucket_Inf
$LN8@Bucket_Inf:

; 192  : 
; 193  : 	default:
; 194  : 		return false;

  000f1	33 c0		 xor	 eax, eax
$LN1@Bucket_Inf:

; 195  : 	}
; 196  : 
; 197  : }

  000f3	48 8d a5 50 01
	00 00		 lea	 rsp, QWORD PTR [rbp+336]
  000fa	5f		 pop	 rdi
  000fb	5e		 pop	 rsi
  000fc	5d		 pop	 rbp
  000fd	c3		 ret	 0
Bucket_Info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Manage
_TEXT	SEGMENT
var$ = 4
bucket$ = 40
tv70 = 244
request$ = 288
Bucket_Manage PROC					; COMDAT

; 149  : inline bool Bucket_Manage(REQUEST request) {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 150  : 	ParamType var = (ParamType)request._params[tVARIANT];

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 00	 imul	 rax, rax, 0
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0002f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00033	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00036	89 45 04	 mov	 DWORD PTR var$[rbp], eax

; 151  : 	Bucket* bucket = request._params[tSRC];

  00039	b8 08 00 00 00	 mov	 eax, 8
  0003e	48 6b c0 02	 imul	 rax, rax, 2
  00042	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00049	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004d	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00051	48 89 45 28	 mov	 QWORD PTR bucket$[rbp], rax

; 152  : 	//void* output = request._params[1];
; 153  : 	
; 154  : 
; 155  : 	switch (var)

  00055	8b 45 04	 mov	 eax, DWORD PTR var$[rbp]
  00058	89 85 f4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  0005e	83 bd f4 00 00
	00 05		 cmp	 DWORD PTR tv70[rbp], 5
  00065	74 0b		 je	 SHORT $LN4@Bucket_Man
  00067	83 bd f4 00 00
	00 09		 cmp	 DWORD PTR tv70[rbp], 9
  0006e	74 41		 je	 SHORT $LN5@Bucket_Man
  00070	eb 46		 jmp	 SHORT $LN6@Bucket_Man
$LN4@Bucket_Man:

; 156  : 	{
; 157  : 	case tCHUNK:
; 158  : 		request._params[tSIZE] = 0;

  00072	b8 08 00 00 00	 mov	 eax, 8
  00077	48 6b c0 06	 imul	 rax, rax, 6
  0007b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00082	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00086	48 c7 04 08 00
	00 00 00	 mov	 QWORD PTR [rax+rcx], 0

; 159  : 		return Bucket_GetChunk(bucket, request._params[tTRG]);

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	48 6b c0 01	 imul	 rax, rax, 1
  00097	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0009e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000a6	48 8b 4d 28	 mov	 rcx, QWORD PTR bucket$[rbp]
  000aa	e8 00 00 00 00	 call	 Bucket_GetChunk
  000af	eb 09		 jmp	 SHORT $LN1@Bucket_Man
$LN5@Bucket_Man:

; 160  : 
; 161  : 	case tRELEASE:
; 162  : 		return true;

  000b1	b8 01 00 00 00	 mov	 eax, 1
  000b6	eb 02		 jmp	 SHORT $LN1@Bucket_Man
$LN6@Bucket_Man:

; 163  : 
; 164  : 	default:
; 165  : 		return false;

  000b8	33 c0		 xor	 eax, eax
$LN1@Bucket_Man:

; 166  : 	}
; 167  : }

  000ba	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000c1	5f		 pop	 rdi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
Bucket_Manage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Iterate
_TEXT	SEGMENT
bucket$ = 8
request$ = 256
Bucket_Iterate PROC					; COMDAT

; 142  : inline bool Bucket_Iterate(REQUEST request) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 143  : 	Bucket* bucket = request._params[tSRC];

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 02	 imul	 rax, rax, 2
  00028	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0002f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00033	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00037	48 89 45 08	 mov	 QWORD PTR bucket$[rbp], rax

; 144  : 	request._params[tTRG] = Bucket_GetPtr(bucket, request._params[Ix_TRG]);

  0003b	b8 08 00 00 00	 mov	 eax, 8
  00040	48 6b c0 03	 imul	 rax, rax, 3
  00044	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  0004b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004f	8b 14 01	 mov	 edx, DWORD PTR [rcx+rax]
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR bucket$[rbp]
  00056	e8 00 00 00 00	 call	 Bucket_GetPtr
  0005b	b9 08 00 00 00	 mov	 ecx, 8
  00060	48 6b c9 01	 imul	 rcx, rcx, 1
  00064	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR request$[rbp]
  0006b	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0006f	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 145  : 	((size_t)(request._params[Ix_TRG]))++;

  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 03	 imul	 rax, rax, 3
  0007c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR request$[rbp]
  00083	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00087	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0008b	48 ff c0	 inc	 rax
  0008e	b9 08 00 00 00	 mov	 ecx, 8
  00093	48 6b c9 03	 imul	 rcx, rcx, 3
  00097	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR request$[rbp]
  0009e	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000a2	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 146  : 	return true;

  000a6	b8 01 00 00 00	 mov	 eax, 1

; 147  : }

  000ab	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
Bucket_Iterate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Capacity
_TEXT	SEGMENT
tv71 = 192
bucket$ = 240
Bucket_Capacity PROC					; COMDAT

; 140  : uint Bucket_Capacity(Bucket* bucket) { return (bucket->_chunk._size) / bucket->_collection._extensions->_type->_size; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR bucket$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00033	33 d2		 xor	 edx, edx
  00035	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR bucket$[rbp]
  0003c	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00040	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00047	48 f7 71 08	 div	 QWORD PTR [rcx+8]
  0004b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
Bucket_Capacity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_GetChunk
_TEXT	SEGMENT
bucket$ = 224
loc$ = 232
Bucket_GetChunk PROC					; COMDAT

; 135  : bool Bucket_GetChunk(Bucket* bucket, Chunk* loc) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 136  : 	Chunk_ctor(loc, bucket->_chunk._head, bucket->_chunk._size);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR bucket$[rbp]
  0002b	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR bucket$[rbp]
  00036	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0003a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR loc$[rbp]
  00041	e8 00 00 00 00	 call	 Chunk_ctor

; 137  : 	return true;

  00046	b8 01 00 00 00	 mov	 eax, 1

; 138  : }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
Bucket_GetChunk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_GetPtr
_TEXT	SEGMENT
tv73 = 192
bucket$ = 240
index$ = 248
Bucket_GetPtr PROC					; COMDAT

; 5    : inline void* Bucket_GetPtr(Bucket* bucket, uint index) {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    : 	return index >= bucket->_collection._count ? NULL : (size_t)(bucket->_chunk._head) + (index * bucket->_collection._extensions->_type->_size);

  00023	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR bucket$[rbp]
  0002a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0002d	39 85 f8 00 00
	00		 cmp	 DWORD PTR index$[rbp], eax
  00033	72 0d		 jb	 SHORT $LN3@Bucket_Get
  00035	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv73[rbp], 0
  00040	eb 2a		 jmp	 SHORT $LN4@Bucket_Get
$LN3@Bucket_Get:
  00042	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR index$[rbp]
  00048	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR bucket$[rbp]
  0004f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 0f af 41 08	 imul	 rax, QWORD PTR [rcx+8]
  0005a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR bucket$[rbp]
  00061	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  00065	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
$LN4@Bucket_Get:
  0006c	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]

; 7    : }

  00073	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
Bucket_GetPtr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_ctor
_TEXT	SEGMENT
tmpBucket$ = 8
$T4 = 264
__$ArrayPad$ = 312
name$ = 352
unitSize$ = 360
loc$ = 368
head$ = 376
memFlags$ = 384
capacity$ = 392
Bucket_ctor PROC					; COMDAT

; 270  : COLLECTION Bucket_ctor(const char* name, size_t unitSize, void* loc, void* head, int memFlags, uint capacity) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00028	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00043	48 33 c5	 xor	 rax, rbp
  00046	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  00054	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 271  : 
; 272  : 	Bucket tmpBucket = Bucket_Create(name, unitSize, head, memFlags, capacity);

  00059	8b 85 88 01 00
	00		 mov	 eax, DWORD PTR capacity$[rbp]
  0005f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00063	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  00069	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0006d	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR head$[rbp]
  00074	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR unitSize$[rbp]
  0007b	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR name$[rbp]
  00082	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00089	e8 00 00 00 00	 call	 Bucket_Create
  0008e	48 8d 4d 08	 lea	 rcx, QWORD PTR tmpBucket$[rbp]
  00092	48 8b f9	 mov	 rdi, rcx
  00095	48 8b f0	 mov	 rsi, rax
  00098	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009d	f3 a4		 rep movsb

; 273  : 	rawTranscribe(loc, &tmpBucket, sizeof(Bucket));

  0009f	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  000a5	48 8d 55 08	 lea	 rdx, QWORD PTR tmpBucket$[rbp]
  000a9	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR loc$[rbp]
  000b0	e8 00 00 00 00	 call	 rawTranscribe

; 274  : 	return loc;

  000b5	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR loc$[rbp]

; 275  : }

  000bc	48 8b f8	 mov	 rdi, rax
  000bf	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Bucket_ctor$rtcFrameData
  000ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000cf	48 8b c7	 mov	 rax, rdi
  000d2	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d9	48 33 cd	 xor	 rcx, rbp
  000dc	e8 00 00 00 00	 call	 __security_check_cookie
  000e1	48 8d a5 40 01
	00 00		 lea	 rsp, QWORD PTR [rbp+320]
  000e8	5f		 pop	 rdi
  000e9	5e		 pop	 rsi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
Bucket_ctor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tBucket.c
;	COMDAT Bucket_Create
_TEXT	SEGMENT
info$ = 8
empty$ = 36
fill$ = 68
i$4 = 164
$T5 = 392
$T6 = 440
tv74 = 468
__$ReturnAddress$ = 512
name$ = 520
unitSize$ = 528
head$ = 536
memFlags$ = 544
capacity$ = 552
Bucket_Create PROC					; COMDAT

; 248  : Bucket Bucket_Create(const char* name, size_t unitSize, void* head, int memFlags, uint capacity) {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00028	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7D3AC404_tBucket@c
  00043	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 249  : 	
; 250  : 	TypeInfo* info = TypeInfo_Get(name, unitSize);

  00048	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR unitSize$[rbp]
  0004f	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR name$[rbp]
  00056	e8 00 00 00 00	 call	 TypeInfo_Get
  0005b	48 89 45 08	 mov	 QWORD PTR info$[rbp], rax

; 251  : 	
; 252  : 	bool empty = memFlags & EMPTY;

  0005f	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  00065	83 e0 20	 and	 eax, 32			; 00000020H
  00068	89 45 24	 mov	 DWORD PTR empty$[rbp], eax

; 253  : 	bool fill = memFlags & FILL;

  0006b	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  00071	83 e0 40	 and	 eax, 64			; 00000040H
  00074	89 45 44	 mov	 DWORD PTR fill$[rbp], eax

; 254  : 	memFlags &= !(EMPTY);

  00077	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  0007d	83 e0 00	 and	 eax, 0
  00080	89 85 20 02 00
	00		 mov	 DWORD PTR memFlags$[rbp], eax

; 255  : 	memFlags &= !(FILL);

  00086	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  0008c	83 e0 00	 and	 eax, 0
  0008f	89 85 20 02 00
	00		 mov	 DWORD PTR memFlags$[rbp], eax

; 256  : 	memFlags |= FIXED_SIZE;

  00095	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR memFlags$[rbp]
  0009b	83 c8 02	 or	 eax, 2
  0009e	89 85 20 02 00
	00		 mov	 DWORD PTR memFlags$[rbp], eax

; 257  : 
; 258  : 	Bucket tmpBucket = {

  000a4	83 7d 24 00	 cmp	 DWORD PTR empty$[rbp], 0
  000a8	74 0c		 je	 SHORT $LN7@Bucket_Cre
  000aa	c7 85 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
  000b4	eb 0c		 jmp	 SHORT $LN8@Bucket_Cre
$LN7@Bucket_Cre:
  000b6	8b 85 28 02 00
	00		 mov	 eax, DWORD PTR capacity$[rbp]
  000bc	89 85 d4 01 00
	00		 mov	 DWORD PTR tv74[rbp], eax
$LN8@Bucket_Cre:
  000c2	44 8b 85 20 02
	00 00		 mov	 r8d, DWORD PTR memFlags$[rbp]
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Bucket_Methods
  000d0	48 8b 4d 08	 mov	 rcx, QWORD PTR info$[rbp]
  000d4	e8 00 00 00 00	 call	 Collection_GetExtensions
  000d9	44 8b 85 d4 01
	00 00		 mov	 r8d, DWORD PTR tv74[rbp]
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ea	e8 00 00 00 00	 call	 Collection_Create
  000ef	48 8b bd 00 02
	00 00		 mov	 rdi, QWORD PTR __$ReturnAddress$[rbp]
  000f6	48 8b f0	 mov	 rsi, rax
  000f9	b9 10 00 00 00	 mov	 ecx, 16
  000fe	f3 a4		 rep movsb
  00100	8b 85 28 02 00
	00		 mov	 eax, DWORD PTR capacity$[rbp]
  00106	48 8b 4d 08	 mov	 rcx, QWORD PTR info$[rbp]
  0010a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0010e	48 0f af c8	 imul	 rcx, rax
  00112	48 8b c1	 mov	 rax, rcx
  00115	4c 8b c0	 mov	 r8, rax
  00118	48 8b 95 18 02
	00 00		 mov	 rdx, QWORD PTR head$[rbp]
  0011f	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00126	e8 00 00 00 00	 call	 Chunk_Create
  0012b	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnAddress$[rbp]
  00132	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00136	48 8b f0	 mov	 rsi, rax
  00139	b9 10 00 00 00	 mov	 ecx, 16
  0013e	f3 a4		 rep movsb

; 259  : 		Collection_Create(Collection_GetExtensions(info, Bucket_Methods, memFlags), empty ? 0 : capacity),
; 260  : 		Chunk_Create(head, info->_size * capacity)
; 261  : 	};
; 262  : 
; 263  : 	if (fill)

  00140	83 7d 44 00	 cmp	 DWORD PTR fill$[rbp], 0
  00144	74 5c		 je	 SHORT $LN5@Bucket_Cre

; 264  : 		for (int i = 1; i < capacity; i++)

  00146	c7 85 a4 00 00
	00 01 00 00 00	 mov	 DWORD PTR i$4[rbp], 1
  00150	eb 0e		 jmp	 SHORT $LN4@Bucket_Cre
$LN2@Bucket_Cre:
  00152	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00158	ff c0		 inc	 eax
  0015a	89 85 a4 00 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@Bucket_Cre:
  00160	8b 85 28 02 00
	00		 mov	 eax, DWORD PTR capacity$[rbp]
  00166	39 85 a4 00 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  0016c	73 34		 jae	 SHORT $LN3@Bucket_Cre

; 265  : 			rawTranscribe(&((char*)head)[i * unitSize], head, unitSize);

  0016e	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$4[rbp]
  00175	48 0f af 85 10
	02 00 00	 imul	 rax, QWORD PTR unitSize$[rbp]
  0017d	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR head$[rbp]
  00184	48 03 c8	 add	 rcx, rax
  00187	48 8b c1	 mov	 rax, rcx
  0018a	4c 8b 85 10 02
	00 00		 mov	 r8, QWORD PTR unitSize$[rbp]
  00191	48 8b 95 18 02
	00 00		 mov	 rdx, QWORD PTR head$[rbp]
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 rawTranscribe
  001a0	eb b0		 jmp	 SHORT $LN2@Bucket_Cre
$LN3@Bucket_Cre:
$LN5@Bucket_Cre:

; 266  : 
; 267  : 	return tmpBucket;

  001a2	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR __$ReturnAddress$[rbp]

; 268  : }

  001a9	48 8b f8	 mov	 rdi, rax
  001ac	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Bucket_Create$rtcFrameData
  001b7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001bc	48 8b c7	 mov	 rax, rdi
  001bf	48 8d a5 e0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+480]
  001c6	5f		 pop	 rdi
  001c7	5e		 pop	 rsi
  001c8	5d		 pop	 rbp
  001c9	c3		 ret	 0
Bucket_Create ENDP
_TEXT	ENDS
END
