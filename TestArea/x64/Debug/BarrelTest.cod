; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	barrelTest_ESCAPE
PUBLIC	clear_screen
PUBLIC	barrelTest_NEW
PUBLIC	barrelTest_REMOVE
PUBLIC	barrelTest_RESIZE
PUBLIC	barrelTest_WRITE
PUBLIC	barrelTest_READ
PUBLIC	barrelTest_VIEW_HEAP
PUBLIC	ESCAPE
PUBLIC	escapeAction
PUBLIC	??_C@_06OIGFGPHJ@Escape@			; `string'
PUBLIC	mainMenuActionCount
PUBLIC	mainMenuActions
PUBLIC	??_C@_0N@GKKFFGGN@Quit?5Program@		; `string'
PUBLIC	??_C@_0P@CPFOBCCD@New?5Collection@		; `string'
PUBLIC	??_C@_0BC@EGJKACHO@Remove?5Collection@		; `string'
PUBLIC	??_C@_0BD@DGEAJMED@Re?9size?5Collection@	; `string'
PUBLIC	??_C@_0BN@IBOFOPMI@Read?5from?5Collection?5to?5span@ ; `string'
PUBLIC	??_C@_0BO@MPDCLNBC@Write?5to?5Collection?5from?5span@ ; `string'
PUBLIC	??_C@_0BB@DMJKMIHM@View?5entire?5heap@		; `string'
PUBLIC	??_C@_0N@EDMEMMAC@Clear?5Screen@		; `string'
_DATA	SEGMENT
COMM	ThreadHandle_TypeID:BYTE:018H
COMM	barrelService_ThreadBin:BYTE:0100H
COMM	barrelService_QueBin:BYTE:0200H
_DATA	ENDS
_BSS	SEGMENT
ESCAPE	DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__03948348_tThreads@h DB 01H
__978ECD68_tServices@h DB 01H
__FEADC134_tHeap@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__CE367354_tBarrel@h DB 01H
__A75EC172_BarrelTest@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0N@EDMEMMAC@Clear?5Screen@
CONST	SEGMENT
??_C@_0N@EDMEMMAC@Clear?5Screen@ DB 'Clear Screen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMJKMIHM@View?5entire?5heap@
CONST	SEGMENT
??_C@_0BB@DMJKMIHM@View?5entire?5heap@ DB 'View entire heap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MPDCLNBC@Write?5to?5Collection?5from?5span@
CONST	SEGMENT
??_C@_0BO@MPDCLNBC@Write?5to?5Collection?5from?5span@ DB 'Write to Collec'
	DB	'tion from span', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IBOFOPMI@Read?5from?5Collection?5to?5span@
CONST	SEGMENT
??_C@_0BN@IBOFOPMI@Read?5from?5Collection?5to?5span@ DB 'Read from Collec'
	DB	'tion to span', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DGEAJMED@Re?9size?5Collection@
CONST	SEGMENT
??_C@_0BD@DGEAJMED@Re?9size?5Collection@ DB 'Re-size Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EGJKACHO@Remove?5Collection@
CONST	SEGMENT
??_C@_0BC@EGJKACHO@Remove?5Collection@ DB 'Remove Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CPFOBCCD@New?5Collection@
CONST	SEGMENT
??_C@_0P@CPFOBCCD@New?5Collection@ DB 'New Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKKFFGGN@Quit?5Program@
CONST	SEGMENT
??_C@_0N@GKKFFGGN@Quit?5Program@ DB 'Quit Program', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGFGPHJ@Escape@
CONST	SEGMENT
??_C@_06OIGFGPHJ@Escape@ DB 'Escape', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
escapeAction DB	071H
	ORG $+7
	DQ	FLAT:??_C@_06OIGFGPHJ@Escape@
	DQ	FLAT:barrelTest_ESCAPE
mainMenuActionCount DD 08H
	ORG $+4
mainMenuActions DB 071H
	ORG $+7
	DQ	FLAT:??_C@_0N@GKKFFGGN@Quit?5Program@
	DQ	FLAT:barrelTest_ESCAPE
	DB	06eH
	ORG $+7
	DQ	FLAT:??_C@_0P@CPFOBCCD@New?5Collection@
	DQ	FLAT:barrelTest_NEW
	DB	06dH
	ORG $+7
	DQ	FLAT:??_C@_0BC@EGJKACHO@Remove?5Collection@
	DQ	FLAT:barrelTest_REMOVE
	DB	073H
	ORG $+7
	DQ	FLAT:??_C@_0BD@DGEAJMED@Re?9size?5Collection@
	DQ	FLAT:barrelTest_RESIZE
	DB	072H
	ORG $+7
	DQ	FLAT:??_C@_0BN@IBOFOPMI@Read?5from?5Collection?5to?5span@
	DQ	FLAT:barrelTest_READ
	DB	077H
	ORG $+7
	DQ	FLAT:??_C@_0BO@MPDCLNBC@Write?5to?5Collection?5from?5span@
	DQ	FLAT:barrelTest_WRITE
	DB	076H
	ORG $+7
	DQ	FLAT:??_C@_0BB@DMJKMIHM@View?5entire?5heap@
	DQ	FLAT:barrelTest_VIEW_HEAP
	DB	063H
	ORG $+7
	DQ	FLAT:??_C@_0N@EDMEMMAC@Clear?5Screen@
	DQ	FLAT:clear_screen
_DATA	ENDS
PUBLIC	fill_screen
PUBLIC	barrel_INPUT
PUBLIC	barrelTest_MAIN
PUBLIC	barrelTest
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BN@NNPMGJLD@No?5Collections?5to?5write?5to?$CB?6@ ; `string'
PUBLIC	??_C@_0CB@KFMIOBLL@At?5any?5time?0?5enter?5?8q?8?5to?5leave@ ; `string'
PUBLIC	??_C@_03PFCPDLAL@?$CF?3?5@			; `string'
PUBLIC	??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@ ; `string'
PUBLIC	??_C@_0BI@NAKPOAPG@Choose?5Initial?5Capacity@	; `string'
PUBLIC	??_C@_0CJ@LBAGAEEG@Bad?5Capacity?$CB?5Must?5be?5greater?5t@ ; `string'
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_0P@MKMACOIF@Node?5created?$CB?6@		; `string'
PUBLIC	??_C@_0BI@FPHOOKPN@Node?5failed?5to?5create?$CB?6@ ; `string'
PUBLIC	??_C@_0L@CCENBCPK@Set?5Target@			; `string'
PUBLIC	??_C@_08MBLPAJHO@New?5Size@			; `string'
PUBLIC	??_C@_0CA@FDPDEPPO@New?5size?5must?5be?50?5or?5greater?$CB?6@ ; `string'
PUBLIC	??_C@_0M@JFAILKBP@Start?5Index@			; `string'
PUBLIC	??_C@_0M@OEPBPCND@Delta?5Count@			; `string'
PUBLIC	??_C@_0CA@EDDDOMAH@Input?5new?5param?5?$CI?$CF?5remaining?$CJ?3?5@ ; `string'
PUBLIC	??_C@_0BB@HBOOCOPG@Write?5Complete?$CB?6@	; `string'
PUBLIC	??_C@_07DAMOKBIM@?$FL?$CF?$FN?3?5?$CF?6@	; `string'
PUBLIC	??_C@_0CE@GDIPAECF@bCount?5?$HM?5vCount?5?$HM?5offset?5?$HM?5bSta@ ; `string'
PUBLIC	??_C@_0BE@KPHCKKED@?$FL?$CF?$FN?3?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?6@ ; `string'
PUBLIC	??_C@_0N@BOGIKLIF@?6?$FLHEEP?5MAP?$FN?6@	; `string'
PUBLIC	??_C@_01DNKMNLPK@?$HM@				; `string'
PUBLIC	??_C@_04OMPAKLL@?$HM?5?$CF?5@			; `string'
PUBLIC	??_C@_03FIFGEGHJ@?$HM?$HM?6@			; `string'
PUBLIC	??_C@_0BM@LDAEMDFJ@?$FL?5Total?5Current?5Nodes?3?5?$CF?5?$FN?6@ ; `string'
PUBLIC	??_C@_08EAMDPNID@?$FL?$CF?$FN?5?9?5?$CF?6@	; `string'
PUBLIC	??_C@_0BE@CICDCNDN@Barrel?5Testing?4?4?4?6?6@	; `string'
PUBLIC	??_C@_0BL@CGFOLKEE@Services?5failed?5to?5start?$CB?6@ ; `string'
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_FillConsoleOutputCharacterW:PROC
EXTRN	__imp_FillConsoleOutputAttribute:PROC
EXTRN	__imp_GetConsoleScreenBufferInfo:PROC
EXTRN	__imp_SetConsoleCursorPosition:PROC
EXTRN	strToInt:PROC
EXTRN	Preent:PROC
EXTRN	Geet:PROC
EXTRN	CreateRequest:PROC
EXTRN	Heap_Head:PROC
EXTRN	Barrel_GetNode:PROC
EXTRN	Barrel_GetUnitPtr:PROC
EXTRN	Barrel_NodeCount:PROC
EXTRN	Barrel_ServiceInit:PROC
EXTRN	Barrel_ctor:PROC
EXTRN	Collection_Resize:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_ESCAPE DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$barrelTest_ESCAPE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_screen DD imagerel $LN5
	DD	imagerel $LN5+294
	DD	imagerel $unwind$fill_screen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_screen DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$clear_screen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrel_INPUT DD imagerel $LN8
	DD	imagerel $LN8+505
	DD	imagerel $unwind$barrel_INPUT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_NEW DD imagerel $LN7
	DD	imagerel $LN7+626
	DD	imagerel $unwind$barrelTest_NEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_REMOVE DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$barrelTest_REMOVE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_RESIZE DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$barrelTest_RESIZE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_WRITE DD imagerel $LN13
	DD	imagerel $LN13+617
	DD	imagerel $unwind$barrelTest_WRITE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_READ DD imagerel $LN13
	DD	imagerel $LN13+601
	DD	imagerel $unwind$barrelTest_READ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_VIEW_HEAP DD imagerel $LN12
	DD	imagerel $LN12+672
	DD	imagerel $unwind$barrelTest_VIEW_HEAP
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest_MAIN DD imagerel $LN12
	DD	imagerel $LN12+538
	DD	imagerel $unwind$barrelTest_MAIN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$barrelTest DD imagerel $LN4
	DD	imagerel $LN4+150
	DD	imagerel $unwind$barrelTest
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BL@CGFOLKEE@Services?5failed?5to?5start?$CB?6@
CONST	SEGMENT
??_C@_0BL@CGFOLKEE@Services?5failed?5to?5start?$CB?6@ DB 'Services failed'
	DB	' to start!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CICDCNDN@Barrel?5Testing?4?4?4?6?6@
CONST	SEGMENT
??_C@_0BE@CICDCNDN@Barrel?5Testing?4?4?4?6?6@ DB 'Barrel Testing...', 0aH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMDPNID@?$FL?$CF?$FN?5?9?5?$CF?6@
CONST	SEGMENT
??_C@_08EAMDPNID@?$FL?$CF?$FN?5?9?5?$CF?6@ DB '[%] - %', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LDAEMDFJ@?$FL?5Total?5Current?5Nodes?3?5?$CF?5?$FN?6@
CONST	SEGMENT
??_C@_0BM@LDAEMDFJ@?$FL?5Total?5Current?5Nodes?3?5?$CF?5?$FN?6@ DB '[ Tot'
	DB	'al Current Nodes: % ]', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FIFGEGHJ@?$HM?$HM?6@
CONST	SEGMENT
??_C@_03FIFGEGHJ@?$HM?$HM?6@ DB '||', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMPAKLL@?$HM?5?$CF?5@
CONST	SEGMENT
??_C@_04OMPAKLL@?$HM?5?$CF?5@ DB '| % ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM@ DB '|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOGIKLIF@?6?$FLHEEP?5MAP?$FN?6@
CONST	SEGMENT
??_C@_0N@BOGIKLIF@?6?$FLHEEP?5MAP?$FN?6@ DB 0aH, '[HEEP MAP]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KPHCKKED@?$FL?$CF?$FN?3?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?6@
CONST	SEGMENT
??_C@_0BE@KPHCKKED@?$FL?$CF?$FN?3?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?6@ DB '['
	DB	'%]: % | % | % | %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GDIPAECF@bCount?5?$HM?5vCount?5?$HM?5offset?5?$HM?5bSta@
CONST	SEGMENT
??_C@_0CE@GDIPAECF@bCount?5?$HM?5vCount?5?$HM?5offset?5?$HM?5bSta@ DB 'bC'
	DB	'ount | vCount | offset | bStart ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DAMOKBIM@?$FL?$CF?$FN?3?5?$CF?6@
CONST	SEGMENT
??_C@_07DAMOKBIM@?$FL?$CF?$FN?3?5?$CF?6@ DB '[%]: %', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HBOOCOPG@Write?5Complete?$CB?6@
CONST	SEGMENT
??_C@_0BB@HBOOCOPG@Write?5Complete?$CB?6@ DB 'Write Complete!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EDDDOMAH@Input?5new?5param?5?$CI?$CF?5remaining?$CJ?3?5@
CONST	SEGMENT
??_C@_0CA@EDDDOMAH@Input?5new?5param?5?$CI?$CF?5remaining?$CJ?3?5@ DB 'In'
	DB	'put new param (% remaining): ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEPBPCND@Delta?5Count@
CONST	SEGMENT
??_C@_0M@OEPBPCND@Delta?5Count@ DB 'Delta Count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JFAILKBP@Start?5Index@
CONST	SEGMENT
??_C@_0M@JFAILKBP@Start?5Index@ DB 'Start Index', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FDPDEPPO@New?5size?5must?5be?50?5or?5greater?$CB?6@
CONST	SEGMENT
??_C@_0CA@FDPDEPPO@New?5size?5must?5be?50?5or?5greater?$CB?6@ DB 'New siz'
	DB	'e must be 0 or greater!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBLPAJHO@New?5Size@
CONST	SEGMENT
??_C@_08MBLPAJHO@New?5Size@ DB 'New Size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CCENBCPK@Set?5Target@
CONST	SEGMENT
??_C@_0L@CCENBCPK@Set?5Target@ DB 'Set Target', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FPHOOKPN@Node?5failed?5to?5create?$CB?6@
CONST	SEGMENT
??_C@_0BI@FPHOOKPN@Node?5failed?5to?5create?$CB?6@ DB 'Node failed to cre'
	DB	'ate!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MKMACOIF@Node?5created?$CB?6@
CONST	SEGMENT
??_C@_0P@MKMACOIF@Node?5created?$CB?6@ DB 'Node created!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LBAGAEEG@Bad?5Capacity?$CB?5Must?5be?5greater?5t@
CONST	SEGMENT
??_C@_0CJ@LBAGAEEG@Bad?5Capacity?$CB?5Must?5be?5greater?5t@ DB 'Bad Capac'
	DB	'ity! Must be greater than 0: %', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NAKPOAPG@Choose?5Initial?5Capacity@
CONST	SEGMENT
??_C@_0BI@NAKPOAPG@Choose?5Initial?5Capacity@ DB 'Choose Initial Capacity'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@
CONST	SEGMENT
??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@ DB 'Bad index'
	DB	'! Between 0 and %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFCPDLAL@?$CF?3?5@
CONST	SEGMENT
??_C@_03PFCPDLAL@?$CF?3?5@ DB '%: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KFMIOBLL@At?5any?5time?0?5enter?5?8q?8?5to?5leave@
CONST	SEGMENT
??_C@_0CB@KFMIOBLL@At?5any?5time?0?5enter?5?8q?8?5to?5leave@ DB 'At any t'
	DB	'ime, enter ''q'' to leave', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NNPMGJLD@No?5Collections?5to?5write?5to?$CB?6@
CONST	SEGMENT
??_C@_0BN@NNPMGJLD@No?5Collections?5to?5write?5to?$CB?6@ DB 'No Collectio'
	DB	'ns to write to!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
	DB	07dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest DD 025053119H
	DD	010a230fH
	DD	070030025H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest$rtcName$0 DB 024H
	DB	053H
	DB	035H
	DB	037H
	DB	00H
	ORG $+3
barrelTest$rtcName$1 DB 024H
	DB	053H
	DB	035H
	DB	038H
	DB	00H
	ORG $+3
barrelTest$rtcVarDesc DD 048H
	DD	00H
	DQ	FLAT:barrelTest$rtcName$1
	DD	028H
	DD	00H
	DQ	FLAT:barrelTest$rtcName$0
	ORG $+96
barrelTest$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:barrelTest$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0200H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_MAIN DD 025063219H
	DD	010b2310H
	DD	07004004eH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0268H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_MAIN$rtcName$0 DB 024H
	DB	053H
	DB	035H
	DB	031H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcName$1 DB 024H
	DB	053H
	DB	035H
	DB	032H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcName$2 DB 024H
	DB	053H
	DB	035H
	DB	033H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcName$3 DB 024H
	DB	053H
	DB	035H
	DB	034H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcName$4 DB 024H
	DB	053H
	DB	035H
	DB	035H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcName$5 DB 024H
	DB	053H
	DB	035H
	DB	036H
	DB	00H
	ORG $+3
barrelTest_MAIN$rtcVarDesc DD 0168H
	DD	010H
	DQ	FLAT:barrelTest_MAIN$rtcName$5
	DD	0144H
	DD	01H
	DQ	FLAT:barrelTest_MAIN$rtcName$4
	DD	0f8H
	DD	030H
	DQ	FLAT:barrelTest_MAIN$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:barrelTest_MAIN$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:barrelTest_MAIN$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:barrelTest_MAIN$rtcName$0
	ORG $+288
barrelTest_MAIN$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:barrelTest_MAIN$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0286H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_VIEW_HEAP DD 025063219H
	DD	010b2310H
	DD	070040090H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0478H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_VIEW_HEAP$rtcName$0 DB 024H
	DB	053H
	DB	033H
	DB	037H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$1 DB 024H
	DB	053H
	DB	033H
	DB	038H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$2 DB 024H
	DB	053H
	DB	033H
	DB	039H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$3 DB 024H
	DB	053H
	DB	034H
	DB	030H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$4 DB 024H
	DB	053H
	DB	034H
	DB	031H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$5 DB 024H
	DB	053H
	DB	034H
	DB	032H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$6 DB 024H
	DB	053H
	DB	034H
	DB	033H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$7 DB 024H
	DB	053H
	DB	034H
	DB	034H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$8 DB 024H
	DB	053H
	DB	034H
	DB	035H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$9 DB 024H
	DB	053H
	DB	034H
	DB	036H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$10 DB 024H
	DB	053H
	DB	034H
	DB	037H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$11 DB 024H
	DB	053H
	DB	034H
	DB	038H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$12 DB 024H
	DB	053H
	DB	034H
	DB	039H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcName$13 DB 024H
	DB	053H
	DB	035H
	DB	030H
	DB	00H
	ORG $+3
barrelTest_VIEW_HEAP$rtcVarDesc DD 02e8H
	DD	00H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$13
	DD	02b8H
	DD	010H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$12
	DD	0294H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$11
	DD	0258H
	DD	020H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$10
	DD	0218H
	DD	00H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$9
	DD	01d8H
	DD	00H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$8
	DD	01a8H
	DD	010H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$7
	DD	0184H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$6
	DD	0164H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$5
	DD	0144H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$4
	DD	0124H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$3
	DD	0104H
	DD	04H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$2
	DD	090H
	DD	060H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$1
	DD	028H
	DD	00H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcName$0
	ORG $+672
barrelTest_VIEW_HEAP$rtcFrameData DD 0eH
	DD	00H
	DQ	FLAT:barrelTest_VIEW_HEAP$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	023fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_READ DD 025063219H
	DD	010b2310H
	DD	07004007aH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	03c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_READ$rtcName$0 DB 069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	00H
	ORG $+2
barrelTest_READ$rtcName$1 DB 073H
	DB	074H
	DB	061H
	DB	072H
	DB	074H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	00H
	ORG $+1
barrelTest_READ$rtcName$2 DB 064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
barrelTest_READ$rtcName$3 DB 024H
	DB	053H
	DB	033H
	DB	030H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$4 DB 024H
	DB	053H
	DB	033H
	DB	031H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$5 DB 024H
	DB	053H
	DB	033H
	DB	032H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$6 DB 024H
	DB	053H
	DB	033H
	DB	033H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$7 DB 024H
	DB	053H
	DB	033H
	DB	034H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$8 DB 024H
	DB	053H
	DB	033H
	DB	035H
	DB	00H
	ORG $+3
barrelTest_READ$rtcName$9 DB 024H
	DB	053H
	DB	033H
	DB	036H
	DB	00H
	ORG $+15
barrelTest_READ$rtcVarDesc DD 0228H
	DD	010H
	DQ	FLAT:barrelTest_READ$rtcName$9
	DD	0204H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$8
	DD	01e4H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$7
	DD	0198H
	DD	030H
	DQ	FLAT:barrelTest_READ$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:barrelTest_READ$rtcName$5
	DD	0e4H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$4
	DD	0a8H
	DD	020H
	DQ	FLAT:barrelTest_READ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:barrelTest_READ$rtcName$0
	ORG $+480
barrelTest_READ$rtcFrameData DD 0aH
	DD	00H
	DQ	FLAT:barrelTest_READ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	024fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_WRITE DD 025063219H
	DD	010b2310H
	DD	070040078H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	03b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_WRITE$rtcName$0 DB 069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	00H
	ORG $+2
barrelTest_WRITE$rtcName$1 DB 073H
	DB	074H
	DB	061H
	DB	072H
	DB	074H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	00H
	ORG $+1
barrelTest_WRITE$rtcName$2 DB 064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
barrelTest_WRITE$rtcName$3 DB 024H
	DB	053H
	DB	032H
	DB	033H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$4 DB 024H
	DB	053H
	DB	032H
	DB	034H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$5 DB 024H
	DB	053H
	DB	032H
	DB	035H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$6 DB 024H
	DB	053H
	DB	032H
	DB	036H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$7 DB 024H
	DB	053H
	DB	032H
	DB	037H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$8 DB 024H
	DB	053H
	DB	032H
	DB	038H
	DB	00H
	ORG $+3
barrelTest_WRITE$rtcName$9 DB 024H
	DB	053H
	DB	032H
	DB	039H
	DB	00H
	ORG $+15
barrelTest_WRITE$rtcVarDesc DD 0228H
	DD	00H
	DQ	FLAT:barrelTest_WRITE$rtcName$9
	DD	01f8H
	DD	010H
	DQ	FLAT:barrelTest_WRITE$rtcName$8
	DD	01d4H
	DD	04H
	DQ	FLAT:barrelTest_WRITE$rtcName$7
	DD	0198H
	DD	020H
	DQ	FLAT:barrelTest_WRITE$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:barrelTest_WRITE$rtcName$5
	DD	0e4H
	DD	04H
	DQ	FLAT:barrelTest_WRITE$rtcName$4
	DD	0a8H
	DD	020H
	DQ	FLAT:barrelTest_WRITE$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:barrelTest_WRITE$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:barrelTest_WRITE$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:barrelTest_WRITE$rtcName$0
	ORG $+480
barrelTest_WRITE$rtcFrameData DD 0aH
	DD	00H
	DQ	FLAT:barrelTest_WRITE$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	012bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_RESIZE DD 025063219H
	DD	010b2310H
	DD	07004003eH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	01e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_RESIZE$rtcName$0 DB 069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	00H
	ORG $+2
barrelTest_RESIZE$rtcName$1 DB 06eH
	DB	065H
	DB	077H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
barrelTest_RESIZE$rtcName$2 DB 024H
	DB	053H
	DB	031H
	DB	039H
	DB	00H
	ORG $+3
barrelTest_RESIZE$rtcName$3 DB 024H
	DB	053H
	DB	032H
	DB	030H
	DB	00H
	ORG $+3
barrelTest_RESIZE$rtcName$4 DB 024H
	DB	053H
	DB	032H
	DB	031H
	DB	00H
	ORG $+3
barrelTest_RESIZE$rtcName$5 DB 024H
	DB	053H
	DB	032H
	DB	032H
	DB	00H
	ORG $+3
barrelTest_RESIZE$rtcVarDesc DD 0118H
	DD	00H
	DQ	FLAT:barrelTest_RESIZE$rtcName$5
	DD	0c8H
	DD	010H
	DQ	FLAT:barrelTest_RESIZE$rtcName$4
	DD	0a4H
	DD	04H
	DQ	FLAT:barrelTest_RESIZE$rtcName$3
	DD	068H
	DD	020H
	DQ	FLAT:barrelTest_RESIZE$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:barrelTest_RESIZE$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:barrelTest_RESIZE$rtcName$0
	ORG $+288
barrelTest_RESIZE$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:barrelTest_RESIZE$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_REMOVE DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0258H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_NEW DD 035063219H
	DD	010b3310H
	DD	0700400b6H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	05a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrelTest_NEW$rtcName$0 DB 063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$1 DB 024H
	DB	053H
	DB	038H
	DB	00H
barrelTest_NEW$rtcName$2 DB 024H
	DB	053H
	DB	039H
	DB	00H
barrelTest_NEW$rtcName$3 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$4 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$5 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$6 DB 024H
	DB	053H
	DB	031H
	DB	033H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$7 DB 024H
	DB	053H
	DB	031H
	DB	034H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$8 DB 024H
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$9 DB 024H
	DB	053H
	DB	031H
	DB	036H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$10 DB 024H
	DB	053H
	DB	031H
	DB	037H
	DB	00H
	ORG $+3
barrelTest_NEW$rtcName$11 DB 024H
	DB	053H
	DB	031H
	DB	038H
	DB	00H
	ORG $+7
barrelTest_NEW$rtcVarDesc DD 03b8H
	DD	00H
	DQ	FLAT:barrelTest_NEW$rtcName$11
	DD	0290H
	DD	0110H
	DQ	FLAT:barrelTest_NEW$rtcName$10
	DD	0258H
	DD	010H
	DQ	FLAT:barrelTest_NEW$rtcName$9
	DD	0228H
	DD	010H
	DQ	FLAT:barrelTest_NEW$rtcName$8
	DD	01f8H
	DD	010H
	DQ	FLAT:barrelTest_NEW$rtcName$7
	DD	01c8H
	DD	010H
	DQ	FLAT:barrelTest_NEW$rtcName$6
	DD	0170H
	DD	040H
	DQ	FLAT:barrelTest_NEW$rtcName$5
	DD	0148H
	DD	00H
	DQ	FLAT:barrelTest_NEW$rtcName$4
	DD	0f8H
	DD	010H
	DQ	FLAT:barrelTest_NEW$rtcName$3
	DD	0d4H
	DD	04H
	DQ	FLAT:barrelTest_NEW$rtcName$2
	DD	098H
	DD	020H
	DQ	FLAT:barrelTest_NEW$rtcName$1
	DD	074H
	DD	04H
	DQ	FLAT:barrelTest_NEW$rtcName$0
	ORG $+576
barrelTest_NEW$rtcFrameData DD 0cH
	DD	00H
	DQ	FLAT:barrelTest_NEW$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	01dfH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrel_INPUT DD 025064819H
	DD	0119231eH
	DD	070120048H
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
barrel_INPUT$rtcName$0 DB 024H
	DB	053H
	DB	031H
	DB	00H
barrel_INPUT$rtcName$1 DB 024H
	DB	053H
	DB	032H
	DB	00H
barrel_INPUT$rtcName$2 DB 024H
	DB	053H
	DB	033H
	DB	00H
barrel_INPUT$rtcName$3 DB 024H
	DB	053H
	DB	034H
	DB	00H
barrel_INPUT$rtcName$4 DB 024H
	DB	053H
	DB	035H
	DB	00H
barrel_INPUT$rtcName$5 DB 024H
	DB	053H
	DB	036H
	DB	00H
barrel_INPUT$rtcName$6 DB 024H
	DB	053H
	DB	037H
	DB	00H
	ORG $+4
barrel_INPUT$rtcVarDesc DD 0158H
	DD	010H
	DQ	FLAT:barrel_INPUT$rtcName$6
	DD	0134H
	DD	04H
	DQ	FLAT:barrel_INPUT$rtcName$5
	DD	0f8H
	DD	020H
	DQ	FLAT:barrel_INPUT$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:barrel_INPUT$rtcName$3
	DD	088H
	DD	020H
	DQ	FLAT:barrel_INPUT$rtcName$2
	DD	068H
	DD	00H
	DQ	FLAT:barrel_INPUT$rtcName$1
	DD	028H
	DD	00H
	DQ	FLAT:barrel_INPUT$rtcName$0
	ORG $+336
barrel_INPUT$rtcFrameData DD 07H
	DD	00H
	DQ	FLAT:barrel_INPUT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_screen DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	010dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_screen DD 035053d19H
	DD	010e3313H
	DD	070070035H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
fill_screen$rtcName$0 DB 074H
	DB	06cH
	DB	00H
	ORG $+1
fill_screen$rtcName$1 DB 073H
	DB	00H
	ORG $+2
fill_screen$rtcName$2 DB 077H
	DB	072H
	DB	069H
	DB	074H
	DB	074H
	DB	065H
	DB	06eH
	DB	00H
fill_screen$rtcVarDesc DD 0a4H
	DD	04H
	DQ	FLAT:fill_screen$rtcName$2
	DD	058H
	DD	016H
	DQ	FLAT:fill_screen$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:fill_screen$rtcName$0
	ORG $+144
fill_screen$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:fill_screen$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$barrelTest_ESCAPE DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest
_TEXT	SEGMENT
$S57$ = 8
$S58$5 = 40
__$ArrayPad$ = 248
barrelTest PROC						; COMDAT

; 257  : {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 12 00 00 00	 mov	 ecx, 18
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 258  : 	PREENT("Barrel Testing...\n\n");

  0003d	48 8d 55 08	 lea	 rdx, QWORD PTR $S57$[rbp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CICDCNDN@Barrel?5Testing?4?4?4?6?6@
  00048	e8 00 00 00 00	 call	 Preent

; 259  : 
; 260  : 	if (!Barrel_ServiceInit())

  0004d	e8 00 00 00 00	 call	 Barrel_ServiceInit
  00052	85 c0		 test	 eax, eax
  00054	75 12		 jne	 SHORT $LN2@barrelTest

; 261  : 	{
; 262  : 		PREENT("Services failed to start!\n");

  00056	48 8d 55 28	 lea	 rdx, QWORD PTR $S58$5[rbp]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@CGFOLKEE@Services?5failed?5to?5start?$CB?6@
  00061	e8 00 00 00 00	 call	 Preent

; 263  : 		return;

  00066	eb 05		 jmp	 SHORT $LN1@barrelTest
$LN2@barrelTest:

; 264  : 	}
; 265  : 
; 266  : 
; 267  : 	barrelTest_MAIN();

  00068	e8 00 00 00 00	 call	 barrelTest_MAIN
$LN1@barrelTest:

; 268  : }

  0006d	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest$rtcFrameData
  00078	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00084	48 33 cd	 xor	 rcx, rbp
  00087	e8 00 00 00 00	 call	 __security_check_cookie
  0008c	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
barrelTest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_MAIN
_TEXT	SEGMENT
input$ = 8
$S51$9 = 40
$S52$10 = 100
$S53$11 = 136
i$12 = 180
$S54$13 = 216
$S55$14 = 292
$S56$15 = 328
i$16 = 372
__$ArrayPad$ = 584
barrelTest_MAIN PROC					; COMDAT

; 238  : void barrelTest_MAIN() {

$LN12:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 70 02
	00 00		 sub	 rsp, 624		; 00000270H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 48 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 239  : 
; 240  : 	const char* input = NULL;

  0003e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR input$[rbp], 0
$LN2@barrelTest:

; 241  : 
; 242  : 	while (!ESCAPE) {

  00046	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ESCAPE, 0
  0004d	0f 85 9d 01 00
	00		 jne	 $LN3@barrelTest

; 243  : 
; 244  : 		PREENT_SAFE("[ Total Current Nodes: % ]\n", fmt_i(Barrel_NodeCount()));

  00053	c7 45 28 09 00
	00 00		 mov	 DWORD PTR $S51$9[rbp], 9
  0005a	e8 00 00 00 00	 call	 Barrel_NodeCount
  0005f	89 45 64	 mov	 DWORD PTR $S52$10[rbp], eax
  00062	48 8d 45 64	 lea	 rax, QWORD PTR $S52$10[rbp]
  00066	48 89 45 30	 mov	 QWORD PTR $S51$9[rbp+8], rax
  0006a	c7 85 88 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S53$11[rbp], -2
  00074	48 c7 85 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S53$11[rbp+8], 0
  0007f	48 8d 45 38	 lea	 rax, QWORD PTR $S51$9[rbp+16]
  00083	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR $S53$11[rbp]
  0008a	48 8b f8	 mov	 rdi, rax
  0008d	48 8b f1	 mov	 rsi, rcx
  00090	b9 10 00 00 00	 mov	 ecx, 16
  00095	f3 a4		 rep movsb
  00097	48 8d 55 28	 lea	 rdx, QWORD PTR $S51$9[rbp]
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@LDAEMDFJ@?$FL?5Total?5Current?5Nodes?3?5?$CF?5?$FN?6@
  000a2	e8 00 00 00 00	 call	 Preent

; 245  : 		for (int i = 0; i < mainMenuActionCount; i++)

  000a7	c7 85 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$12[rbp], 0
  000b1	eb 0e		 jmp	 SHORT $LN6@barrelTest
$LN4@barrelTest:
  000b3	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$12[rbp]
  000b9	ff c0		 inc	 eax
  000bb	89 85 b4 00 00
	00		 mov	 DWORD PTR i$12[rbp], eax
$LN6@barrelTest:
  000c1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR mainMenuActionCount
  000c7	39 85 b4 00 00
	00		 cmp	 DWORD PTR i$12[rbp], eax
  000cd	0f 83 a4 00 00
	00		 jae	 $LN5@barrelTest

; 246  : 			PREENT_SAFE("[%] - %\n", fmt_c(mainMenuActions[i]._keyPress), fmt_s(mainMenuActions[i]._description));

  000d3	c7 85 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR $S54$13[rbp], 0
  000dd	48 63 85 b4 00
	00 00		 movsxd	 rax, DWORD PTR i$12[rbp]
  000e4	48 6b c0 18	 imul	 rax, rax, 24
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mainMenuActions
  000ef	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f3	88 85 24 01 00
	00		 mov	 BYTE PTR $S55$14[rbp], al
  000f9	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $S55$14[rbp]
  00100	48 89 85 e0 00
	00 00		 mov	 QWORD PTR $S54$13[rbp+8], rax
  00107	c7 85 e8 00 00
	00 01 00 00 00	 mov	 DWORD PTR $S54$13[rbp+16], 1
  00111	48 63 85 b4 00
	00 00		 movsxd	 rax, DWORD PTR i$12[rbp]
  00118	48 6b c0 18	 imul	 rax, rax, 24
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mainMenuActions
  00123	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00128	48 89 85 f0 00
	00 00		 mov	 QWORD PTR $S54$13[rbp+24], rax
  0012f	c7 85 48 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S56$15[rbp], -2
  00139	48 c7 85 50 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S56$15[rbp+8], 0
  00144	48 8d 85 f8 00
	00 00		 lea	 rax, QWORD PTR $S54$13[rbp+32]
  0014b	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $S56$15[rbp]
  00152	48 8b f8	 mov	 rdi, rax
  00155	48 8b f1	 mov	 rsi, rcx
  00158	b9 10 00 00 00	 mov	 ecx, 16
  0015d	f3 a4		 rep movsb
  0015f	48 8d 95 d8 00
	00 00		 lea	 rdx, QWORD PTR $S54$13[rbp]
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EAMDPNID@?$FL?$CF?$FN?5?9?5?$CF?6@
  0016d	e8 00 00 00 00	 call	 Preent
  00172	e9 3c ff ff ff	 jmp	 $LN4@barrelTest
$LN5@barrelTest:

; 247  : 
; 248  : 		input = Geet();

  00177	e8 00 00 00 00	 call	 Geet
  0017c	48 89 45 08	 mov	 QWORD PTR input$[rbp], rax

; 249  : 
; 250  : 		for (int i = 0; i < mainMenuActionCount; i++)

  00180	c7 85 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$16[rbp], 0
  0018a	eb 0e		 jmp	 SHORT $LN9@barrelTest
$LN7@barrelTest:
  0018c	8b 85 74 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  00192	ff c0		 inc	 eax
  00194	89 85 74 01 00
	00		 mov	 DWORD PTR i$16[rbp], eax
$LN9@barrelTest:
  0019a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR mainMenuActionCount
  001a0	39 85 74 01 00
	00		 cmp	 DWORD PTR i$16[rbp], eax
  001a6	73 43		 jae	 SHORT $LN8@barrelTest

; 251  : 			if (mainMenuActions[i]._keyPress == input[0])

  001a8	48 63 85 74 01
	00 00		 movsxd	 rax, DWORD PTR i$16[rbp]
  001af	48 6b c0 18	 imul	 rax, rax, 24
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mainMenuActions
  001ba	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	48 6b c9 00	 imul	 rcx, rcx, 0
  001c7	48 8b 55 08	 mov	 rdx, QWORD PTR input$[rbp]
  001cb	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  001cf	3b c1		 cmp	 eax, ecx
  001d1	75 16		 jne	 SHORT $LN10@barrelTest

; 252  : 				mainMenuActions[i]._action();

  001d3	48 63 85 74 01
	00 00		 movsxd	 rax, DWORD PTR i$16[rbp]
  001da	48 6b c0 18	 imul	 rax, rax, 24
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mainMenuActions
  001e5	ff 54 01 10	 call	 QWORD PTR [rcx+rax+16]
$LN10@barrelTest:
  001e9	eb a1		 jmp	 SHORT $LN7@barrelTest
$LN8@barrelTest:

; 253  : 	}

  001eb	e9 56 fe ff ff	 jmp	 $LN2@barrelTest
$LN3@barrelTest:

; 254  : }

  001f0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_MAIN$rtcFrameData
  001fb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00200	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00207	48 33 cd	 xor	 rcx, rbp
  0020a	e8 00 00 00 00	 call	 __security_check_cookie
  0020f	48 8d a5 50 02
	00 00		 lea	 rsp, QWORD PTR [rbp+592]
  00216	5f		 pop	 rdi
  00217	5e		 pop	 rsi
  00218	5d		 pop	 rbp
  00219	c3		 ret	 0
barrelTest_MAIN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_VIEW_HEAP
_TEXT	SEGMENT
$S37$ = 8
i$17 = 36
nextNode$18 = 72
$S38$19 = 112
$S39$20 = 228
$S40$21 = 260
$S41$22 = 292
$S42$23 = 324
$S43$24 = 356
$S44$25 = 392
$S45$ = 440
i$26 = 468
$S46$27 = 504
j$28 = 532
$S47$29 = 568
$S48$30 = 628
$S49$31 = 664
$S50$32 = 712
__$ArrayPad$ = 1112
barrelTest_VIEW_HEAP PROC				; COMDAT

; 198  : {

$LN12:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 80 04
	00 00		 sub	 rsp, 1152		; 00000480H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 58 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 199  : 	PREENT("bCount | vCount | offset | bStart \n");

  0003e	48 8d 55 08	 lea	 rdx, QWORD PTR $S37$[rbp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@GDIPAECF@bCount?5?$HM?5vCount?5?$HM?5offset?5?$HM?5bSta@
  00049	e8 00 00 00 00	 call	 Preent

; 200  : 
; 201  : 	for (int i = 0; i < Barrel_NodeCount(); i++)

  0004e	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$17[rbp], 0
  00055	eb 08		 jmp	 SHORT $LN4@barrelTest
$LN2@barrelTest:
  00057	8b 45 24	 mov	 eax, DWORD PTR i$17[rbp]
  0005a	ff c0		 inc	 eax
  0005c	89 45 24	 mov	 DWORD PTR i$17[rbp], eax
$LN4@barrelTest:
  0005f	e8 00 00 00 00	 call	 Barrel_NodeCount
  00064	39 45 24	 cmp	 DWORD PTR i$17[rbp], eax
  00067	0f 83 fd 00 00
	00		 jae	 $LN3@barrelTest

; 202  : 	{
; 203  : 		BarrelNode* nextNode = Heap_Head();

  0006d	e8 00 00 00 00	 call	 Heap_Head
  00072	48 89 45 48	 mov	 QWORD PTR nextNode$18[rbp], rax

; 204  : 		PREENT_SAFE("[%]: % | % | % | %\n",

  00076	c7 45 70 03 00
	00 00		 mov	 DWORD PTR $S38$19[rbp], 3
  0007d	8b 45 24	 mov	 eax, DWORD PTR i$17[rbp]
  00080	89 85 e4 00 00
	00		 mov	 DWORD PTR $S39$20[rbp], eax
  00086	48 8d 85 e4 00
	00 00		 lea	 rax, QWORD PTR $S39$20[rbp]
  0008d	48 89 45 78	 mov	 QWORD PTR $S38$19[rbp+8], rax
  00091	c7 85 80 00 00
	00 03 00 00 00	 mov	 DWORD PTR $S38$19[rbp+16], 3
  0009b	48 8b 45 48	 mov	 rax, QWORD PTR nextNode$18[rbp]
  0009f	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000a2	89 85 04 01 00
	00		 mov	 DWORD PTR $S40$21[rbp], eax
  000a8	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $S40$21[rbp]
  000af	48 89 85 88 00
	00 00		 mov	 QWORD PTR $S38$19[rbp+24], rax
  000b6	c7 85 90 00 00
	00 03 00 00 00	 mov	 DWORD PTR $S38$19[rbp+32], 3
  000c0	48 8b 45 48	 mov	 rax, QWORD PTR nextNode$18[rbp]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000c7	89 85 24 01 00
	00		 mov	 DWORD PTR $S41$22[rbp], eax
  000cd	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $S41$22[rbp]
  000d4	48 89 85 98 00
	00 00		 mov	 QWORD PTR $S38$19[rbp+40], rax
  000db	c7 85 a0 00 00
	00 03 00 00 00	 mov	 DWORD PTR $S38$19[rbp+48], 3
  000e5	48 8b 45 48	 mov	 rax, QWORD PTR nextNode$18[rbp]
  000e9	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000ec	89 85 44 01 00
	00		 mov	 DWORD PTR $S42$23[rbp], eax
  000f2	48 8d 85 44 01
	00 00		 lea	 rax, QWORD PTR $S42$23[rbp]
  000f9	48 89 85 a8 00
	00 00		 mov	 QWORD PTR $S38$19[rbp+56], rax
  00100	c7 85 b0 00 00
	00 03 00 00 00	 mov	 DWORD PTR $S38$19[rbp+64], 3
  0010a	48 8b 45 48	 mov	 rax, QWORD PTR nextNode$18[rbp]
  0010e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00111	89 85 64 01 00
	00		 mov	 DWORD PTR $S43$24[rbp], eax
  00117	48 8d 85 64 01
	00 00		 lea	 rax, QWORD PTR $S43$24[rbp]
  0011e	48 89 85 b8 00
	00 00		 mov	 QWORD PTR $S38$19[rbp+72], rax
  00125	c7 85 88 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S44$25[rbp], -2
  0012f	48 c7 85 90 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S44$25[rbp+8], 0
  0013a	48 8d 85 c0 00
	00 00		 lea	 rax, QWORD PTR $S38$19[rbp+80]
  00141	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $S44$25[rbp]
  00148	48 8b f8	 mov	 rdi, rax
  0014b	48 8b f1	 mov	 rsi, rcx
  0014e	b9 10 00 00 00	 mov	 ecx, 16
  00153	f3 a4		 rep movsb
  00155	48 8d 55 70	 lea	 rdx, QWORD PTR $S38$19[rbp]
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KPHCKKED@?$FL?$CF?$FN?3?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?5?$HM?5?$CF?6@
  00160	e8 00 00 00 00	 call	 Preent

; 205  : 			fmt_I(i),
; 206  : 			fmt_I(nextNode->_barrelCount),
; 207  : 			fmt_I(nextNode->_collection._count),
; 208  : 			fmt_I(nextNode->_barrelOffset),
; 209  : 			fmt_I(nextNode->_barrelStart)
; 210  : 		);
; 211  : 	}

  00165	e9 ed fe ff ff	 jmp	 $LN2@barrelTest
$LN3@barrelTest:

; 212  : 
; 213  : 	PREENT("\n[HEEP MAP]\n");

  0016a	48 8d 95 b8 01
	00 00		 lea	 rdx, QWORD PTR $S45$[rbp]
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOGIKLIF@?6?$FLHEEP?5MAP?$FN?6@
  00178	e8 00 00 00 00	 call	 Preent

; 214  : 
; 215  : 	for (int i = 0; i < 32; i++) {

  0017d	c7 85 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$26[rbp], 0
  00187	eb 0e		 jmp	 SHORT $LN7@barrelTest
$LN5@barrelTest:
  00189	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$26[rbp]
  0018f	ff c0		 inc	 eax
  00191	89 85 d4 01 00
	00		 mov	 DWORD PTR i$26[rbp], eax
$LN7@barrelTest:
  00197	83 bd d4 01 00
	00 20		 cmp	 DWORD PTR i$26[rbp], 32	; 00000020H
  0019e	0f 8d d2 00 00
	00		 jge	 $LN6@barrelTest

; 216  : 		PREENT("|");

  001a4	48 8d 95 f8 01
	00 00		 lea	 rdx, QWORD PTR $S46$27[rbp]
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DNKMNLPK@?$HM@
  001b2	e8 00 00 00 00	 call	 Preent

; 217  : 		for (int j = 0; j < 8; j++) {

  001b7	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR j$28[rbp], 0
  001c1	eb 0e		 jmp	 SHORT $LN10@barrelTest
$LN8@barrelTest:
  001c3	8b 85 14 02 00
	00		 mov	 eax, DWORD PTR j$28[rbp]
  001c9	ff c0		 inc	 eax
  001cb	89 85 14 02 00
	00		 mov	 DWORD PTR j$28[rbp], eax
$LN10@barrelTest:
  001d1	83 bd 14 02 00
	00 08		 cmp	 DWORD PTR j$28[rbp], 8
  001d8	0f 8d 80 00 00
	00		 jge	 $LN9@barrelTest

; 218  : 			PREENT_SAFE("| % ", fmt_I(((int*)Heap_Head())[(i * 8) + j]));

  001de	c7 85 38 02 00
	00 03 00 00 00	 mov	 DWORD PTR $S47$29[rbp], 3
  001e8	e8 00 00 00 00	 call	 Heap_Head
  001ed	8b 8d 14 02 00
	00		 mov	 ecx, DWORD PTR j$28[rbp]
  001f3	8b 95 d4 01 00
	00		 mov	 edx, DWORD PTR i$26[rbp]
  001f9	8d 0c d1	 lea	 ecx, DWORD PTR [rcx+rdx*8]
  001fc	48 63 c9	 movsxd	 rcx, ecx
  001ff	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00202	89 85 74 02 00
	00		 mov	 DWORD PTR $S48$30[rbp], eax
  00208	48 8d 85 74 02
	00 00		 lea	 rax, QWORD PTR $S48$30[rbp]
  0020f	48 89 85 40 02
	00 00		 mov	 QWORD PTR $S47$29[rbp+8], rax
  00216	c7 85 98 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S49$31[rbp], -2
  00220	48 c7 85 a0 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S49$31[rbp+8], 0
  0022b	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR $S47$29[rbp+16]
  00232	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $S49$31[rbp]
  00239	48 8b f8	 mov	 rdi, rax
  0023c	48 8b f1	 mov	 rsi, rcx
  0023f	b9 10 00 00 00	 mov	 ecx, 16
  00244	f3 a4		 rep movsb
  00246	48 8d 95 38 02
	00 00		 lea	 rdx, QWORD PTR $S47$29[rbp]
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OMPAKLL@?$HM?5?$CF?5@
  00254	e8 00 00 00 00	 call	 Preent

; 219  : 		}

  00259	e9 65 ff ff ff	 jmp	 $LN8@barrelTest
$LN9@barrelTest:

; 220  : 
; 221  : 		PREENT("||\n");

  0025e	48 8d 95 c8 02
	00 00		 lea	 rdx, QWORD PTR $S50$32[rbp]
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FIFGEGHJ@?$HM?$HM?6@
  0026c	e8 00 00 00 00	 call	 Preent

; 222  : 	}

  00271	e9 13 ff ff ff	 jmp	 $LN5@barrelTest
$LN6@barrelTest:

; 223  : }

  00276	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0027a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_VIEW_HEAP$rtcFrameData
  00281	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00286	48 8b 8d 58 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0028d	48 33 cd	 xor	 rcx, rbp
  00290	e8 00 00 00 00	 call	 __security_check_cookie
  00295	48 8d a5 60 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1120]
  0029c	5f		 pop	 rdi
  0029d	5e		 pop	 rsi
  0029e	5d		 pop	 rbp
  0029f	c3		 ret	 0
barrelTest_VIEW_HEAP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_READ
_TEXT	SEGMENT
targetPtr$ = 8
index$ = 36
startIndex$ = 68
delta$ = 100
$S30$13 = 136
$S31$14 = 196
$S32$15 = 232
targetBoop$ = 280
deltaDir$ = 308
i$16 = 340
$S33$17 = 376
$S34$18 = 452
$S35$19 = 484
$S36$20 = 520
tv88 = 932
__$ArrayPad$ = 936
barrelTest_READ PROC					; COMDAT

; 169  : {

$LN13:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec d0 03
	00 00		 sub	 rsp, 976		; 000003d0H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 8c 00 00 00	 mov	 ecx, 140		; 0000008cH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 a8 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 170  : 	int* targetPtr = NULL;

  0003e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR targetPtr$[rbp], 0

; 171  : 	int index, startIndex, delta;
; 172  : 
; 173  : 	if (!barrel_INPUT(&index, "Set Target", QuitReminder | Indexing))

  00046	41 b8 03 00 00
	00		 mov	 r8d, 3
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CCENBCPK@Set?5Target@
  00053	48 8d 4d 24	 lea	 rcx, QWORD PTR index$[rbp]
  00057	e8 00 00 00 00	 call	 barrel_INPUT
  0005c	85 c0		 test	 eax, eax
  0005e	75 05		 jne	 SHORT $LN5@barrelTest

; 174  : 		return;

  00060	e9 ca 01 00 00	 jmp	 $LN1@barrelTest
$LN5@barrelTest:

; 175  : 
; 176  : 	if (index < 0 || index >= Barrel_NodeCount()) {

  00065	83 7d 24 00	 cmp	 DWORD PTR index$[rbp], 0
  00069	7c 0a		 jl	 SHORT $LN7@barrelTest
  0006b	e8 00 00 00 00	 call	 Barrel_NodeCount
  00070	39 45 24	 cmp	 DWORD PTR index$[rbp], eax
  00073	72 6b		 jb	 SHORT $LN6@barrelTest
$LN7@barrelTest:

; 177  : 		PREENT_SAFE("Bad index! Between 0 and %\n", fmt_i(Barrel_NodeCount()));

  00075	c7 85 88 00 00
	00 09 00 00 00	 mov	 DWORD PTR $S30$13[rbp], 9
  0007f	e8 00 00 00 00	 call	 Barrel_NodeCount
  00084	89 85 c4 00 00
	00		 mov	 DWORD PTR $S31$14[rbp], eax
  0008a	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $S31$14[rbp]
  00091	48 89 85 90 00
	00 00		 mov	 QWORD PTR $S30$13[rbp+8], rax
  00098	c7 85 e8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S32$15[rbp], -2
  000a2	48 c7 85 f0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S32$15[rbp+8], 0
  000ad	48 8d 85 98 00
	00 00		 lea	 rax, QWORD PTR $S30$13[rbp+16]
  000b4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $S32$15[rbp]
  000bb	48 8b f8	 mov	 rdi, rax
  000be	48 8b f1	 mov	 rsi, rcx
  000c1	b9 10 00 00 00	 mov	 ecx, 16
  000c6	f3 a4		 rep movsb
  000c8	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR $S30$13[rbp]
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@
  000d6	e8 00 00 00 00	 call	 Preent

; 178  : 		return;

  000db	e9 4f 01 00 00	 jmp	 $LN1@barrelTest
$LN6@barrelTest:

; 179  : 	}
; 180  : 
; 181  : 	BarrelNode* targetBoop = Barrel_GetNode(index);

  000e0	8b 4d 24	 mov	 ecx, DWORD PTR index$[rbp]
  000e3	e8 00 00 00 00	 call	 Barrel_GetNode
  000e8	48 89 85 18 01
	00 00		 mov	 QWORD PTR targetBoop$[rbp], rax

; 182  : 
; 183  : 	if (!barrel_INPUT(&startIndex, "Start Index", 0))

  000ef	45 33 c0	 xor	 r8d, r8d
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@JFAILKBP@Start?5Index@
  000f9	48 8d 4d 44	 lea	 rcx, QWORD PTR startIndex$[rbp]
  000fd	e8 00 00 00 00	 call	 barrel_INPUT
  00102	85 c0		 test	 eax, eax
  00104	75 05		 jne	 SHORT $LN8@barrelTest

; 184  : 		return;

  00106	e9 24 01 00 00	 jmp	 $LN1@barrelTest
$LN8@barrelTest:

; 185  : 
; 186  : 	if (!barrel_INPUT(&delta, "Delta Count", 0))

  0010b	45 33 c0	 xor	 r8d, r8d
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OEPBPCND@Delta?5Count@
  00115	48 8d 4d 64	 lea	 rcx, QWORD PTR delta$[rbp]
  00119	e8 00 00 00 00	 call	 barrel_INPUT
  0011e	85 c0		 test	 eax, eax
  00120	75 05		 jne	 SHORT $LN9@barrelTest

; 187  : 		return;

  00122	e9 08 01 00 00	 jmp	 $LN1@barrelTest
$LN9@barrelTest:

; 188  : 
; 189  : 	int deltaDir = delta < 0 ? -1 : 1;

  00127	83 7d 64 00	 cmp	 DWORD PTR delta$[rbp], 0
  0012b	7d 0c		 jge	 SHORT $LN11@barrelTest
  0012d	c7 85 a4 03 00
	00 ff ff ff ff	 mov	 DWORD PTR tv88[rbp], -1
  00137	eb 0a		 jmp	 SHORT $LN12@barrelTest
$LN11@barrelTest:
  00139	c7 85 a4 03 00
	00 01 00 00 00	 mov	 DWORD PTR tv88[rbp], 1
$LN12@barrelTest:
  00143	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR tv88[rbp]
  00149	89 85 34 01 00
	00		 mov	 DWORD PTR deltaDir$[rbp], eax

; 190  : 
; 191  : 	for (int i = 0; i < delta; i += deltaDir) {

  0014f	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$16[rbp], 0
  00159	eb 16		 jmp	 SHORT $LN4@barrelTest
$LN2@barrelTest:
  0015b	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR deltaDir$[rbp]
  00161	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$16[rbp]
  00167	03 c8		 add	 ecx, eax
  00169	8b c1		 mov	 eax, ecx
  0016b	89 85 54 01 00
	00		 mov	 DWORD PTR i$16[rbp], eax
$LN4@barrelTest:
  00171	8b 45 64	 mov	 eax, DWORD PTR delta$[rbp]
  00174	39 85 54 01 00
	00		 cmp	 DWORD PTR i$16[rbp], eax
  0017a	0f 8d af 00 00
	00		 jge	 $LN3@barrelTest

; 192  : 		targetPtr = Barrel_GetUnitPtr(targetBoop, startIndex + i);

  00180	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  00186	8b 4d 44	 mov	 ecx, DWORD PTR startIndex$[rbp]
  00189	03 c8		 add	 ecx, eax
  0018b	8b c1		 mov	 eax, ecx
  0018d	8b d0		 mov	 edx, eax
  0018f	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR targetBoop$[rbp]
  00196	e8 00 00 00 00	 call	 Barrel_GetUnitPtr
  0019b	48 89 45 08	 mov	 QWORD PTR targetPtr$[rbp], rax

; 193  : 		PREENT_SAFE("[%]: %\n", fmt_i(i), fmt_i(*targetPtr));

  0019f	c7 85 78 01 00
	00 09 00 00 00	 mov	 DWORD PTR $S33$17[rbp], 9
  001a9	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  001af	89 85 c4 01 00
	00		 mov	 DWORD PTR $S34$18[rbp], eax
  001b5	48 8d 85 c4 01
	00 00		 lea	 rax, QWORD PTR $S34$18[rbp]
  001bc	48 89 85 80 01
	00 00		 mov	 QWORD PTR $S33$17[rbp+8], rax
  001c3	c7 85 88 01 00
	00 09 00 00 00	 mov	 DWORD PTR $S33$17[rbp+16], 9
  001cd	48 8b 45 08	 mov	 rax, QWORD PTR targetPtr$[rbp]
  001d1	8b 00		 mov	 eax, DWORD PTR [rax]
  001d3	89 85 e4 01 00
	00		 mov	 DWORD PTR $S35$19[rbp], eax
  001d9	48 8d 85 e4 01
	00 00		 lea	 rax, QWORD PTR $S35$19[rbp]
  001e0	48 89 85 90 01
	00 00		 mov	 QWORD PTR $S33$17[rbp+24], rax
  001e7	c7 85 08 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S36$20[rbp], -2
  001f1	48 c7 85 10 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S36$20[rbp+8], 0
  001fc	48 8d 85 98 01
	00 00		 lea	 rax, QWORD PTR $S33$17[rbp+32]
  00203	48 8d 8d 08 02
	00 00		 lea	 rcx, QWORD PTR $S36$20[rbp]
  0020a	48 8b f8	 mov	 rdi, rax
  0020d	48 8b f1	 mov	 rsi, rcx
  00210	b9 10 00 00 00	 mov	 ecx, 16
  00215	f3 a4		 rep movsb
  00217	48 8d 95 78 01
	00 00		 lea	 rdx, QWORD PTR $S33$17[rbp]
  0021e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DAMOKBIM@?$FL?$CF?$FN?3?5?$CF?6@
  00225	e8 00 00 00 00	 call	 Preent

; 194  : 	}

  0022a	e9 2c ff ff ff	 jmp	 $LN2@barrelTest
$LN3@barrelTest:
$LN1@barrelTest:

; 195  : }

  0022f	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00233	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_READ$rtcFrameData
  0023a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0023f	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00246	48 33 cd	 xor	 rcx, rbp
  00249	e8 00 00 00 00	 call	 __security_check_cookie
  0024e	48 8d a5 b0 03
	00 00		 lea	 rsp, QWORD PTR [rbp+944]
  00255	5f		 pop	 rdi
  00256	5e		 pop	 rsi
  00257	5d		 pop	 rbp
  00258	c3		 ret	 0
barrelTest_READ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_WRITE
_TEXT	SEGMENT
targetPtr$ = 8
index$ = 36
startIndex$ = 68
delta$ = 100
$S23$13 = 136
$S24$14 = 196
$S25$15 = 232
targetBoop$ = 280
deltaDir$ = 308
i$16 = 340
$S26$17 = 376
$S27$18 = 436
$S28$19 = 472
$S29$ = 520
tv88 = 916
__$ArrayPad$ = 920
barrelTest_WRITE PROC					; COMDAT

; 136  : {

$LN13:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec c0 03
	00 00		 sub	 rsp, 960		; 000003c0H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 98 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 137  : 	int* targetPtr = NULL;

  0003e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR targetPtr$[rbp], 0

; 138  : 	int index, startIndex, delta;
; 139  : 
; 140  : 	if (!barrel_INPUT(&index, "Set Target", QuitReminder | Indexing))

  00046	41 b8 03 00 00
	00		 mov	 r8d, 3
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CCENBCPK@Set?5Target@
  00053	48 8d 4d 24	 lea	 rcx, QWORD PTR index$[rbp]
  00057	e8 00 00 00 00	 call	 barrel_INPUT
  0005c	85 c0		 test	 eax, eax
  0005e	75 05		 jne	 SHORT $LN5@barrelTest

; 141  : 		return;

  00060	e9 da 01 00 00	 jmp	 $LN1@barrelTest
$LN5@barrelTest:

; 142  : 
; 143  : 	if (index < 0 || index >= Barrel_NodeCount()) {

  00065	83 7d 24 00	 cmp	 DWORD PTR index$[rbp], 0
  00069	7c 0a		 jl	 SHORT $LN7@barrelTest
  0006b	e8 00 00 00 00	 call	 Barrel_NodeCount
  00070	39 45 24	 cmp	 DWORD PTR index$[rbp], eax
  00073	72 6b		 jb	 SHORT $LN6@barrelTest
$LN7@barrelTest:

; 144  : 		PREENT_SAFE("Bad index! Between 0 and %\n", fmt_i(Barrel_NodeCount()));

  00075	c7 85 88 00 00
	00 09 00 00 00	 mov	 DWORD PTR $S23$13[rbp], 9
  0007f	e8 00 00 00 00	 call	 Barrel_NodeCount
  00084	89 85 c4 00 00
	00		 mov	 DWORD PTR $S24$14[rbp], eax
  0008a	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $S24$14[rbp]
  00091	48 89 85 90 00
	00 00		 mov	 QWORD PTR $S23$13[rbp+8], rax
  00098	c7 85 e8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S25$15[rbp], -2
  000a2	48 c7 85 f0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S25$15[rbp+8], 0
  000ad	48 8d 85 98 00
	00 00		 lea	 rax, QWORD PTR $S23$13[rbp+16]
  000b4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $S25$15[rbp]
  000bb	48 8b f8	 mov	 rdi, rax
  000be	48 8b f1	 mov	 rsi, rcx
  000c1	b9 10 00 00 00	 mov	 ecx, 16
  000c6	f3 a4		 rep movsb
  000c8	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR $S23$13[rbp]
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@
  000d6	e8 00 00 00 00	 call	 Preent

; 145  : 		return;

  000db	e9 5f 01 00 00	 jmp	 $LN1@barrelTest
$LN6@barrelTest:

; 146  : 	}
; 147  : 
; 148  : 	BarrelNode* targetBoop = Barrel_GetNode(index);

  000e0	8b 4d 24	 mov	 ecx, DWORD PTR index$[rbp]
  000e3	e8 00 00 00 00	 call	 Barrel_GetNode
  000e8	48 89 85 18 01
	00 00		 mov	 QWORD PTR targetBoop$[rbp], rax

; 149  : 
; 150  : 	if (!barrel_INPUT(&startIndex, "Start Index", 0))

  000ef	45 33 c0	 xor	 r8d, r8d
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@JFAILKBP@Start?5Index@
  000f9	48 8d 4d 44	 lea	 rcx, QWORD PTR startIndex$[rbp]
  000fd	e8 00 00 00 00	 call	 barrel_INPUT
  00102	85 c0		 test	 eax, eax
  00104	75 05		 jne	 SHORT $LN8@barrelTest

; 151  : 		return;

  00106	e9 34 01 00 00	 jmp	 $LN1@barrelTest
$LN8@barrelTest:

; 152  : 
; 153  : 	if (!barrel_INPUT(&delta, "Delta Count", 0))

  0010b	45 33 c0	 xor	 r8d, r8d
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OEPBPCND@Delta?5Count@
  00115	48 8d 4d 64	 lea	 rcx, QWORD PTR delta$[rbp]
  00119	e8 00 00 00 00	 call	 barrel_INPUT
  0011e	85 c0		 test	 eax, eax
  00120	75 05		 jne	 SHORT $LN9@barrelTest

; 154  : 		return;

  00122	e9 18 01 00 00	 jmp	 $LN1@barrelTest
$LN9@barrelTest:

; 155  : 
; 156  : 	int deltaDir = delta < 0 ? -1 : 1;

  00127	83 7d 64 00	 cmp	 DWORD PTR delta$[rbp], 0
  0012b	7d 0c		 jge	 SHORT $LN11@barrelTest
  0012d	c7 85 94 03 00
	00 ff ff ff ff	 mov	 DWORD PTR tv88[rbp], -1
  00137	eb 0a		 jmp	 SHORT $LN12@barrelTest
$LN11@barrelTest:
  00139	c7 85 94 03 00
	00 01 00 00 00	 mov	 DWORD PTR tv88[rbp], 1
$LN12@barrelTest:
  00143	8b 85 94 03 00
	00		 mov	 eax, DWORD PTR tv88[rbp]
  00149	89 85 34 01 00
	00		 mov	 DWORD PTR deltaDir$[rbp], eax

; 157  : 
; 158  : 	for (int i = 0; i != delta; i += deltaDir)

  0014f	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$16[rbp], 0
  00159	eb 16		 jmp	 SHORT $LN4@barrelTest
$LN2@barrelTest:
  0015b	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR deltaDir$[rbp]
  00161	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$16[rbp]
  00167	03 c8		 add	 ecx, eax
  00169	8b c1		 mov	 eax, ecx
  0016b	89 85 54 01 00
	00		 mov	 DWORD PTR i$16[rbp], eax
$LN4@barrelTest:
  00171	8b 45 64	 mov	 eax, DWORD PTR delta$[rbp]
  00174	39 85 54 01 00
	00		 cmp	 DWORD PTR i$16[rbp], eax
  0017a	0f 84 ac 00 00
	00		 je	 $LN3@barrelTest

; 159  : 	{
; 160  : 		PREENT_SAFE("Input new param (% remaining): ", fmt_i((delta - i) * deltaDir));

  00180	c7 85 78 01 00
	00 09 00 00 00	 mov	 DWORD PTR $S26$17[rbp], 9
  0018a	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  00190	8b 4d 64	 mov	 ecx, DWORD PTR delta$[rbp]
  00193	2b c8		 sub	 ecx, eax
  00195	8b c1		 mov	 eax, ecx
  00197	0f af 85 34 01
	00 00		 imul	 eax, DWORD PTR deltaDir$[rbp]
  0019e	89 85 b4 01 00
	00		 mov	 DWORD PTR $S27$18[rbp], eax
  001a4	48 8d 85 b4 01
	00 00		 lea	 rax, QWORD PTR $S27$18[rbp]
  001ab	48 89 85 80 01
	00 00		 mov	 QWORD PTR $S26$17[rbp+8], rax
  001b2	c7 85 d8 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S28$19[rbp], -2
  001bc	48 c7 85 e0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S28$19[rbp+8], 0
  001c7	48 8d 85 88 01
	00 00		 lea	 rax, QWORD PTR $S26$17[rbp+16]
  001ce	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $S28$19[rbp]
  001d5	48 8b f8	 mov	 rdi, rax
  001d8	48 8b f1	 mov	 rsi, rcx
  001db	b9 10 00 00 00	 mov	 ecx, 16
  001e0	f3 a4		 rep movsb
  001e2	48 8d 95 78 01
	00 00		 lea	 rdx, QWORD PTR $S26$17[rbp]
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@EDDDOMAH@Input?5new?5param?5?$CI?$CF?5remaining?$CJ?3?5@
  001f0	e8 00 00 00 00	 call	 Preent

; 161  : 		targetPtr = Barrel_GetUnitPtr(targetBoop, startIndex + i);

  001f5	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  001fb	8b 4d 44	 mov	 ecx, DWORD PTR startIndex$[rbp]
  001fe	03 c8		 add	 ecx, eax
  00200	8b c1		 mov	 eax, ecx
  00202	8b d0		 mov	 edx, eax
  00204	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR targetBoop$[rbp]
  0020b	e8 00 00 00 00	 call	 Barrel_GetUnitPtr
  00210	48 89 45 08	 mov	 QWORD PTR targetPtr$[rbp], rax

; 162  : 		*targetPtr = strToInt(Geet());

  00214	e8 00 00 00 00	 call	 Geet
  00219	48 8b c8	 mov	 rcx, rax
  0021c	e8 00 00 00 00	 call	 strToInt
  00221	48 8b 4d 08	 mov	 rcx, QWORD PTR targetPtr$[rbp]
  00225	89 01		 mov	 DWORD PTR [rcx], eax

; 163  : 	}

  00227	e9 2f ff ff ff	 jmp	 $LN2@barrelTest
$LN3@barrelTest:

; 164  : 
; 165  : 	PREENT("Write Complete!\n");

  0022c	48 8d 95 08 02
	00 00		 lea	 rdx, QWORD PTR $S29$[rbp]
  00233	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@HBOOCOPG@Write?5Complete?$CB?6@
  0023a	e8 00 00 00 00	 call	 Preent
$LN1@barrelTest:

; 166  : }

  0023f	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00243	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_WRITE$rtcFrameData
  0024a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024f	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00256	48 33 cd	 xor	 rcx, rbp
  00259	e8 00 00 00 00	 call	 __security_check_cookie
  0025e	48 8d a5 a0 03
	00 00		 lea	 rsp, QWORD PTR [rbp+928]
  00265	5f		 pop	 rdi
  00266	5e		 pop	 rsi
  00267	5d		 pop	 rbp
  00268	c3		 ret	 0
barrelTest_WRITE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_RESIZE
_TEXT	SEGMENT
index$ = 4
newSize$ = 36
$S19$9 = 72
$S20$10 = 132
$S21$11 = 168
targetBoop$ = 216
$S22$12 = 248
__$ArrayPad$ = 456
barrelTest_RESIZE PROC					; COMDAT

; 111  : {

$LN8:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00015	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 c8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 112  : 	int index, newSize;
; 113  : 
; 114  : 	if (!barrel_INPUT(&index, "Set Target", QuitReminder | Indexing))

  0003e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CCENBCPK@Set?5Target@
  0004b	48 8d 4d 04	 lea	 rcx, QWORD PTR index$[rbp]
  0004f	e8 00 00 00 00	 call	 barrel_INPUT
  00054	85 c0		 test	 eax, eax
  00056	75 05		 jne	 SHORT $LN2@barrelTest

; 115  : 		return;

  00058	e9 be 00 00 00	 jmp	 $LN1@barrelTest
$LN2@barrelTest:

; 116  : 
; 117  : 	if (index < 0 || index >= Barrel_NodeCount()) {

  0005d	83 7d 04 00	 cmp	 DWORD PTR index$[rbp], 0
  00061	7c 0a		 jl	 SHORT $LN4@barrelTest
  00063	e8 00 00 00 00	 call	 Barrel_NodeCount
  00068	39 45 04	 cmp	 DWORD PTR index$[rbp], eax
  0006b	72 5c		 jb	 SHORT $LN3@barrelTest
$LN4@barrelTest:

; 118  : 		PREENT_SAFE("Bad index! Between 0 and %\n", fmt_i(Barrel_NodeCount()));

  0006d	c7 45 48 09 00
	00 00		 mov	 DWORD PTR $S19$9[rbp], 9
  00074	e8 00 00 00 00	 call	 Barrel_NodeCount
  00079	89 85 84 00 00
	00		 mov	 DWORD PTR $S20$10[rbp], eax
  0007f	48 8d 85 84 00
	00 00		 lea	 rax, QWORD PTR $S20$10[rbp]
  00086	48 89 45 50	 mov	 QWORD PTR $S19$9[rbp+8], rax
  0008a	c7 85 a8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S21$11[rbp], -2
  00094	48 c7 85 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S21$11[rbp+8], 0
  0009f	48 8d 45 58	 lea	 rax, QWORD PTR $S19$9[rbp+16]
  000a3	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR $S21$11[rbp]
  000aa	48 8b f8	 mov	 rdi, rax
  000ad	48 8b f1	 mov	 rsi, rcx
  000b0	b9 10 00 00 00	 mov	 ecx, 16
  000b5	f3 a4		 rep movsb
  000b7	48 8d 55 48	 lea	 rdx, QWORD PTR $S19$9[rbp]
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@
  000c2	e8 00 00 00 00	 call	 Preent

; 119  : 		return;

  000c7	eb 52		 jmp	 SHORT $LN1@barrelTest
$LN3@barrelTest:

; 120  : 	}
; 121  : 
; 122  : 	BarrelNode* targetBoop = Barrel_GetNode(index);

  000c9	8b 4d 04	 mov	 ecx, DWORD PTR index$[rbp]
  000cc	e8 00 00 00 00	 call	 Barrel_GetNode
  000d1	48 89 85 d8 00
	00 00		 mov	 QWORD PTR targetBoop$[rbp], rax

; 123  : 
; 124  : 	if (!barrel_INPUT(&newSize, "New Size", 0))

  000d8	45 33 c0	 xor	 r8d, r8d
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MBLPAJHO@New?5Size@
  000e2	48 8d 4d 24	 lea	 rcx, QWORD PTR newSize$[rbp]
  000e6	e8 00 00 00 00	 call	 barrel_INPUT
  000eb	85 c0		 test	 eax, eax
  000ed	75 02		 jne	 SHORT $LN5@barrelTest

; 125  : 		return;

  000ef	eb 2a		 jmp	 SHORT $LN1@barrelTest
$LN5@barrelTest:

; 126  : 
; 127  : 	if (newSize < 0) {

  000f1	83 7d 24 00	 cmp	 DWORD PTR newSize$[rbp], 0
  000f5	7d 15		 jge	 SHORT $LN6@barrelTest

; 128  : 		PREENT("New size must be 0 or greater!\n");

  000f7	48 8d 95 f8 00
	00 00		 lea	 rdx, QWORD PTR $S22$12[rbp]
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@FDPDEPPO@New?5size?5must?5be?50?5or?5greater?$CB?6@
  00105	e8 00 00 00 00	 call	 Preent

; 129  : 		return;

  0010a	eb 0f		 jmp	 SHORT $LN1@barrelTest
$LN6@barrelTest:

; 130  : 	}
; 131  : 
; 132  : 	Collection_Resize(targetBoop, newSize);

  0010c	8b 55 24	 mov	 edx, DWORD PTR newSize$[rbp]
  0010f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR targetBoop$[rbp]
  00116	e8 00 00 00 00	 call	 Collection_Resize
$LN1@barrelTest:

; 133  : }

  0011b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_RESIZE$rtcFrameData
  00126	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0012b	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00132	48 33 cd	 xor	 rcx, rbp
  00135	e8 00 00 00 00	 call	 __security_check_cookie
  0013a	48 8d a5 d0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+464]
  00141	5f		 pop	 rdi
  00142	5e		 pop	 rsi
  00143	5d		 pop	 rbp
  00144	c3		 ret	 0
barrelTest_RESIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_REMOVE
_TEXT	SEGMENT
targetPtr$ = 8
input$ = 40
barrelTest_REMOVE PROC					; COMDAT

; 105  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 106  : 	int* targetPtr = NULL;

  0001b	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR targetPtr$[rbp], 0

; 107  : 	const char* input = NULL;

  00023	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR input$[rbp], 0

; 108  : }

  0002b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
barrelTest_REMOVE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_NEW
_TEXT	SEGMENT
targetPtr$ = 8
input$ = 40
capacity$ = 68
$S8$15 = 104
$S9$16 = 164
$S10$17 = 200
newNode$ = 248
$S11$18 = 280
$S12$19 = 320
$S13$20 = 408
$S14$21 = 456
$S15$22 = 504
$S16$23 = 552
$S17$24 = 608
$S18$ = 904
$T25 = 1320
$T26 = 1376
__$ArrayPad$ = 1400
barrelTest_NEW PROC					; COMDAT

; 76   : {

$LN7:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec b0 05
	00 00		 sub	 rsp, 1456		; 000005b0H
  0000b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00010	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00015	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 78 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 77   : 	int* targetPtr = NULL;

  0003e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR targetPtr$[rbp], 0

; 78   : 	const char* input = NULL;

  00046	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR input$[rbp], 0

; 79   : 	int capacity;
; 80   : 
; 81   : 	if (!barrel_INPUT(&capacity, "Choose Initial Capacity", QuitReminder))

  0004e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NAKPOAPG@Choose?5Initial?5Capacity@
  0005b	48 8d 4d 44	 lea	 rcx, QWORD PTR capacity$[rbp]
  0005f	e8 00 00 00 00	 call	 barrel_INPUT
  00064	85 c0		 test	 eax, eax
  00066	75 05		 jne	 SHORT $LN2@barrelTest

; 82   : 		return;

  00068	e9 db 01 00 00	 jmp	 $LN1@barrelTest
$LN2@barrelTest:

; 83   : 
; 84   : 	if (capacity < 1) {

  0006d	83 7d 44 01	 cmp	 DWORD PTR capacity$[rbp], 1
  00071	7d 5d		 jge	 SHORT $LN3@barrelTest

; 85   : 		PREENT_SAFE("Bad Capacity! Must be greater than 0: %\n", fmt_i(capacity));

  00073	c7 45 68 09 00
	00 00		 mov	 DWORD PTR $S8$15[rbp], 9
  0007a	8b 45 44	 mov	 eax, DWORD PTR capacity$[rbp]
  0007d	89 85 a4 00 00
	00		 mov	 DWORD PTR $S9$16[rbp], eax
  00083	48 8d 85 a4 00
	00 00		 lea	 rax, QWORD PTR $S9$16[rbp]
  0008a	48 89 45 70	 mov	 QWORD PTR $S8$15[rbp+8], rax
  0008e	c7 85 c8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S10$17[rbp], -2
  00098	48 c7 85 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S10$17[rbp+8], 0
  000a3	48 8d 45 78	 lea	 rax, QWORD PTR $S8$15[rbp+16]
  000a7	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $S10$17[rbp]
  000ae	48 8b f8	 mov	 rdi, rax
  000b1	48 8b f1	 mov	 rsi, rcx
  000b4	b9 10 00 00 00	 mov	 ecx, 16
  000b9	f3 a4		 rep movsb
  000bb	48 8d 55 68	 lea	 rdx, QWORD PTR $S8$15[rbp]
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@LBAGAEEG@Bad?5Capacity?$CB?5Must?5be?5greater?5t@
  000c6	e8 00 00 00 00	 call	 Preent

; 86   : 		return;

  000cb	e9 78 01 00 00	 jmp	 $LN1@barrelTest
$LN3@barrelTest:

; 87   : 	}
; 88   : 
; 89   : 	COLLECTION newNode = Barrel_ctor("int", sizeof(int), NULL, 0, capacity);

  000d0	8b 45 44	 mov	 eax, DWORD PTR capacity$[rbp]
  000d3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d7	45 33 c9	 xor	 r9d, r9d
  000da	45 33 c0	 xor	 r8d, r8d
  000dd	ba 04 00 00 00	 mov	 edx, 4
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  000e9	e8 00 00 00 00	 call	 Barrel_ctor
  000ee	48 89 85 f8 00
	00 00		 mov	 QWORD PTR newNode$[rbp], rax

; 90   : 
; 91   : 	if (newNode) {

  000f5	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR newNode$[rbp], 0
  000fd	0f 84 32 01 00
	00		 je	 $LN4@barrelTest

; 92   : 		PREENT("Node created!\n");

  00103	48 8d 95 18 01
	00 00		 lea	 rdx, QWORD PTR $S11$18[rbp]
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MKMACOIF@Node?5created?$CB?6@
  00111	e8 00 00 00 00	 call	 Preent

; 93   : 		newNode->_extensions->_methods(Request(MANAGE, P_(tVARIANT, tRESIZE), P_(tTRG, newNode), P_(tCOUNT, capacity)));

  00116	48 8d 85 60 02
	00 00		 lea	 rax, QWORD PTR $S17$24[rbp]
  0011d	48 8b f8	 mov	 rdi, rax
  00120	33 c0		 xor	 eax, eax
  00122	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  00127	f3 aa		 rep stosb
  00129	c7 85 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR $S13$20[rbp], 0
  00133	48 c7 85 a0 01
	00 00 14 00 00
	00		 mov	 QWORD PTR $S13$20[rbp+8], 20
  0013e	48 8d 85 40 01
	00 00		 lea	 rax, QWORD PTR $S12$19[rbp]
  00145	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $S13$20[rbp]
  0014c	48 8b f8	 mov	 rdi, rax
  0014f	48 8b f1	 mov	 rsi, rcx
  00152	b9 10 00 00 00	 mov	 ecx, 16
  00157	f3 a4		 rep movsb
  00159	c7 85 c8 01 00
	00 01 00 00 00	 mov	 DWORD PTR $S14$21[rbp], 1
  00163	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR newNode$[rbp]
  0016a	48 89 85 d0 01
	00 00		 mov	 QWORD PTR $S14$21[rbp+8], rax
  00171	48 8d 85 50 01
	00 00		 lea	 rax, QWORD PTR $S12$19[rbp+16]
  00178	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $S14$21[rbp]
  0017f	48 8b f8	 mov	 rdi, rax
  00182	48 8b f1	 mov	 rsi, rcx
  00185	b9 10 00 00 00	 mov	 ecx, 16
  0018a	f3 a4		 rep movsb
  0018c	c7 85 f8 01 00
	00 07 00 00 00	 mov	 DWORD PTR $S15$22[rbp], 7
  00196	48 63 45 44	 movsxd	 rax, DWORD PTR capacity$[rbp]
  0019a	48 89 85 00 02
	00 00		 mov	 QWORD PTR $S15$22[rbp+8], rax
  001a1	48 8d 85 60 01
	00 00		 lea	 rax, QWORD PTR $S12$19[rbp+32]
  001a8	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $S15$22[rbp]
  001af	48 8b f8	 mov	 rdi, rax
  001b2	48 8b f1	 mov	 rsi, rcx
  001b5	b9 10 00 00 00	 mov	 ecx, 16
  001ba	f3 a4		 rep movsb
  001bc	c7 85 28 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S16$23[rbp], -2
  001c6	48 c7 85 30 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S16$23[rbp+8], 0
  001d1	48 8d 85 70 01
	00 00		 lea	 rax, QWORD PTR $S12$19[rbp+48]
  001d8	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $S16$23[rbp]
  001df	48 8b f8	 mov	 rdi, rax
  001e2	48 8b f1	 mov	 rsi, rcx
  001e5	b9 10 00 00 00	 mov	 ecx, 16
  001ea	f3 a4		 rep movsb
  001ec	4c 8d 8d 60 02
	00 00		 lea	 r9, QWORD PTR $S17$24[rbp]
  001f3	4c 8d 85 40 01
	00 00		 lea	 r8, QWORD PTR $S12$19[rbp]
  001fa	ba 08 00 00 00	 mov	 edx, 8
  001ff	48 8d 8d 28 05
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00206	e8 00 00 00 00	 call	 CreateRequest
  0020b	48 8d 8d 60 05
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00212	48 8b f9	 mov	 rdi, rcx
  00215	48 8b f0	 mov	 rsi, rax
  00218	b9 10 00 00 00	 mov	 ecx, 16
  0021d	f3 a4		 rep movsb
  0021f	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR newNode$[rbp]
  00226	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00229	48 8d 8d 60 05
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00230	ff 50 08	 call	 QWORD PTR [rax+8]

; 94   : 	}

  00233	eb 13		 jmp	 SHORT $LN5@barrelTest
$LN4@barrelTest:

; 95   : 
; 96   : 	else
; 97   : 		PREENT("Node failed to create!\n");

  00235	48 8d 95 88 03
	00 00		 lea	 rdx, QWORD PTR $S18$[rbp]
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FPHOOKPN@Node?5failed?5to?5create?$CB?6@
  00243	e8 00 00 00 00	 call	 Preent
$LN5@barrelTest:
$LN1@barrelTest:

; 98   : 
; 99   : 
; 100  : 	//test_heapService._heapEnd;
; 101  : 
; 102  : }

  00248	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrelTest_NEW$rtcFrameData
  00253	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00258	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0025f	48 33 cd	 xor	 rcx, rbp
  00262	e8 00 00 00 00	 call	 __security_check_cookie
  00267	48 8d a5 80 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1408]
  0026e	5f		 pop	 rdi
  0026f	5e		 pop	 rsi
  00270	5d		 pop	 rbp
  00271	c3		 ret	 0
barrelTest_NEW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrel_INPUT
_TEXT	SEGMENT
$S1$10 = 8
input$ = 40
$S2$ = 72
$S3$ = 104
$S4$ = 168
$S5$11 = 216
$S6$12 = 276
$S7$13 = 312
__$ArrayPad$ = 536
outputLoc$ = 576
inputRequest$ = 584
options$ = 592
barrel_INPUT PROC					; COMDAT

; 47   : bool barrel_INPUT(int* outputLoc, const char* inputRequest, int options) {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 40 02
	00 00		 sub	 rsp, 576		; 00000240H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00023	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00037	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003e	48 33 c5	 xor	 rax, rbp
  00041	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  0004f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 48   : 
; 49   : 	if ((options & Indexing) && !Barrel_NodeCount())

  00054	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR options$[rbp]
  0005a	83 e0 02	 and	 eax, 2
  0005d	85 c0		 test	 eax, eax
  0005f	74 20		 je	 SHORT $LN2@barrel_INP
  00061	e8 00 00 00 00	 call	 Barrel_NodeCount
  00066	85 c0		 test	 eax, eax
  00068	75 17		 jne	 SHORT $LN2@barrel_INP

; 50   : 	{
; 51   : 		PREENT("No Collections to write to!\n");

  0006a	48 8d 55 08	 lea	 rdx, QWORD PTR $S1$10[rbp]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@NNPMGJLD@No?5Collections?5to?5write?5to?$CB?6@
  00075	e8 00 00 00 00	 call	 Preent

; 52   : 		return false;

  0007a	33 c0		 xor	 eax, eax
  0007c	e9 48 01 00 00	 jmp	 $LN1@barrel_INP
$LN2@barrel_INP:

; 53   : 	}
; 54   : 
; 55   : 	const char* input = NULL;

  00081	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR input$[rbp], 0

; 56   : 
; 57   : 	if (options & QuitReminder)

  00089	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR options$[rbp]
  0008f	83 e0 01	 and	 eax, 1
  00092	85 c0		 test	 eax, eax
  00094	74 10		 je	 SHORT $LN3@barrel_INP

; 58   : 		PREENT("At any time, enter 'q' to leave\n");

  00096	48 8d 55 48	 lea	 rdx, QWORD PTR $S2$[rbp]
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@KFMIOBLL@At?5any?5time?0?5enter?5?8q?8?5to?5leave@
  000a1	e8 00 00 00 00	 call	 Preent
$LN3@barrel_INP:

; 59   : 	PREENT_SAFE("%: ", fmt_s(inputRequest));

  000a6	c7 45 68 01 00
	00 00		 mov	 DWORD PTR $S3$[rbp], 1
  000ad	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR inputRequest$[rbp]
  000b4	48 89 45 70	 mov	 QWORD PTR $S3$[rbp+8], rax
  000b8	c7 85 a8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S4$[rbp], -2
  000c2	48 c7 85 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $S4$[rbp+8], 0
  000cd	48 8d 45 78	 lea	 rax, QWORD PTR $S3$[rbp+16]
  000d1	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR $S4$[rbp]
  000d8	48 8b f8	 mov	 rdi, rax
  000db	48 8b f1	 mov	 rsi, rcx
  000de	b9 10 00 00 00	 mov	 ecx, 16
  000e3	f3 a4		 rep movsb
  000e5	48 8d 55 68	 lea	 rdx, QWORD PTR $S3$[rbp]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PFCPDLAL@?$CF?3?5@
  000f0	e8 00 00 00 00	 call	 Preent

; 60   : 
; 61   : 	input = Geet();

  000f5	e8 00 00 00 00	 call	 Geet
  000fa	48 89 45 28	 mov	 QWORD PTR input$[rbp], rax

; 62   : 	if (input[0] == 'q')

  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	48 6b c0 00	 imul	 rax, rax, 0
  00107	48 8b 4d 28	 mov	 rcx, QWORD PTR input$[rbp]
  0010b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0010f	83 f8 71	 cmp	 eax, 113		; 00000071H
  00112	75 07		 jne	 SHORT $LN4@barrel_INP

; 63   : 		return false;

  00114	33 c0		 xor	 eax, eax
  00116	e9 ae 00 00 00	 jmp	 $LN1@barrel_INP
$LN4@barrel_INP:

; 64   : 
; 65   : 	*outputLoc = strToInt(input);

  0011b	48 8b 4d 28	 mov	 rcx, QWORD PTR input$[rbp]
  0011f	e8 00 00 00 00	 call	 strToInt
  00124	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR outputLoc$[rbp]
  0012b	89 01		 mov	 DWORD PTR [rcx], eax

; 66   : 
; 67   : 	if ((options & Indexing) && (*outputLoc < 0 || *outputLoc >= Barrel_NodeCount())) {

  0012d	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR options$[rbp]
  00133	83 e0 02	 and	 eax, 2
  00136	85 c0		 test	 eax, eax
  00138	0f 84 86 00 00
	00		 je	 $LN5@barrel_INP
  0013e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR outputLoc$[rbp]
  00145	83 38 00	 cmp	 DWORD PTR [rax], 0
  00148	7c 10		 jl	 SHORT $LN6@barrel_INP
  0014a	e8 00 00 00 00	 call	 Barrel_NodeCount
  0014f	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR outputLoc$[rbp]
  00156	39 01		 cmp	 DWORD PTR [rcx], eax
  00158	72 6a		 jb	 SHORT $LN5@barrel_INP
$LN6@barrel_INP:

; 68   : 		PREENT_SAFE("Bad index! Between 0 and %\n", fmt_i(Barrel_NodeCount()));

  0015a	c7 85 d8 00 00
	00 09 00 00 00	 mov	 DWORD PTR $S5$11[rbp], 9
  00164	e8 00 00 00 00	 call	 Barrel_NodeCount
  00169	89 85 14 01 00
	00		 mov	 DWORD PTR $S6$12[rbp], eax
  0016f	48 8d 85 14 01
	00 00		 lea	 rax, QWORD PTR $S6$12[rbp]
  00176	48 89 85 e0 00
	00 00		 mov	 QWORD PTR $S5$11[rbp+8], rax
  0017d	c7 85 38 01 00
	00 fe ff ff ff	 mov	 DWORD PTR $S7$13[rbp], -2
  00187	48 c7 85 40 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S7$13[rbp+8], 0
  00192	48 8d 85 e8 00
	00 00		 lea	 rax, QWORD PTR $S5$11[rbp+16]
  00199	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $S7$13[rbp]
  001a0	48 8b f8	 mov	 rdi, rax
  001a3	48 8b f1	 mov	 rsi, rcx
  001a6	b9 10 00 00 00	 mov	 ecx, 16
  001ab	f3 a4		 rep movsb
  001ad	48 8d 95 d8 00
	00 00		 lea	 rdx, QWORD PTR $S5$11[rbp]
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIHGPNMA@Bad?5index?$CB?5Between?50?5and?5?$CF?6@
  001bb	e8 00 00 00 00	 call	 Preent

; 69   : 		return false;

  001c0	33 c0		 xor	 eax, eax
  001c2	eb 05		 jmp	 SHORT $LN1@barrel_INP
$LN5@barrel_INP:

; 70   : 	}
; 71   : 
; 72   : 	return true;

  001c4	b8 01 00 00 00	 mov	 eax, 1
$LN1@barrel_INP:

; 73   : }

  001c9	48 8b f8	 mov	 rdi, rax
  001cc	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:barrel_INPUT$rtcFrameData
  001d7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001dc	48 8b c7	 mov	 rax, rdi
  001df	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001e6	48 33 cd	 xor	 rcx, rbp
  001e9	e8 00 00 00 00	 call	 __security_check_cookie
  001ee	48 8d a5 20 02
	00 00		 lea	 rsp, QWORD PTR [rbp+544]
  001f5	5f		 pop	 rdi
  001f6	5e		 pop	 rsi
  001f7	5d		 pop	 rbp
  001f8	c3		 ret	 0
barrel_INPUT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT clear_screen
_TEXT	SEGMENT
clear_screen PROC					; COMDAT

; 45   : void clear_screen() { fill_screen(NULL); }

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	33 c9		 xor	 ecx, ecx
  0001d	e8 00 00 00 00	 call	 fill_screen
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
clear_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT fill_screen
_TEXT	SEGMENT
tl$ = 4
s$ = 40
console$ = 88
written$ = 116
cells$ = 148
tv77 = 356
__$ArrayPad$ = 360
fill$ = 400
fill_screen PROC					; COMDAT

; 34   : void fill_screen(char* fill) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00018	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 68 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 35   : 	COORD tl = { 0,0 };

  00049	33 c0		 xor	 eax, eax
  0004b	66 89 45 04	 mov	 WORD PTR tl$[rbp], ax
  0004f	33 c0		 xor	 eax, eax
  00051	66 89 45 06	 mov	 WORD PTR tl$[rbp+2], ax

; 36   : 	CONSOLE_SCREEN_BUFFER_INFO s;
; 37   : 	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);

  00055	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  00060	48 89 45 58	 mov	 QWORD PTR console$[rbp], rax

; 38   : 	GetConsoleScreenBufferInfo(console, &s);

  00064	48 8d 55 28	 lea	 rdx, QWORD PTR s$[rbp]
  00068	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo

; 39   : 	DWORD written, cells = s.dwSize.X * s.dwSize.Y;

  00072	0f bf 45 28	 movsx	 eax, WORD PTR s$[rbp]
  00076	0f bf 4d 2a	 movsx	 ecx, WORD PTR s$[rbp+2]
  0007a	0f af c1	 imul	 eax, ecx
  0007d	89 85 94 00 00
	00		 mov	 DWORD PTR cells$[rbp], eax

; 40   : 	FillConsoleOutputCharacter(console, fill == NULL ? ' ' : *fill, cells, tl, &written);

  00083	48 83 bd 90 01
	00 00 00	 cmp	 QWORD PTR fill$[rbp], 0
  0008b	75 0c		 jne	 SHORT $LN3@fill_scree
  0008d	c7 85 64 01 00
	00 20 00 00 00	 mov	 DWORD PTR tv77[rbp], 32	; 00000020H
  00097	eb 10		 jmp	 SHORT $LN4@fill_scree
$LN3@fill_scree:
  00099	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR fill$[rbp]
  000a0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a3	89 85 64 01 00
	00		 mov	 DWORD PTR tv77[rbp], eax
$LN4@fill_scree:
  000a9	48 8d 45 74	 lea	 rax, QWORD PTR written$[rbp]
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	44 8b 4d 04	 mov	 r9d, DWORD PTR tl$[rbp]
  000b6	44 8b 85 94 00
	00 00		 mov	 r8d, DWORD PTR cells$[rbp]
  000bd	0f b7 95 64 01
	00 00		 movzx	 edx, WORD PTR tv77[rbp]
  000c4	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputCharacterW

; 41   : 	FillConsoleOutputAttribute(console, s.wAttributes, cells, tl, &written);

  000ce	48 8d 45 74	 lea	 rax, QWORD PTR written$[rbp]
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	44 8b 4d 04	 mov	 r9d, DWORD PTR tl$[rbp]
  000db	44 8b 85 94 00
	00 00		 mov	 r8d, DWORD PTR cells$[rbp]
  000e2	0f b7 55 30	 movzx	 edx, WORD PTR s$[rbp+8]
  000e6	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputAttribute

; 42   : 	SetConsoleCursorPosition(console, tl);

  000f0	8b 55 04	 mov	 edx, DWORD PTR tl$[rbp]
  000f3	48 8b 4d 58	 mov	 rcx, QWORD PTR console$[rbp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorPosition

; 43   : }

  000fd	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:fill_screen$rtcFrameData
  00108	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010d	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00114	48 33 cd	 xor	 rcx, rbp
  00117	e8 00 00 00 00	 call	 __security_check_cookie
  0011c	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
fill_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\BarrelTest.c
;	COMDAT barrelTest_ESCAPE
_TEXT	SEGMENT
barrelTest_ESCAPE PROC					; COMDAT

; 30   : void barrelTest_ESCAPE() { ESCAPE = true; }

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A75EC172_BarrelTest@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ESCAPE, 1
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
barrelTest_ESCAPE ENDP
_TEXT	ENDS
END
