; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	ThreadHandle_TypeID:BYTE:018H
_DATA	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__03948348_tThreads@h DB 01H
__978ECD68_tServices@h DB 01H
__FEADC134_tHeap@h DB 01H
__697F18BC_tHeap@c DB 01H
msvcjmc	ENDS
PUBLIC	Heap_DeltaPages
PUBLIC	Heap_Remaining
PUBLIC	Heap_Head
PUBLIC	Heap_ServiceWork
PUBLIC	Heap_ClearPage
PUBLIC	Heap_ServiceInit
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BF@PNABOKCH@Heap?5Create?5Failed?$CB?6@	; `string'
PUBLIC	??_C@_0BJ@PFBKCHAI@Information?5Set?5Failed?$CB?6@ ; `string'
EXTRN	__imp_HeapCreate:PROC
EXTRN	__imp_HeapAlloc:PROC
EXTRN	__imp_HeapFree:PROC
EXTRN	__imp_HeapSetInformation:PROC
EXTRN	Preent:PROC
EXTRN	Service_Start:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
GlobalHeapService DB 040H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_DeltaPages DD imagerel $LN8
	DD	imagerel $LN8+239
	DD	imagerel $unwind$Heap_DeltaPages
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_Remaining DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$Heap_Remaining
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_Head DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$Heap_Head
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_ServiceWork DD imagerel $LN11
	DD	imagerel $LN11+301
	DD	imagerel $unwind$Heap_ServiceWork
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_ClearPage DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$Heap_ClearPage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_ServiceInit DD imagerel $LN6
	DD	imagerel $LN6+299
	DD	imagerel $unwind$Heap_ServiceInit
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BJ@PFBKCHAI@Information?5Set?5Failed?$CB?6@
CONST	SEGMENT
??_C@_0BJ@PFBKCHAI@Information?5Set?5Failed?$CB?6@ DB 'Information Set Fa'
	DB	'iled!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PNABOKCH@Heap?5Create?5Failed?$CB?6@
CONST	SEGMENT
??_C@_0BF@PNABOKCH@Heap?5Create?5Failed?$CB?6@ DB 'Heap Create Failed!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0112H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_ServiceInit DD 025053b19H
	DD	010d2312H
	DD	070060021H
	DD	05005H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Heap_ServiceInit$rtcName$0 DB 075H
	DB	06cH
	DB	045H
	DB	06eH
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	04cH
	DB	046H
	DB	048H
	DB	00H
	ORG $+4
Heap_ServiceInit$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:Heap_ServiceInit$rtcName$0
	ORG $+48
Heap_ServiceInit$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Heap_ServiceInit$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_ClearPage DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_ServiceWork DD 025051301H
	DD	010e2313H
	DD	070070035H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_Head DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_Remaining DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_DeltaPages DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_ServiceInit
_TEXT	SEGMENT
ulEnableLFH$ = 4
__$ArrayPad$ = 216
clear$ = 256
Heap_ServiceInit PROC					; COMDAT

; 73   : {

$LN6:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 0a 00 00 00	 mov	 ecx, 10
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR [rsp+296]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 74   : 	GlobalHeapService._heapStart = HeapCreate(0, 0, 0);

  00047	45 33 c0	 xor	 r8d, r8d
  0004a	33 d2		 xor	 edx, edx
  0004c	33 c9		 xor	 ecx, ecx
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  00054	48 89 05 28 00
	00 00		 mov	 QWORD PTR GlobalHeapService+40, rax

; 75   : 
; 76   : 	if (!GlobalHeapService._heapStart)

  0005b	48 83 3d 28 00
	00 00 00	 cmp	 QWORD PTR GlobalHeapService+40, 0
  00063	75 15		 jne	 SHORT $LN2@Heap_Servi

; 77   : 	{
; 78   : 		PREENT("Heap Create Failed!\n");

  00065	33 d2		 xor	 edx, edx
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PNABOKCH@Heap?5Create?5Failed?$CB?6@
  0006e	e8 00 00 00 00	 call	 Preent

; 79   : 		return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	e9 82 00 00 00	 jmp	 $LN1@Heap_Servi
$LN2@Heap_Servi:

; 80   : 	}
; 81   : 		
; 82   : 
; 83   : 	ULONG ulEnableLFH = 2;

  0007a	c7 45 04 02 00
	00 00		 mov	 DWORD PTR ulEnableLFH$[rbp], 2

; 84   : 
; 85   : 	if (!HeapSetInformation(GlobalHeapService._heapStart, HeapCompatibilityInformation, &ulEnableLFH, sizeof(ulEnableLFH)))

  00081	41 b9 04 00 00
	00		 mov	 r9d, 4
  00087	4c 8d 45 04	 lea	 r8, QWORD PTR ulEnableLFH$[rbp]
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapSetInformation
  0009a	85 c0		 test	 eax, eax
  0009c	75 12		 jne	 SHORT $LN3@Heap_Servi

; 86   : 	{
; 87   : 		PREENT("Information Set Failed!\n");

  0009e	33 d2		 xor	 edx, edx
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@PFBKCHAI@Information?5Set?5Failed?$CB?6@
  000a7	e8 00 00 00 00	 call	 Preent

; 88   : 		return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 4c		 jmp	 SHORT $LN1@Heap_Servi
$LN3@Heap_Servi:

; 89   : 	}
; 90   : 
; 91   : 	GlobalHeapService._heapEnd = GlobalHeapService._heapStart;

  000b0	48 8b 05 28 00
	00 00		 mov	 rax, QWORD PTR GlobalHeapService+40
  000b7	48 89 05 30 00
	00 00		 mov	 QWORD PTR GlobalHeapService+48, rax

; 92   : 	GlobalHeapService._pageCount = 0;

  000be	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR GlobalHeapService+56, 0

; 93   : 
; 94   : 	// Initialize service
; 95   : 	Service_Start(&(GlobalHeapService._pages), Heap_ServiceWork);

  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Heap_ServiceWork
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GlobalHeapService
  000d6	e8 00 00 00 00	 call	 Service_Start

; 96   : 
; 97   : 	// Add first Page
; 98   : 	Heap_DeltaPages(1);

  000db	b9 01 00 00 00	 mov	 ecx, 1
  000e0	e8 00 00 00 00	 call	 Heap_DeltaPages

; 99   : 
; 100  : 	// Initialize the mapSpace to zeros
; 101  : 	if (clear)

  000e5	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR clear$[rbp], 0
  000ec	74 07		 je	 SHORT $LN4@Heap_Servi

; 102  : 		Heap_ClearPage(0);

  000ee	33 c9		 xor	 ecx, ecx
  000f0	e8 00 00 00 00	 call	 Heap_ClearPage
$LN4@Heap_Servi:

; 103  : 
; 104  : 	return &GlobalHeapService;

  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:GlobalHeapService
$LN1@Heap_Servi:

; 105  : }

  000fc	48 8b f8	 mov	 rdi, rax
  000ff	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Heap_ServiceInit$rtcFrameData
  0010a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010f	48 8b c7	 mov	 rax, rdi
  00112	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00119	48 33 cd	 xor	 rcx, rbp
  0011c	e8 00 00 00 00	 call	 __security_check_cookie
  00121	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00128	5f		 pop	 rdi
  00129	5d		 pop	 rbp
  0012a	c3		 ret	 0
Heap_ServiceInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_ClearPage
_TEXT	SEGMENT
targetPage$ = 8
i$1 = 36
index$ = 288
Heap_ClearPage PROC					; COMDAT

; 65   : {

$LN6:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 66   : 	Page* targetPage = &(((Page*)GlobalHeapService._heapStart)[index]);

  0001e	48 63 85 20 01
	00 00		 movsxd	 rax, DWORD PTR index$[rbp]
  00025	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  0002c	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  00033	48 03 c8	 add	 rcx, rax
  00036	48 8b c1	 mov	 rax, rcx
  00039	48 89 45 08	 mov	 QWORD PTR targetPage$[rbp], rax

; 67   : 
; 68   : 	for (int i = 0; i < 512; i++)

  0003d	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00044	eb 08		 jmp	 SHORT $LN4@Heap_Clear
$LN2@Heap_Clear:
  00046	8b 45 24	 mov	 eax, DWORD PTR i$1[rbp]
  00049	ff c0		 inc	 eax
  0004b	89 45 24	 mov	 DWORD PTR i$1[rbp], eax
$LN4@Heap_Clear:
  0004e	81 7d 24 00 02
	00 00		 cmp	 DWORD PTR i$1[rbp], 512	; 00000200H
  00055	7d 12		 jge	 SHORT $LN3@Heap_Clear

; 69   : 		targetPage->_mem[i] = 0;

  00057	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  0005b	48 8b 4d 08	 mov	 rcx, QWORD PTR targetPage$[rbp]
  0005f	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
  00067	eb dd		 jmp	 SHORT $LN2@Heap_Clear
$LN3@Heap_Clear:

; 70   : }

  00069	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
Heap_ClearPage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_ServiceWork
_TEXT	SEGMENT
myThreadHandle$ = 8
service$ = 40
heapStart$ = 72
target$1 = 104
current$2 = 136
pageDelta$3 = 164
tv81 = 376
target$ = 416
Heap_ServiceWork PROC					; COMDAT

; 35   : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 36   : 	if (!target)

  0001f	48 83 bd a0 01
	00 00 00	 cmp	 QWORD PTR target$[rbp], 0
  00027	75 0a		 jne	 SHORT $LN4@Heap_Servi

; 37   : 		return 1;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	e9 f0 00 00 00	 jmp	 $LN1@Heap_Servi
$LN4@Heap_Servi:

; 38   : 
; 39   : 	ThreadHandle* myThreadHandle = (ThreadHandle*)target;

  00033	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR target$[rbp]
  0003a	48 89 45 08	 mov	 QWORD PTR myThreadHandle$[rbp], rax

; 40   : 	HeapService* service = (HeapService*)(myThreadHandle->_service);

  0003e	48 8b 45 08	 mov	 rax, QWORD PTR myThreadHandle$[rbp]
  00042	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00046	48 89 45 28	 mov	 QWORD PTR service$[rbp], rax

; 41   : 
; 42   : 	if (!service)

  0004a	48 83 7d 28 00	 cmp	 QWORD PTR service$[rbp], 0
  0004f	75 0a		 jne	 SHORT $LN5@Heap_Servi

; 43   : 		return 1;

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 c8 00 00 00	 jmp	 $LN1@Heap_Servi
$LN5@Heap_Servi:

; 44   : 
; 45   : 	Page* heapStart = (Page*)(service->_heapStart);

  0005b	48 8b 45 28	 mov	 rax, QWORD PTR service$[rbp]
  0005f	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00063	48 89 45 48	 mov	 QWORD PTR heapStart$[rbp], rax

; 46   : 
; 47   : 	if (!heapStart)

  00067	48 83 7d 48 00	 cmp	 QWORD PTR heapStart$[rbp], 0
  0006c	75 0a		 jne	 SHORT $LN6@Heap_Servi

; 48   : 		return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 ab 00 00 00	 jmp	 $LN1@Heap_Servi
$LN6@Heap_Servi:
$LN2@Heap_Servi:

; 49   : 
; 50   : 	while (service->_pages._localFlags & RUN)

  00078	48 8b 45 28	 mov	 rax, QWORD PTR service$[rbp]
  0007c	8b 00		 mov	 eax, DWORD PTR [rax]
  0007e	83 e0 01	 and	 eax, 1
  00081	85 c0		 test	 eax, eax
  00083	0f 84 98 00 00
	00		 je	 $LN3@Heap_Servi

; 51   : 	{
; 52   : 		size_t target = (size_t)(service->_heapEnd);

  00089	48 8b 45 28	 mov	 rax, QWORD PTR service$[rbp]
  0008d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00091	48 89 45 68	 mov	 QWORD PTR target$1[rbp], rax

; 53   : 		size_t current = (size_t)(service->_heapStart) + (sizeof(Page) * service->_pageCount);

  00095	48 8b 45 28	 mov	 rax, QWORD PTR service$[rbp]
  00099	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0009c	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  000a3	48 8b 4d 28	 mov	 rcx, QWORD PTR service$[rbp]
  000a7	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  000ab	48 89 85 88 00
	00 00		 mov	 QWORD PTR current$2[rbp], rax

; 54   : 
; 55   : 		int pageDelta = ((target > current ? target - current : current - target) / sizeof(Page)) - 1;

  000b2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR current$2[rbp]
  000b9	48 39 45 68	 cmp	 QWORD PTR target$1[rbp], rax
  000bd	76 1a		 jbe	 SHORT $LN9@Heap_Servi
  000bf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR current$2[rbp]
  000c6	48 8b 4d 68	 mov	 rcx, QWORD PTR target$1[rbp]
  000ca	48 2b c8	 sub	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  000d7	eb 18		 jmp	 SHORT $LN10@Heap_Servi
$LN9@Heap_Servi:
  000d9	48 8b 45 68	 mov	 rax, QWORD PTR target$1[rbp]
  000dd	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR current$2[rbp]
  000e4	48 2b c8	 sub	 rcx, rax
  000e7	48 8b c1	 mov	 rax, rcx
  000ea	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
$LN10@Heap_Servi:
  000f1	33 d2		 xor	 edx, edx
  000f3	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv81[rbp]
  000fa	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000ff	48 f7 f1	 div	 rcx
  00102	48 ff c8	 dec	 rax
  00105	89 85 a4 00 00
	00		 mov	 DWORD PTR pageDelta$3[rbp], eax

; 56   : 
; 57   : 		if (!Heap_DeltaPages(pageDelta))

  0010b	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR pageDelta$3[rbp]
  00111	e8 00 00 00 00	 call	 Heap_DeltaPages
  00116	85 c0		 test	 eax, eax
  00118	75 02		 jne	 SHORT $LN7@Heap_Servi

; 58   : 			break;

  0011a	eb 05		 jmp	 SHORT $LN3@Heap_Servi
$LN7@Heap_Servi:

; 59   : 	}

  0011c	e9 57 ff ff ff	 jmp	 $LN2@Heap_Servi
$LN3@Heap_Servi:

; 60   : 
; 61   : 	return 0;

  00121	33 c0		 xor	 eax, eax
$LN1@Heap_Servi:

; 62   : }

  00123	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0012a	5f		 pop	 rdi
  0012b	5d		 pop	 rbp
  0012c	c3		 ret	 0
Heap_ServiceWork ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_Head
_TEXT	SEGMENT
Heap_Head PROC						; COMDAT

; 32   : void* Heap_Head() { return GlobalHeapService._heapStart; }

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	48 8b 05 28 00
	00 00		 mov	 rax, QWORD PTR GlobalHeapService+40
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
Heap_Head ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_Remaining
_TEXT	SEGMENT
Heap_Remaining PROC					; COMDAT

; 28   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 29   : 	return ((size_t)(GlobalHeapService._heapStart) + (GlobalHeapService._pageCount * sizeof(Page))) - (size_t)(GlobalHeapService._heapEnd);

  0001b	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR GlobalHeapService+56
  00021	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  00028	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  0002f	48 03 c8	 add	 rcx, rax
  00032	48 8b c1	 mov	 rax, rcx
  00035	48 2b 05 30 00
	00 00		 sub	 rax, QWORD PTR GlobalHeapService+48

; 30   : }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
Heap_Remaining ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\tHeap.c
;	COMDAT Heap_DeltaPages
_TEXT	SEGMENT
theDelta$ = 4
tv68 = 212
delta$ = 256
Heap_DeltaPages PROC					; COMDAT

; 7    : {

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__697F18BC_tHeap@c
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 8    : 	int theDelta = delta;

  0001e	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR delta$[rbp]
  00024	89 45 04	 mov	 DWORD PTR theDelta$[rbp], eax

; 9    : 	delta = delta < 0 && (unsigned int)(delta * -1) > GlobalHeapService._pageCount ? -1 * (GlobalHeapService._pageCount) : delta; // auto-clamp

  00027	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR delta$[rbp], 0
  0002e	7d 1e		 jge	 SHORT $LN6@Heap_Delta
  00030	6b 85 00 01 00
	00 ff		 imul	 eax, DWORD PTR delta$[rbp], -1
  00037	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR GlobalHeapService+56
  0003d	76 0f		 jbe	 SHORT $LN6@Heap_Delta
  0003f	6b 05 38 00 00
	00 ff		 imul	 eax, DWORD PTR GlobalHeapService+56, -1 ; ffffffffH
  00046	89 85 d4 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  0004c	eb 0c		 jmp	 SHORT $LN7@Heap_Delta
$LN6@Heap_Delta:
  0004e	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR delta$[rbp]
  00054	89 85 d4 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
$LN7@Heap_Delta:
  0005a	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  00060	89 85 00 01 00
	00		 mov	 DWORD PTR delta$[rbp], eax

; 10   : 
; 11   : 	if (delta == 0)

  00066	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR delta$[rbp], 0
  0006d	75 04		 jne	 SHORT $LN2@Heap_Delta

; 12   : 		return false; // no action taken

  0006f	33 c0		 xor	 eax, eax
  00071	eb 72		 jmp	 SHORT $LN1@Heap_Delta
$LN2@Heap_Delta:

; 13   : 
; 14   : 	if (delta > 0)

  00073	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR delta$[rbp], 0
  0007a	7e 1e		 jle	 SHORT $LN3@Heap_Delta

; 15   : 	{
; 16   : 		HeapAlloc(GlobalHeapService._heapStart, 0, delta * PageSize);

  0007c	69 85 00 01 00
	00 00 10 00 00	 imul	 eax, DWORD PTR delta$[rbp], 4096 ; 00001000H
  00086	48 98		 cdqe
  00088	4c 8b c0	 mov	 r8, rax
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
$LN3@Heap_Delta:

; 17   : 	}
; 18   : 
; 19   : 	GlobalHeapService._pageCount += delta;

  0009a	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR delta$[rbp]
  000a0	8b 0d 38 00 00
	00		 mov	 ecx, DWORD PTR GlobalHeapService+56
  000a6	03 c8		 add	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 05 38 00 00
	00		 mov	 DWORD PTR GlobalHeapService+56, eax

; 20   : 
; 21   : 	if (delta < 0)

  000b0	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR delta$[rbp], 0
  000b7	7d 2c		 jge	 SHORT $LN4@Heap_Delta

; 22   : 	{
; 23   : 		HeapFree(GlobalHeapService._heapStart, 0, (void*)((size_t)GlobalHeapService._heapStart + (GlobalHeapService._pageCount * (size_t)PageSize)));

  000b9	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR GlobalHeapService+56
  000bf	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  000c6	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	4c 8b c0	 mov	 r8, rax
  000d6	33 d2		 xor	 edx, edx
  000d8	48 8b 0d 28 00
	00 00		 mov	 rcx, QWORD PTR GlobalHeapService+40
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapFree
$LN4@Heap_Delta:
$LN1@Heap_Delta:

; 24   : 	}
; 25   : }

  000e5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ec	5f		 pop	 rdi
  000ed	5d		 pop	 rbp
  000ee	c3		 ret	 0
Heap_DeltaPages ENDP
_TEXT	ENDS
END
