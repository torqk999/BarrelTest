#pragma once

enum Constants {
	NONE = -2,
	OMEGA = -1,

	//Vector_Default_Capacity = 16,
	//Barrel_Max_Capacity = 1024,
	Hash_Min_Threshold = 30,
	Hash_Default_Threshold = 70,
	Hash_Max_Threshold = 80,
	Hash_Max_Conversion = 64,
};

typedef enum {
	OFF = 0,
	RUN = 1,
	req_ROLL = 8,
	req_FREE = 16,
	wait_ROLL = 32,
	wait_FREE = 64
} BarrelFlags;

typedef enum {
	//POINTER = 1,
	READ_ONLY = 1,
	FIXED_SIZE = 2,
	STATIC = 4,
	VOLATILE = 8,

	UNSIGNED = 16,
	ALPHA = 32,
	INTEGRAL = 64,
	FLOATING = 128,
	STRUCT = 256,
	UNION = 512,

	MANAGED = 1024,
} TypeFlags;

typedef enum {
	BUCKET,
	BARREL,
	LIST,
} ClassFlag;

typedef enum {

} ;

typedef enum {
	DONE,
	FLAGS,
	ITERATE,
	HEAD,
	INIT,
	DECON,

	COLLECTION_USE,
	COLLECTION_FREE,
	COLLECTION_POINT,
	COLLECTION_RELEASE,

	CREATE_NODE_BARREL,

	COMPARE_EQUIVALENCE,
	COMPARE_COMPATIBILITY_FULL,
	COMPARE_COMPATIBILITY_WRITE_ALLOWED,
	COMPARE_COMPATIBILITY_SIZE,

	//TRANSCRIBE,

	TRANSCRIBE_RAW_TO_RAW,
	TRANSCRIBE_COLLECTIONS,
	TRANSCRIBE_RAW_TO_COLLECTION,
	TRANSCRIBE_COLLECTION_TO_RAW,
	
	MODIFY_INSERT,
	MODIFY_REMOVE_AT,
	MODIFY_REMOVE_FIRST_FOUND,
	MODIFY_DELTA_CAPACITY,
	MODIFY_DELTA_COUNT,
	

	//WAIT_INSERT,
	//WAIT_REMOVE_AT,
	//WAIT_REMOVE_FIRST_FOUND,
	//WAIT_RESIZE,
	//WAIT_DECON
} RequestType;