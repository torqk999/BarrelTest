; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	ThreadHandle_TypeID:BYTE:018H
COMM	barrelService_ThreadBin:BYTE:0100H
COMM	barrelService_QueBin:BYTE:0200H
_DATA	ENDS
msvcjmc	SEGMENT
__9C67CA7D_tEnums@h DB 01H
__EAEE5CFA_tDefines@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__FE09AF47_concurrencysal@h DB 01H
__C073CA79_sal@h DB 01H
__D6AFE870_vadefs@h DB 01H
__D63E96CF_vcruntime@h DB 01H
__514B86D7_excpt@h DB 01H
__9A7D38D9_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__3EADF068_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__10D4A829_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__4EC676C0_tModules@h DB 01H
__9A4426E4_tUserCollection@h DB 01H
__AFB9CF29_tPreent@h DB 01H
__366DFDC4_tHelpers@h DB 01H
__D300D227_tTypeInfo@h DB 01H
__03948348_tThreads@h DB 01H
__978ECD68_tServices@h DB 01H
__FEADC134_tHeap@h DB 01H
__296E417C_tChunk@h DB 01H
__7CF1EC1E_tCollection@h DB 01H
__CE367354_tBarrel@h DB 01H
__308C18FA_BarrelTest@h DB 01H
__EAE81D8C_tBucket@h DB 01H
__E8844C26_tMutation@h DB 01H
__7C7B8CA4_MutationTest@h DB 01H
__BC332FCF_TestArea@c DB 01H
msvcjmc	ENDS
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04FEKHGLCJ@?$CF?5?$CF?6@			; `string'
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ ; `string'
PUBLIC	??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ ; `string'
EXTRN	Collection_Count:PROC
EXTRN	Collection_Read:PROC
EXTRN	Bucket_ctor:PROC
EXTRN	Preent:PROC
EXTRN	paramCount:PROC
EXTRN	Barrel_ctor:PROC
EXTRN	mutationTest:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN5
	DD	imagerel $LN5+1340
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@ DB 'value a'
	DB	't index 3 of myBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
CONST	SEGMENT
??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@ DB 'collection cou'
	DB	'nt of emptyBucket: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@
CONST	SEGMENT
??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@ DB 'value a'
	DB	't index 3 of myBarrel: %', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEKHGLCJ@?$CF?5?$CF?6@
CONST	SEGMENT
??_C@_04FEKHGLCJ@?$CF?5?$CF?6@ DB '% %', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0522H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035063219H
	DD	010b3310H
	DD	0700400f0H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0778H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 024H
	DB	053H
	DB	031H
	DB	00H
main$rtcName$1 DB 024H
	DB	053H
	DB	032H
	DB	00H
main$rtcName$2 DB 024H
	DB	053H
	DB	033H
	DB	00H
main$rtcName$3 DB 024H
	DB	053H
	DB	034H
	DB	00H
main$rtcName$4 DB 06fH
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
main$rtcName$5 DB 024H
	DB	053H
	DB	035H
	DB	00H
main$rtcName$6 DB 024H
	DB	053H
	DB	036H
	DB	00H
main$rtcName$7 DB 024H
	DB	053H
	DB	037H
	DB	00H
main$rtcName$8 DB 024H
	DB	053H
	DB	038H
	DB	00H
main$rtcName$9 DB 024H
	DB	053H
	DB	039H
	DB	00H
main$rtcName$10 DB 024H
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
main$rtcName$11 DB 024H
	DB	053H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
main$rtcName$12 DB 024H
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+3
main$rtcName$13 DB 024H
	DB	053H
	DB	031H
	DB	033H
	DB	00H
	ORG $+3
main$rtcName$14 DB 024H
	DB	053H
	DB	031H
	DB	034H
	DB	00H
	ORG $+3
main$rtcName$15 DB 024H
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+3
main$rtcName$16 DB 024H
	DB	053H
	DB	031H
	DB	036H
	DB	00H
	ORG $+3
main$rtcName$17 DB 024H
	DB	053H
	DB	031H
	DB	037H
	DB	00H
	ORG $+3
main$rtcName$18 DB 024H
	DB	053H
	DB	031H
	DB	038H
	DB	00H
	ORG $+3
main$rtcName$19 DB 024H
	DB	053H
	DB	031H
	DB	039H
	DB	00H
	ORG $+3
main$rtcName$20 DB 024H
	DB	053H
	DB	032H
	DB	030H
	DB	00H
	ORG $+3
main$rtcName$21 DB 024H
	DB	053H
	DB	032H
	DB	031H
	DB	00H
	ORG $+3
main$rtcName$22 DB 024H
	DB	053H
	DB	032H
	DB	032H
	DB	00H
	ORG $+15
main$rtcVarDesc DD 0518H
	DD	010H
	DQ	FLAT:main$rtcName$22
	DD	04f4H
	DD	04H
	DQ	FLAT:main$rtcName$21
	DD	04b8H
	DD	020H
	DQ	FLAT:main$rtcName$20
	DD	0488H
	DD	010H
	DQ	FLAT:main$rtcName$19
	DD	0464H
	DD	04H
	DQ	FLAT:main$rtcName$18
	DD	0428H
	DD	020H
	DQ	FLAT:main$rtcName$17
	DD	03f8H
	DD	018H
	DQ	FLAT:main$rtcName$16
	DD	03b8H
	DD	020H
	DQ	FLAT:main$rtcName$15
	DD	0374H
	DD	07H
	DQ	FLAT:main$rtcName$14
	DD	0354H
	DD	07H
	DQ	FLAT:main$rtcName$13
	DD	0328H
	DD	018H
	DQ	FLAT:main$rtcName$12
	DD	02e8H
	DD	020H
	DQ	FLAT:main$rtcName$11
	DD	0298H
	DD	010H
	DQ	FLAT:main$rtcName$10
	DD	0274H
	DD	04H
	DQ	FLAT:main$rtcName$9
	DD	0238H
	DD	020H
	DQ	FLAT:main$rtcName$8
	DD	0208H
	DD	0bH
	DQ	FLAT:main$rtcName$7
	DD	01d8H
	DD	0bH
	DQ	FLAT:main$rtcName$6
	DD	0198H
	DD	028H
	DQ	FLAT:main$rtcName$5
	DD	0154H
	DD	04H
	DQ	FLAT:main$rtcName$4
	DD	0128H
	DD	010H
	DQ	FLAT:main$rtcName$3
	DD	0108H
	DD	08H
	DQ	FLAT:main$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:main$rtcName$1
	DD	098H
	DD	030H
	DQ	FLAT:main$rtcName$0
	ORG $+1104
main$rtcFrameData DD 017H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Repos\BarrelTest\TestArea.c
;	COMDAT main
_TEXT	SEGMENT
a$ = 4
z$ = 36
b$ = 68
$S1$ = 104
$S2$ = 184
$S3$ = 216
$S4$ = 248
output$ = 292
myBarrel$ = 328
$S5$ = 360
$S6$ = 424
$S7$ = 472
$S8$ = 520
$S9$ = 580
$S10$ = 616
myBucket$ = 664
$S11$ = 696
$S12$ = 760
$S13$ = 804
$S14$ = 836
emptyBucket$ = 872
$S15$ = 904
$S16$ = 968
$S17$ = 1016
$S18$ = 1076
$S19$ = 1112
$S20$ = 1160
$S21$ = 1220
$S22$ = 1256
__$ArrayPad$ = 1864
main	PROC						; COMDAT

; 32   : int main() {

$LN5:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec 80 07
	00 00		 sub	 rsp, 1920		; 00000780H
  0000b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00010	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00015	b9 44 01 00 00	 mov	 ecx, 324		; 00000144H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c5	 xor	 rax, rbp
  0002b	48 89 85 48 07
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BC332FCF_TestArea@c
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 33   : 
; 34   : 	int a = 0b11111;

  0003e	c7 45 04 1f 00
	00 00		 mov	 DWORD PTR a$[rbp], 31

; 35   : 	int z = 0b01111;

  00045	c7 45 24 0f 00
	00 00		 mov	 DWORD PTR z$[rbp], 15

; 36   : 	int b = a >> 3;

  0004c	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  0004f	c1 f8 03	 sar	 eax, 3
  00052	89 45 44	 mov	 DWORD PTR b$[rbp], eax

; 37   : 	b = b << 3;

  00055	8b 45 44	 mov	 eax, DWORD PTR b$[rbp]
  00058	c1 e0 03	 shl	 eax, 3
  0005b	89 45 44	 mov	 DWORD PTR b$[rbp], eax

; 38   : 
; 39   : 	PREENT_SAFE("% %\n", fmt_b(a), fmt_b(b));

  0005e	c7 45 68 07 00
	00 00		 mov	 DWORD PTR $S1$[rbp], 7
  00065	48 63 45 04	 movsxd	 rax, DWORD PTR a$[rbp]
  00069	48 89 85 b8 00
	00 00		 mov	 QWORD PTR $S2$[rbp], rax
  00070	48 8d 85 b8 00
	00 00		 lea	 rax, QWORD PTR $S2$[rbp]
  00077	48 89 45 70	 mov	 QWORD PTR $S1$[rbp+8], rax
  0007b	c7 45 78 07 00
	00 00		 mov	 DWORD PTR $S1$[rbp+16], 7
  00082	48 63 45 44	 movsxd	 rax, DWORD PTR b$[rbp]
  00086	48 89 85 d8 00
	00 00		 mov	 QWORD PTR $S3$[rbp], rax
  0008d	48 8d 85 d8 00
	00 00		 lea	 rax, QWORD PTR $S3$[rbp]
  00094	48 89 85 80 00
	00 00		 mov	 QWORD PTR $S1$[rbp+24], rax
  0009b	c7 85 f8 00 00
	00 fe ff ff ff	 mov	 DWORD PTR $S4$[rbp], -2
  000a5	48 c7 85 00 01
	00 00 00 00 00
	00		 mov	 QWORD PTR $S4$[rbp+8], 0
  000b0	48 8d 85 88 00
	00 00		 lea	 rax, QWORD PTR $S1$[rbp+32]
  000b7	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR $S4$[rbp]
  000be	48 8b f8	 mov	 rdi, rax
  000c1	48 8b f1	 mov	 rsi, rcx
  000c4	b9 10 00 00 00	 mov	 ecx, 16
  000c9	f3 a4		 rep movsb
  000cb	48 8d 55 68	 lea	 rdx, QWORD PTR $S1$[rbp]
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FEKHGLCJ@?$CF?5?$CF?6@
  000d6	e8 00 00 00 00	 call	 Preent

; 40   : 
; 41   : 	return 0;

  000db	33 c0		 xor	 eax, eax
  000dd	e9 2a 04 00 00	 jmp	 $LN1@main

; 42   : 
; 43   : 	mutationTest();

  000e2	e8 00 00 00 00	 call	 mutationTest

; 44   : 	//barrelTest();
; 45   : 
; 46   : 	return 0;

  000e7	33 c0		 xor	 eax, eax
  000e9	e9 1e 04 00 00	 jmp	 $LN1@main

; 47   : 
; 48   : 	int output = 0;

  000ee	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR output$[rbp], 0

; 49   : 
; 50   : 	COLLECTION myBarrel = Barrel_List(int, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

  000f8	c6 85 d8 01 00
	00 00		 mov	 BYTE PTR $S7$[rbp], 0
  000ff	c6 85 d9 01 00
	00 01		 mov	 BYTE PTR $S7$[rbp+1], 1
  00106	c6 85 da 01 00
	00 02		 mov	 BYTE PTR $S7$[rbp+2], 2
  0010d	c6 85 db 01 00
	00 03		 mov	 BYTE PTR $S7$[rbp+3], 3
  00114	c6 85 dc 01 00
	00 04		 mov	 BYTE PTR $S7$[rbp+4], 4
  0011b	c6 85 dd 01 00
	00 05		 mov	 BYTE PTR $S7$[rbp+5], 5
  00122	c6 85 de 01 00
	00 06		 mov	 BYTE PTR $S7$[rbp+6], 6
  00129	c6 85 df 01 00
	00 07		 mov	 BYTE PTR $S7$[rbp+7], 7
  00130	c6 85 e0 01 00
	00 08		 mov	 BYTE PTR $S7$[rbp+8], 8
  00137	c6 85 e1 01 00
	00 09		 mov	 BYTE PTR $S7$[rbp+9], 9
  0013e	c6 85 e2 01 00
	00 01		 mov	 BYTE PTR $S7$[rbp+10], 1
  00145	c6 85 a8 01 00
	00 00		 mov	 BYTE PTR $S6$[rbp], 0
  0014c	c6 85 a9 01 00
	00 01		 mov	 BYTE PTR $S6$[rbp+1], 1
  00153	c6 85 aa 01 00
	00 02		 mov	 BYTE PTR $S6$[rbp+2], 2
  0015a	c6 85 ab 01 00
	00 03		 mov	 BYTE PTR $S6$[rbp+3], 3
  00161	c6 85 ac 01 00
	00 04		 mov	 BYTE PTR $S6$[rbp+4], 4
  00168	c6 85 ad 01 00
	00 05		 mov	 BYTE PTR $S6$[rbp+5], 5
  0016f	c6 85 ae 01 00
	00 06		 mov	 BYTE PTR $S6$[rbp+6], 6
  00176	c6 85 af 01 00
	00 07		 mov	 BYTE PTR $S6$[rbp+7], 7
  0017d	c6 85 b0 01 00
	00 08		 mov	 BYTE PTR $S6$[rbp+8], 8
  00184	c6 85 b1 01 00
	00 09		 mov	 BYTE PTR $S6$[rbp+9], 9
  0018b	c6 85 b2 01 00
	00 00		 mov	 BYTE PTR $S6$[rbp+10], 0
  00192	c7 85 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR $S5$[rbp], 0
  0019c	c7 85 6c 01 00
	00 01 00 00 00	 mov	 DWORD PTR $S5$[rbp+4], 1
  001a6	c7 85 70 01 00
	00 02 00 00 00	 mov	 DWORD PTR $S5$[rbp+8], 2
  001b0	c7 85 74 01 00
	00 03 00 00 00	 mov	 DWORD PTR $S5$[rbp+12], 3
  001ba	c7 85 78 01 00
	00 04 00 00 00	 mov	 DWORD PTR $S5$[rbp+16], 4
  001c4	c7 85 7c 01 00
	00 05 00 00 00	 mov	 DWORD PTR $S5$[rbp+20], 5
  001ce	c7 85 80 01 00
	00 06 00 00 00	 mov	 DWORD PTR $S5$[rbp+24], 6
  001d8	c7 85 84 01 00
	00 07 00 00 00	 mov	 DWORD PTR $S5$[rbp+28], 7
  001e2	c7 85 88 01 00
	00 08 00 00 00	 mov	 DWORD PTR $S5$[rbp+32], 8
  001ec	c7 85 8c 01 00
	00 09 00 00 00	 mov	 DWORD PTR $S5$[rbp+36], 9
  001f6	48 8d 95 d8 01
	00 00		 lea	 rdx, QWORD PTR $S7$[rbp]
  001fd	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $S6$[rbp]
  00204	e8 00 00 00 00	 call	 paramCount
  00209	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0020d	45 33 c9	 xor	 r9d, r9d
  00210	4c 8d 85 68 01
	00 00		 lea	 r8, QWORD PTR $S5$[rbp]
  00217	ba 04 00 00 00	 mov	 edx, 4
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  00223	e8 00 00 00 00	 call	 Barrel_ctor
  00228	48 89 85 48 01
	00 00		 mov	 QWORD PTR myBarrel$[rbp], rax

; 51   : 
; 52   : 	if (!Collection_Read(myBarrel, &output, 3))

  0022f	41 b8 03 00 00
	00		 mov	 r8d, 3
  00235	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR output$[rbp]
  0023c	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR myBarrel$[rbp]
  00243	e8 00 00 00 00	 call	 Collection_Read
  00248	85 c0		 test	 eax, eax
  0024a	75 0a		 jne	 SHORT $LN2@main

; 53   : 		return 1;

  0024c	b8 01 00 00 00	 mov	 eax, 1
  00251	e9 b6 02 00 00	 jmp	 $LN1@main
$LN2@main:

; 54   : 
; 55   : 	PREENT_SAFE("value at index 3 of myBarrel: %\n", fmt_i(output));

  00256	c7 85 08 02 00
	00 09 00 00 00	 mov	 DWORD PTR $S8$[rbp], 9
  00260	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR output$[rbp]
  00266	89 85 44 02 00
	00		 mov	 DWORD PTR $S9$[rbp], eax
  0026c	48 8d 85 44 02
	00 00		 lea	 rax, QWORD PTR $S9$[rbp]
  00273	48 89 85 10 02
	00 00		 mov	 QWORD PTR $S8$[rbp+8], rax
  0027a	c7 85 68 02 00
	00 fe ff ff ff	 mov	 DWORD PTR $S10$[rbp], -2
  00284	48 c7 85 70 02
	00 00 00 00 00
	00		 mov	 QWORD PTR $S10$[rbp+8], 0
  0028f	48 8d 85 18 02
	00 00		 lea	 rax, QWORD PTR $S8$[rbp+16]
  00296	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $S10$[rbp]
  0029d	48 8b f8	 mov	 rdi, rax
  002a0	48 8b f1	 mov	 rsi, rcx
  002a3	b9 10 00 00 00	 mov	 ecx, 16
  002a8	f3 a4		 rep movsb
  002aa	48 8d 95 08 02
	00 00		 lea	 rdx, QWORD PTR $S8$[rbp]
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@FFPKGLBO@value?5at?5index?53?5of?5myBarrel?3?5?$CF@
  002b8	e8 00 00 00 00	 call	 Preent

; 56   : 
; 57   : 	COLLECTION myBucket = Bucket_List(int, 0, 1.0f, 2, 3, 4, 5);

  002bd	c6 85 44 03 00
	00 00		 mov	 BYTE PTR $S14$[rbp], 0
  002c4	c6 85 45 03 00
	00 01		 mov	 BYTE PTR $S14$[rbp+1], 1
  002cb	c6 85 46 03 00
	00 02		 mov	 BYTE PTR $S14$[rbp+2], 2
  002d2	c6 85 47 03 00
	00 03		 mov	 BYTE PTR $S14$[rbp+3], 3
  002d9	c6 85 48 03 00
	00 04		 mov	 BYTE PTR $S14$[rbp+4], 4
  002e0	c6 85 49 03 00
	00 05		 mov	 BYTE PTR $S14$[rbp+5], 5
  002e7	c6 85 4a 03 00
	00 01		 mov	 BYTE PTR $S14$[rbp+6], 1
  002ee	c6 85 24 03 00
	00 00		 mov	 BYTE PTR $S13$[rbp], 0
  002f5	c6 85 25 03 00
	00 01		 mov	 BYTE PTR $S13$[rbp+1], 1
  002fc	c6 85 26 03 00
	00 02		 mov	 BYTE PTR $S13$[rbp+2], 2
  00303	c6 85 27 03 00
	00 03		 mov	 BYTE PTR $S13$[rbp+3], 3
  0030a	c6 85 28 03 00
	00 04		 mov	 BYTE PTR $S13$[rbp+4], 4
  00311	c6 85 29 03 00
	00 05		 mov	 BYTE PTR $S13$[rbp+5], 5
  00318	c6 85 2a 03 00
	00 00		 mov	 BYTE PTR $S13$[rbp+6], 0
  0031f	c7 85 f8 02 00
	00 00 00 00 00	 mov	 DWORD PTR $S12$[rbp], 0
  00329	c7 85 fc 02 00
	00 01 00 00 00	 mov	 DWORD PTR $S12$[rbp+4], 1
  00333	c7 85 00 03 00
	00 02 00 00 00	 mov	 DWORD PTR $S12$[rbp+8], 2
  0033d	c7 85 04 03 00
	00 03 00 00 00	 mov	 DWORD PTR $S12$[rbp+12], 3
  00347	c7 85 08 03 00
	00 04 00 00 00	 mov	 DWORD PTR $S12$[rbp+16], 4
  00351	c7 85 0c 03 00
	00 05 00 00 00	 mov	 DWORD PTR $S12$[rbp+20], 5
  0035b	48 8d 85 b8 02
	00 00		 lea	 rax, QWORD PTR $S11$[rbp]
  00362	48 8b f8	 mov	 rdi, rax
  00365	33 c0		 xor	 eax, eax
  00367	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0036c	f3 aa		 rep stosb
  0036e	48 8d 95 44 03
	00 00		 lea	 rdx, QWORD PTR $S14$[rbp]
  00375	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $S13$[rbp]
  0037c	e8 00 00 00 00	 call	 paramCount
  00381	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00385	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0038d	4c 8d 8d f8 02
	00 00		 lea	 r9, QWORD PTR $S12$[rbp]
  00394	4c 8d 85 b8 02
	00 00		 lea	 r8, QWORD PTR $S11$[rbp]
  0039b	ba 04 00 00 00	 mov	 edx, 4
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  003a7	e8 00 00 00 00	 call	 Bucket_ctor
  003ac	48 89 85 98 02
	00 00		 mov	 QWORD PTR myBucket$[rbp], rax

; 58   : 
; 59   : 	COLLECTION emptyBucket = Bucket_Empty(int, 6);

  003b3	48 8d 85 c8 03
	00 00		 lea	 rax, QWORD PTR $S16$[rbp]
  003ba	48 8b f8	 mov	 rdi, rax
  003bd	33 c0		 xor	 eax, eax
  003bf	b9 18 00 00 00	 mov	 ecx, 24
  003c4	f3 aa		 rep stosb
  003c6	48 8d 85 88 03
	00 00		 lea	 rax, QWORD PTR $S15$[rbp]
  003cd	48 8b f8	 mov	 rdi, rax
  003d0	33 c0		 xor	 eax, eax
  003d2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003d7	f3 aa		 rep stosb
  003d9	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR [rsp+40], 6
  003e1	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  003e9	4c 8d 8d c8 03
	00 00		 lea	 r9, QWORD PTR $S16$[rbp]
  003f0	4c 8d 85 88 03
	00 00		 lea	 r8, QWORD PTR $S15$[rbp]
  003f7	ba 04 00 00 00	 mov	 edx, 4
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03JBIPMCLC@int@
  00403	e8 00 00 00 00	 call	 Bucket_ctor
  00408	48 89 85 68 03
	00 00		 mov	 QWORD PTR emptyBucket$[rbp], rax

; 60   : 
; 61   : 	if (!Collection_Read(myBucket, &output, 3))

  0040f	41 b8 03 00 00
	00		 mov	 r8d, 3
  00415	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR output$[rbp]
  0041c	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR myBucket$[rbp]
  00423	e8 00 00 00 00	 call	 Collection_Read
  00428	85 c0		 test	 eax, eax
  0042a	75 0a		 jne	 SHORT $LN3@main

; 62   : 		return 1;

  0042c	b8 01 00 00 00	 mov	 eax, 1
  00431	e9 d6 00 00 00	 jmp	 $LN1@main
$LN3@main:

; 63   : 
; 64   : 	PREENT_SAFE("collection count of emptyBucket: %\n", fmt_i(Collection_Count(emptyBucket)));

  00436	c7 85 f8 03 00
	00 09 00 00 00	 mov	 DWORD PTR $S17$[rbp], 9
  00440	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR emptyBucket$[rbp]
  00447	e8 00 00 00 00	 call	 Collection_Count
  0044c	89 85 34 04 00
	00		 mov	 DWORD PTR $S18$[rbp], eax
  00452	48 8d 85 34 04
	00 00		 lea	 rax, QWORD PTR $S18$[rbp]
  00459	48 89 85 00 04
	00 00		 mov	 QWORD PTR $S17$[rbp+8], rax
  00460	c7 85 58 04 00
	00 fe ff ff ff	 mov	 DWORD PTR $S19$[rbp], -2
  0046a	48 c7 85 60 04
	00 00 00 00 00
	00		 mov	 QWORD PTR $S19$[rbp+8], 0
  00475	48 8d 85 08 04
	00 00		 lea	 rax, QWORD PTR $S17$[rbp+16]
  0047c	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR $S19$[rbp]
  00483	48 8b f8	 mov	 rdi, rax
  00486	48 8b f1	 mov	 rsi, rcx
  00489	b9 10 00 00 00	 mov	 ecx, 16
  0048e	f3 a4		 rep movsb
  00490	48 8d 95 f8 03
	00 00		 lea	 rdx, QWORD PTR $S17$[rbp]
  00497	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@BBPKOEII@collection?5count?5of?5emptyBucket@
  0049e	e8 00 00 00 00	 call	 Preent

; 65   : 	PREENT_SAFE("value at index 3 of myBucket: %\n", fmt_i(output));

  004a3	c7 85 88 04 00
	00 09 00 00 00	 mov	 DWORD PTR $S20$[rbp], 9
  004ad	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR output$[rbp]
  004b3	89 85 c4 04 00
	00		 mov	 DWORD PTR $S21$[rbp], eax
  004b9	48 8d 85 c4 04
	00 00		 lea	 rax, QWORD PTR $S21$[rbp]
  004c0	48 89 85 90 04
	00 00		 mov	 QWORD PTR $S20$[rbp+8], rax
  004c7	c7 85 e8 04 00
	00 fe ff ff ff	 mov	 DWORD PTR $S22$[rbp], -2
  004d1	48 c7 85 f0 04
	00 00 00 00 00
	00		 mov	 QWORD PTR $S22$[rbp+8], 0
  004dc	48 8d 85 98 04
	00 00		 lea	 rax, QWORD PTR $S20$[rbp+16]
  004e3	48 8d 8d e8 04
	00 00		 lea	 rcx, QWORD PTR $S22$[rbp]
  004ea	48 8b f8	 mov	 rdi, rax
  004ed	48 8b f1	 mov	 rsi, rcx
  004f0	b9 10 00 00 00	 mov	 ecx, 16
  004f5	f3 a4		 rep movsb
  004f7	48 8d 95 88 04
	00 00		 lea	 rdx, QWORD PTR $S20$[rbp]
  004fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@EMHFLGEI@value?5at?5index?53?5of?5myBucket?3?5?$CF@
  00505	e8 00 00 00 00	 call	 Preent

; 66   : 
; 67   : 	return 0;

  0050a	33 c0		 xor	 eax, eax
$LN1@main:

; 68   : }

  0050c	48 8b f8	 mov	 rdi, rax
  0050f	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00513	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  0051a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0051f	48 8b c7	 mov	 rax, rdi
  00522	48 8b 8d 48 07
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00529	48 33 cd	 xor	 rcx, rbp
  0052c	e8 00 00 00 00	 call	 __security_check_cookie
  00531	48 8d a5 50 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1872]
  00538	5f		 pop	 rdi
  00539	5e		 pop	 rsi
  0053a	5d		 pop	 rbp
  0053b	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
